
F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003974  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb0  08003cb0  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb8  08003cb8  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08003cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000130  08003df0  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08003df0  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009de8  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a80  00000000  00000000  00029f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  0002c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017009  00000000  00000000  0002cab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b90c  00000000  00000000  00043ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d8b  00000000  00000000  0004f3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1158  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b4  00000000  00000000  000e11a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000130 	.word	0x20000130
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003afc 	.word	0x08003afc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000134 	.word	0x20000134
 80001dc:	08003afc 	.word	0x08003afc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DelayMicro>:
extern I2C_HandleTypeDef hi2c2;
char str1[100];
uint8_t portlcd; //������ ��� �������� ������ ����� ���������� ����������
//------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	micros *=(SystemCoreClock / 1000000) / 5;
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <DelayMicro+0x38>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <DelayMicro+0x3c>)
 8000592:	fba2 2303 	umull	r2, r3, r2, r3
 8000596:	0d5b      	lsrs	r3, r3, #21
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	fb02 f303 	mul.w	r3, r2, r3
 800059e:	607b      	str	r3, [r7, #4]
	while (micros--);
 80005a0:	bf00      	nop
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	607a      	str	r2, [r7, #4]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1fa      	bne.n	80005a2 <DelayMicro+0x1e>
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000c0 	.word	0x200000c0
 80005c0:	6b5fca6b 	.word	0x6b5fca6b

080005c4 <LCD_WriteByteI2CLCD>:
//------------------------------------------------
void LCD_WriteByteI2CLCD(uint8_t bt)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	buf[0]=bt;
 80005ce:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <LCD_WriteByteI2CLCD+0x2c>)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2,(uint16_t) 0x4E,buf,1,1000);
 80005d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <LCD_WriteByteI2CLCD+0x2c>)
 80005de:	214e      	movs	r1, #78	; 0x4e
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <LCD_WriteByteI2CLCD+0x30>)
 80005e2:	f001 fe9f 	bl	8002324 <HAL_I2C_Master_Transmit>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000014c 	.word	0x2000014c
 80005f4:	20000198 	.word	0x20000198

080005f8 <sendhalfbyte>:
//------------------------------------------------
void sendhalfbyte(uint8_t c)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	c<<=4;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	71fb      	strb	r3, [r7, #7]
	e_set();//�������� ����� E
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <sendhalfbyte+0x64>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <sendhalfbyte+0x64>)
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <sendhalfbyte+0x64>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffd2 	bl	80005c4 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 8000620:	2032      	movs	r0, #50	; 0x32
 8000622:	f7ff ffaf 	bl	8000584 <DelayMicro>
	LCD_WriteByteI2CLCD(portlcd|c);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <sendhalfbyte+0x64>)
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4313      	orrs	r3, r2
 800062e:	b2db      	uxtb	r3, r3
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffc7 	bl	80005c4 <LCD_WriteByteI2CLCD>
	e_reset();//��������� ����� E
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <sendhalfbyte+0x64>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	f023 0304 	bic.w	r3, r3, #4
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <sendhalfbyte+0x64>)
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <sendhalfbyte+0x64>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffbb 	bl	80005c4 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 800064e:	2032      	movs	r0, #50	; 0x32
 8000650:	f7ff ff98 	bl	8000584 <DelayMicro>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000014d 	.word	0x2000014d

08000660 <sendbyte>:
//------------------------------------------------
void sendbyte(uint8_t c, uint8_t mode)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
	if(mode==0) rs_reset();
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10c      	bne.n	8000690 <sendbyte+0x30>
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <sendbyte+0x6c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f023 0301 	bic.w	r3, r3, #1
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <sendbyte+0x6c>)
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <sendbyte+0x6c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff9b 	bl	80005c4 <LCD_WriteByteI2CLCD>
 800068e:	e00b      	b.n	80006a8 <sendbyte+0x48>
	else rs_set();
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <sendbyte+0x6c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <sendbyte+0x6c>)
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <sendbyte+0x6c>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff8e 	bl	80005c4 <LCD_WriteByteI2CLCD>
	uint8_t hc=0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
	hc=c>>4;
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	091b      	lsrs	r3, r3, #4
 80006b0:	73fb      	strb	r3, [r7, #15]
	sendhalfbyte(hc);sendhalfbyte(c);
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff9f 	bl	80005f8 <sendhalfbyte>
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff9b 	bl	80005f8 <sendhalfbyte>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000014d 	.word	0x2000014d

080006d0 <LCD_Clear>:
//------------------------------------------------
void LCD_Clear(void) //������� ������� ����� �������
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	sendbyte(0x01,0);
 80006d4:	2100      	movs	r1, #0
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff ffc2 	bl	8000660 <sendbyte>
	HAL_Delay(2);
 80006dc:	2002      	movs	r0, #2
 80006de:	f000 fd95 	bl	800120c <HAL_Delay>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <LCD_SendChar>:
//------------------------------------------------
void LCD_SendChar(char ch) //
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b082      	sub	sp, #8
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	4603      	mov	r3, r0
 80006ee:	71fb      	strb	r3, [r7, #7]
	sendbyte(ch,1);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2101      	movs	r1, #1
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffb3 	bl	8000660 <sendbyte>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <LCD_String>:
//------------------------------------------------
void LCD_String(char* st)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 800070a:	2300      	movs	r3, #0
 800070c:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 800070e:	e00a      	b.n	8000726 <LCD_String+0x24>
	{
		sendbyte(st[i],1);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2101      	movs	r1, #1
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffa0 	bl	8000660 <sendbyte>
		i++;
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	3301      	adds	r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1ee      	bne.n	8000710 <LCD_String+0xe>
	}
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <LCD_SetPos>:
//------------------------------------------------
void LCD_SetPos(uint8_t x, uint8_t y)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	switch(y)
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d846      	bhi.n	80007e0 <LCD_SetPos+0xa4>
 8000752:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <LCD_SetPos+0x1c>)
 8000754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000758:	08000769 	.word	0x08000769
 800075c:	08000781 	.word	0x08000781
 8000760:	080007a1 	.word	0x080007a1
 8000764:	080007c1 	.word	0x080007c1
	{
		case 0:
			sendbyte(x|0x80,0);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff74 	bl	8000660 <sendbyte>
			HAL_Delay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f000 fd47 	bl	800120c <HAL_Delay>
			break;
 800077e:	e02f      	b.n	80007e0 <LCD_SetPos+0xa4>
		case 1:
			sendbyte((0x40+x)|0x80,0);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	3340      	adds	r3, #64	; 0x40
 8000784:	b2db      	uxtb	r3, r3
 8000786:	b25b      	sxtb	r3, r3
 8000788:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800078c:	b25b      	sxtb	r3, r3
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff64 	bl	8000660 <sendbyte>
			HAL_Delay(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f000 fd37 	bl	800120c <HAL_Delay>
			break;
 800079e:	e01f      	b.n	80007e0 <LCD_SetPos+0xa4>
		case 2:
			sendbyte((0x14+x)|0x80,0);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	3314      	adds	r3, #20
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff54 	bl	8000660 <sendbyte>
			HAL_Delay(1);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 fd27 	bl	800120c <HAL_Delay>
			break;
 80007be:	e00f      	b.n	80007e0 <LCD_SetPos+0xa4>
		case 3:
			sendbyte((0x54+x)|0x80,0);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	3354      	adds	r3, #84	; 0x54
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff44 	bl	8000660 <sendbyte>
			HAL_Delay(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f000 fd17 	bl	800120c <HAL_Delay>
			break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <LCD_ini>:
//------------------------------------------------
void LCD_ini(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 80007ec:	200f      	movs	r0, #15
 80007ee:	f000 fd0d 	bl	800120c <HAL_Delay>
	sendhalfbyte(0x03);
 80007f2:	2003      	movs	r0, #3
 80007f4:	f7ff ff00 	bl	80005f8 <sendhalfbyte>
	HAL_Delay(4);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f000 fd07 	bl	800120c <HAL_Delay>
	sendhalfbyte(0x03);
 80007fe:	2003      	movs	r0, #3
 8000800:	f7ff fefa 	bl	80005f8 <sendhalfbyte>
	DelayMicro(100);
 8000804:	2064      	movs	r0, #100	; 0x64
 8000806:	f7ff febd 	bl	8000584 <DelayMicro>
	sendhalfbyte(0x03);
 800080a:	2003      	movs	r0, #3
 800080c:	f7ff fef4 	bl	80005f8 <sendhalfbyte>
	HAL_Delay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f000 fcfb 	bl	800120c <HAL_Delay>
	sendhalfbyte(0x02);
 8000816:	2002      	movs	r0, #2
 8000818:	f7ff feee 	bl	80005f8 <sendhalfbyte>
	HAL_Delay(1);
 800081c:	2001      	movs	r0, #1
 800081e:	f000 fcf5 	bl	800120c <HAL_Delay>
	sendbyte(0x28,0);//����� 4 ���, 2 ����� (��� ������ �������� ������� ��� 4 �����, ����� 5�8
 8000822:	2100      	movs	r1, #0
 8000824:	2028      	movs	r0, #40	; 0x28
 8000826:	f7ff ff1b 	bl	8000660 <sendbyte>
	HAL_Delay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f000 fcee 	bl	800120c <HAL_Delay>
	sendbyte(0x0C,0);//������� �������� (D=1), ������� ������� �� �����
 8000830:	2100      	movs	r1, #0
 8000832:	200c      	movs	r0, #12
 8000834:	f7ff ff14 	bl	8000660 <sendbyte>
	HAL_Delay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f000 fce7 	bl	800120c <HAL_Delay>
	sendbyte(0x01,0);//������ �����
 800083e:	2100      	movs	r1, #0
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff ff0d 	bl	8000660 <sendbyte>
	HAL_Delay(2);
 8000846:	2002      	movs	r0, #2
 8000848:	f000 fce0 	bl	800120c <HAL_Delay>
	sendbyte(0x06,0);//����� �����
 800084c:	2100      	movs	r1, #0
 800084e:	2006      	movs	r0, #6
 8000850:	f7ff ff06 	bl	8000660 <sendbyte>
	HAL_Delay(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f000 fcd9 	bl	800120c <HAL_Delay>
	setled();//���������
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <LCD_ini+0xa8>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <LCD_ini+0xa8>)
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <LCD_ini+0xa8>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fea9 	bl	80005c4 <LCD_WriteByteI2CLCD>
	setwrite();//������
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <LCD_ini+0xa8>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	f023 0302 	bic.w	r3, r3, #2
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <LCD_ini+0xa8>)
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <LCD_ini+0xa8>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe9d 	bl	80005c4 <LCD_WriteByteI2CLCD>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000014d 	.word	0x2000014d

08000894 <decodeMorse>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char decodeMorse()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 41; i++) {
 800089a:	2300      	movs	r3, #0
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	e034      	b.n	800090a <decodeMorse+0x76>
		for (uint8_t j = 0; j < data_index; j++) {
 80008a0:	2300      	movs	r3, #0
 80008a2:	71bb      	strb	r3, [r7, #6]
 80008a4:	e026      	b.n	80008f4 <decodeMorse+0x60>
			if (buffer[j] == codeTable[i][j]) {
 80008a6:	79bb      	ldrb	r3, [r7, #6]
 80008a8:	4a1c      	ldr	r2, [pc, #112]	; (800091c <decodeMorse+0x88>)
 80008aa:	5cd2      	ldrb	r2, [r2, r3]
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	491c      	ldr	r1, [pc, #112]	; (8000920 <decodeMorse+0x8c>)
 80008b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	440b      	add	r3, r1
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d117      	bne.n	80008ee <decodeMorse+0x5a>
				count++;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <decodeMorse+0x90>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <decodeMorse+0x90>)
 80008c8:	701a      	strb	r2, [r3, #0]
				if (count == data_index) {
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <decodeMorse+0x90>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <decodeMorse+0x94>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d10b      	bne.n	80008ee <decodeMorse+0x5a>
					data_index = 0;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <decodeMorse+0x94>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
					memset(buffer, 0, 20);
 80008dc:	2214      	movs	r2, #20
 80008de:	2100      	movs	r1, #0
 80008e0:	480e      	ldr	r0, [pc, #56]	; (800091c <decodeMorse+0x88>)
 80008e2:	f002 fc95 	bl	8003210 <memset>
					return decodeTable[j];
 80008e6:	79bb      	ldrb	r3, [r7, #6]
 80008e8:	4a10      	ldr	r2, [pc, #64]	; (800092c <decodeMorse+0x98>)
 80008ea:	5cd3      	ldrb	r3, [r2, r3]
 80008ec:	e011      	b.n	8000912 <decodeMorse+0x7e>
		for (uint8_t j = 0; j < data_index; j++) {
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	3301      	adds	r3, #1
 80008f2:	71bb      	strb	r3, [r7, #6]
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <decodeMorse+0x94>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	79ba      	ldrb	r2, [r7, #6]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d3d3      	bcc.n	80008a6 <decodeMorse+0x12>
				}
			}
		}
		count = 0;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <decodeMorse+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 41; i++) {
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	3301      	adds	r3, #1
 8000908:	71fb      	strb	r3, [r7, #7]
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b28      	cmp	r3, #40	; 0x28
 800090e:	d9c7      	bls.n	80008a0 <decodeMorse+0xc>
	}
    return '?';
 8000910:	233f      	movs	r3, #63	; 0x3f
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000ac 	.word	0x200000ac
 8000920:	20000000 	.word	0x20000000
 8000924:	200002a5 	.word	0x200002a5
 8000928:	200001ed 	.word	0x200001ed
 800092c:	08003c38 	.word	0x08003c38

08000930 <determineMorseSymbol>:

enum MorseSymbol determineMorseSymbol(uint16_t duration)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
    if (DOT_DURATION_MIN < duration && duration < DOT_DURATION_MAX)
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	2b0a      	cmp	r3, #10
 800093e:	d904      	bls.n	800094a <determineMorseSymbol+0x1a>
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	2b27      	cmp	r3, #39	; 0x27
 8000944:	d801      	bhi.n	800094a <determineMorseSymbol+0x1a>
        return SYMBOL_DOT;
 8000946:	2301      	movs	r3, #1
 8000948:	e009      	b.n	800095e <determineMorseSymbol+0x2e>
    else if (DASH_DURATION_MIN < duration && duration < DASH_DURATION_MAX)
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	2bc8      	cmp	r3, #200	; 0xc8
 800094e:	d905      	bls.n	800095c <determineMorseSymbol+0x2c>
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000956:	d201      	bcs.n	800095c <determineMorseSymbol+0x2c>
        return SYMBOL_DASH;
 8000958:	2302      	movs	r3, #2
 800095a:	e000      	b.n	800095e <determineMorseSymbol+0x2e>
    else
        return SYMBOL_NONE;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <Record_Data>:

void Record_Data(uint16_t value)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
	if (value < THRESHOLD && i < 15) {
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800097c:	d22c      	bcs.n	80009d8 <Record_Data+0x6c>
 800097e:	4b75      	ldr	r3, [pc, #468]	; (8000b54 <Record_Data+0x1e8>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b0e      	cmp	r3, #14
 8000984:	d828      	bhi.n	80009d8 <Record_Data+0x6c>
		LCD_SetPos(i, 0);
 8000986:	4b73      	ldr	r3, [pc, #460]	; (8000b54 <Record_Data+0x1e8>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fed5 	bl	800073c <LCD_SetPos>
		LCD_SendChar(buffer[i]);
 8000992:	4b70      	ldr	r3, [pc, #448]	; (8000b54 <Record_Data+0x1e8>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	4b6f      	ldr	r3, [pc, #444]	; (8000b58 <Record_Data+0x1ec>)
 800099a:	5c9b      	ldrb	r3, [r3, r2]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fea2 	bl	80006e6 <LCD_SendChar>
		i++;
 80009a2:	4b6c      	ldr	r3, [pc, #432]	; (8000b54 <Record_Data+0x1e8>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b6a      	ldr	r3, [pc, #424]	; (8000b54 <Record_Data+0x1e8>)
 80009ac:	701a      	strb	r2, [r3, #0]
		LCD_SetPos(0, 1);
 80009ae:	2101      	movs	r1, #1
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fec3 	bl	800073c <LCD_SetPos>
		sprintf(str, "%p", &buffer[i]);
 80009b6:	4b67      	ldr	r3, [pc, #412]	; (8000b54 <Record_Data+0x1e8>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b66      	ldr	r3, [pc, #408]	; (8000b58 <Record_Data+0x1ec>)
 80009be:	4413      	add	r3, r2
 80009c0:	461a      	mov	r2, r3
 80009c2:	4966      	ldr	r1, [pc, #408]	; (8000b5c <Record_Data+0x1f0>)
 80009c4:	4866      	ldr	r0, [pc, #408]	; (8000b60 <Record_Data+0x1f4>)
 80009c6:	f002 fc2b 	bl	8003220 <siprintf>
		LCD_String(str);
 80009ca:	4865      	ldr	r0, [pc, #404]	; (8000b60 <Record_Data+0x1f4>)
 80009cc:	f7ff fe99 	bl	8000702 <LCD_String>
		HAL_Delay(240);
 80009d0:	20f0      	movs	r0, #240	; 0xf0
 80009d2:	f000 fc1b 	bl	800120c <HAL_Delay>
 80009d6:	e008      	b.n	80009ea <Record_Data+0x7e>
	}
	else if (i >= 15) {
 80009d8:	4b5e      	ldr	r3, [pc, #376]	; (8000b54 <Record_Data+0x1e8>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b0e      	cmp	r3, #14
 80009de:	d904      	bls.n	80009ea <Record_Data+0x7e>
		LCD_Clear();
 80009e0:	f7ff fe76 	bl	80006d0 <LCD_Clear>
		i = 0;
 80009e4:	4b5b      	ldr	r3, [pc, #364]	; (8000b54 <Record_Data+0x1e8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
	}

    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 80009ea:	2102      	movs	r1, #2
 80009ec:	485d      	ldr	r0, [pc, #372]	; (8000b64 <Record_Data+0x1f8>)
 80009ee:	f001 fb3d 	bl	800206c <HAL_GPIO_ReadPin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d115      	bne.n	8000a24 <Record_Data+0xb8>
    {
        if (start_time == 0)
 80009f8:	4b5b      	ldr	r3, [pc, #364]	; (8000b68 <Record_Data+0x1fc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d105      	bne.n	8000a0c <Record_Data+0xa0>
        {
            start_time = HAL_GetTick();
 8000a00:	f000 fbf8 	bl	80011f4 <HAL_GetTick>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4a58      	ldr	r2, [pc, #352]	; (8000b68 <Record_Data+0x1fc>)
 8000a08:	6013      	str	r3, [r2, #0]
			//LCD_Clear();
		}

		start_time = 0;
	}
}
 8000a0a:	e09e      	b.n	8000b4a <Record_Data+0x1de>
            duration = HAL_GetTick() - start_time;
 8000a0c:	f000 fbf2 	bl	80011f4 <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	4b55      	ldr	r3, [pc, #340]	; (8000b68 <Record_Data+0x1fc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	4a54      	ldr	r2, [pc, #336]	; (8000b6c <Record_Data+0x200>)
 8000a1a:	6013      	str	r3, [r2, #0]
            word_start_time = 0;
 8000a1c:	4b54      	ldr	r3, [pc, #336]	; (8000b70 <Record_Data+0x204>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
}
 8000a22:	e092      	b.n	8000b4a <Record_Data+0x1de>
    else if (start_time != 0)
 8000a24:	4b50      	ldr	r3, [pc, #320]	; (8000b68 <Record_Data+0x1fc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f000 808e 	beq.w	8000b4a <Record_Data+0x1de>
    	if (word_start_time == 0)
 8000a2e:	4b50      	ldr	r3, [pc, #320]	; (8000b70 <Record_Data+0x204>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d105      	bne.n	8000a42 <Record_Data+0xd6>
    		word_start_time = HAL_GetTick();
 8000a36:	f000 fbdd 	bl	80011f4 <HAL_GetTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a4c      	ldr	r2, [pc, #304]	; (8000b70 <Record_Data+0x204>)
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e007      	b.n	8000a52 <Record_Data+0xe6>
			word_time = HAL_GetTick() - word_start_time;
 8000a42:	f000 fbd7 	bl	80011f4 <HAL_GetTick>
 8000a46:	4602      	mov	r2, r0
 8000a48:	4b49      	ldr	r3, [pc, #292]	; (8000b70 <Record_Data+0x204>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	4a49      	ldr	r2, [pc, #292]	; (8000b74 <Record_Data+0x208>)
 8000a50:	6013      	str	r3, [r2, #0]
		enum MorseSymbol symbol = determineMorseSymbol(duration);
 8000a52:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <Record_Data+0x200>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff69 	bl	8000930 <determineMorseSymbol>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	73fb      	strb	r3, [r7, #15]
		switch (symbol)
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d002      	beq.n	8000a6e <Record_Data+0x102>
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d00d      	beq.n	8000a88 <Record_Data+0x11c>
				break;
 8000a6c:	e019      	b.n	8000aa2 <Record_Data+0x136>
				buffer[data_index] = '0';
 8000a6e:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <Record_Data+0x20c>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b38      	ldr	r3, [pc, #224]	; (8000b58 <Record_Data+0x1ec>)
 8000a76:	2130      	movs	r1, #48	; 0x30
 8000a78:	5499      	strb	r1, [r3, r2]
				data_index++;
 8000a7a:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <Record_Data+0x20c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <Record_Data+0x20c>)
 8000a84:	701a      	strb	r2, [r3, #0]
				break;
 8000a86:	e00c      	b.n	8000aa2 <Record_Data+0x136>
				buffer[data_index] = '1';
 8000a88:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <Record_Data+0x20c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <Record_Data+0x1ec>)
 8000a90:	2131      	movs	r1, #49	; 0x31
 8000a92:	5499      	strb	r1, [r3, r2]
				data_index++;
 8000a94:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <Record_Data+0x20c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <Record_Data+0x20c>)
 8000a9e:	701a      	strb	r2, [r3, #0]
				break;
 8000aa0:	bf00      	nop
		if (word_time > TIME_OUT) {
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <Record_Data+0x208>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000aaa:	d944      	bls.n	8000b36 <Record_Data+0x1ca>
			decoderStr[decoder_index] = decodeMorse();
 8000aac:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <Record_Data+0x210>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461c      	mov	r4, r3
 8000ab2:	f7ff feef 	bl	8000894 <decodeMorse>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <Record_Data+0x214>)
 8000abc:	551a      	strb	r2, [r3, r4]
			LCD_SetPos(x_pos, y_pos);
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <Record_Data+0x218>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4a31      	ldr	r2, [pc, #196]	; (8000b88 <Record_Data+0x21c>)
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe37 	bl	800073c <LCD_SetPos>
			LCD_SendChar(decoderStr[decoder_index]);
 8000ace:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <Record_Data+0x210>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <Record_Data+0x214>)
 8000ad6:	5c9b      	ldrb	r3, [r3, r2]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe04 	bl	80006e6 <LCD_SendChar>
			decoder_index++;
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <Record_Data+0x210>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <Record_Data+0x210>)
 8000ae8:	701a      	strb	r2, [r3, #0]
			x_pos++;
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <Record_Data+0x218>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <Record_Data+0x218>)
 8000af4:	701a      	strb	r2, [r3, #0]
			if (decoder_index > DECODER_SIZE) { decoder_index = 0; }
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <Record_Data+0x210>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b50      	cmp	r3, #80	; 0x50
 8000afc:	d902      	bls.n	8000b04 <Record_Data+0x198>
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <Record_Data+0x210>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
			if (x_pos > X_MAX_POS) { x_pos = 0; y_pos++; }
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <Record_Data+0x218>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b13      	cmp	r3, #19
 8000b0a:	d908      	bls.n	8000b1e <Record_Data+0x1b2>
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <Record_Data+0x218>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <Record_Data+0x21c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <Record_Data+0x21c>)
 8000b1c:	701a      	strb	r2, [r3, #0]
			if (y_pos > Y_MAX_POS) { x_pos = 0; y_pos = 0; LCD_Clear(); }
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <Record_Data+0x21c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	d907      	bls.n	8000b36 <Record_Data+0x1ca>
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <Record_Data+0x218>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <Record_Data+0x21c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	f7ff fdcd 	bl	80006d0 <LCD_Clear>
		if (data_index > ARRAY_SIZE) {
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <Record_Data+0x20c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <Record_Data+0x1d8>
			data_index = 0;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <Record_Data+0x20c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
		start_time = 0;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <Record_Data+0x1fc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001ec 	.word	0x200001ec
 8000b58:	200000ac 	.word	0x200000ac
 8000b5c:	08003c34 	.word	0x08003c34
 8000b60:	200001f4 	.word	0x200001f4
 8000b64:	40020000 	.word	0x40020000
 8000b68:	20000244 	.word	0x20000244
 8000b6c:	20000250 	.word	0x20000250
 8000b70:	20000248 	.word	0x20000248
 8000b74:	2000024c 	.word	0x2000024c
 8000b78:	200001ed 	.word	0x200001ed
 8000b7c:	200002a4 	.word	0x200002a4
 8000b80:	20000254 	.word	0x20000254
 8000b84:	200001ee 	.word	0x200001ee
 8000b88:	200001ef 	.word	0x200001ef

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b90:	f000 faca 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b94:	f000 f832 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b98:	f000 f918 	bl	8000dcc <MX_GPIO_Init>
  MX_I2C2_Init();
 8000b9c:	f000 f8e8 	bl	8000d70 <MX_I2C2_Init>
  MX_ADC1_Init();
 8000ba0:	f000 f894 	bl	8000ccc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_ini();
 8000ba4:	f7ff fe20 	bl	80007e8 <LCD_ini>
  LCD_Clear();
 8000ba8:	f7ff fd92 	bl	80006d0 <LCD_Clear>
  //HAL_ADC_Start_IT(&hadc1);

  word_time = HAL_GetTick();
 8000bac:	f000 fb22 	bl	80011f4 <HAL_GetTick>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <main+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]
  HAL_ADC_Start_IT(&hadc1);
 8000bb6:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <main+0x68>)
 8000bb8:	f000 fb90 	bl	80012dc <HAL_ADC_Start_IT>
  value = HAL_ADC_GetValue(&hadc1);
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <main+0x68>)
 8000bbe:	f000 fd5b 	bl	8001678 <HAL_ADC_GetValue>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <main+0x6c>)
 8000bc6:	6013      	str	r3, [r2, #0]
  HAL_Delay(30);
 8000bc8:	201e      	movs	r0, #30
 8000bca:	f000 fb1f 	bl	800120c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	HAL_ADC_Start_IT(&hadc1);
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <main+0x68>)
 8000bd0:	f000 fb84 	bl	80012dc <HAL_ADC_Start_IT>
		value = HAL_ADC_GetValue(&hadc1);
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <main+0x68>)
 8000bd6:	f000 fd4f 	bl	8001678 <HAL_ADC_GetValue>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <main+0x6c>)
 8000bde:	6013      	str	r3, [r2, #0]

		Record_Data(value);
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <main+0x6c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fec0 	bl	800096c <Record_Data>
	  	HAL_ADC_Start_IT(&hadc1);
 8000bec:	e7ef      	b.n	8000bce <main+0x42>
 8000bee:	bf00      	nop
 8000bf0:	2000024c 	.word	0x2000024c
 8000bf4:	20000150 	.word	0x20000150
 8000bf8:	200001f0 	.word	0x200001f0

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	; 0x50
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2230      	movs	r2, #48	; 0x30
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fb00 	bl	8003210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <SystemClock_Config+0xc8>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a26      	ldr	r2, [pc, #152]	; (8000cc4 <SystemClock_Config+0xc8>)
 8000c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <SystemClock_Config+0xc8>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a20      	ldr	r2, [pc, #128]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c60:	2310      	movs	r3, #16
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c64:	2302      	movs	r3, #2
 8000c66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000c70:	2364      	movs	r3, #100	; 0x64
 8000c72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fe57 	bl	8002934 <HAL_RCC_OscConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c8c:	f000 f8d4 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	230f      	movs	r3, #15
 8000c92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c94:	2302      	movs	r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	2103      	movs	r1, #3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f002 f8b9 	bl	8002e24 <HAL_RCC_ClockConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cb8:	f000 f8be 	bl	8000e38 <Error_Handler>
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3750      	adds	r7, #80	; 0x50
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40007000 	.word	0x40007000

08000ccc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000ce0:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <MX_ADC1_Init+0x9c>)
 8000ce2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000ce6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <MX_ADC1_Init+0xa0>)
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000d2e:	f000 fa91 	bl	8001254 <HAL_ADC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d38:	f000 f87e 	bl	8000e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_ADC1_Init+0x98>)
 8000d4e:	f000 fcbf 	bl	80016d0 <HAL_ADC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d58:	f000 f86e 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000150 	.word	0x20000150
 8000d68:	40012000 	.word	0x40012000
 8000d6c:	0f000001 	.word	0x0f000001

08000d70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d76:	4a13      	ldr	r2, [pc, #76]	; (8000dc4 <MX_I2C2_Init+0x54>)
 8000d78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d7c:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_I2C2_Init+0x58>)
 8000d7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d92:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000dae:	f001 f975 	bl	800209c <HAL_I2C_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000db8:	f000 f83e 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000198 	.word	0x20000198
 8000dc4:	40005800 	.word	0x40005800
 8000dc8:	000186a0 	.word	0x000186a0

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_GPIO_Init+0x68>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a16      	ldr	r2, [pc, #88]	; (8000e34 <MX_GPIO_Init+0x68>)
 8000ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_GPIO_Init+0x68>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_GPIO_Init+0x68>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <MX_GPIO_Init+0x68>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_GPIO_Init+0x68>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_GPIO_Init+0x68>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <MX_GPIO_Init+0x68>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_GPIO_Init+0x68>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <Error_Handler+0x8>
	...

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e58:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800

08000e94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <HAL_ADC_MspInit+0x8c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d12f      	bne.n	8000f16 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_ADC_MspInit+0x90>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <HAL_ADC_MspInit+0x90>)
 8000ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_ADC_MspInit+0x90>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_ADC_MspInit+0x90>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <HAL_ADC_MspInit+0x90>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_ADC_MspInit+0x90>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <HAL_ADC_MspInit+0x94>)
 8000f02:	f000 ff2f 	bl	8001d64 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2012      	movs	r0, #18
 8000f0c:	f000 fef3 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f10:	2012      	movs	r0, #18
 8000f12:	f000 ff0c 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	; 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40012000 	.word	0x40012000
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <HAL_I2C_MspInit+0xa4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d13c      	bne.n	8000fc8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <HAL_I2C_MspInit+0xa8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <HAL_I2C_MspInit+0xa8>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_I2C_MspInit+0xa8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4814      	ldr	r0, [pc, #80]	; (8000fd8 <HAL_I2C_MspInit+0xac>)
 8000f88:	f000 feec 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f90:	2312      	movs	r3, #18
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000f9c:	2309      	movs	r3, #9
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <HAL_I2C_MspInit+0xac>)
 8000fa8:	f000 fedc 	bl	8001d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_I2C_MspInit+0xa8>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_I2C_MspInit+0xa8>)
 8000fb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_I2C_MspInit+0xa8>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40005800 	.word	0x40005800
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020400 	.word	0x40020400

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 f8d0 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <ADC_IRQHandler+0x10>)
 8001036:	f000 fa0f 	bl	8001458 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000150 	.word	0x20000150

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f002 f8a2 	bl	80031bc <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20020000 	.word	0x20020000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	200002a8 	.word	0x200002a8
 80010ac:	200002c0 	.word	0x200002c0

080010b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010da:	490e      	ldr	r1, [pc, #56]	; (8001114 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f0:	4c0b      	ldr	r4, [pc, #44]	; (8001120 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fe:	f7ff ffd7 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f002 f861 	bl	80031c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff fd41 	bl	8000b8c <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800110c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001118:	08003cc0 	.word	0x08003cc0
  ldr r2, =_sbss
 800111c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001120:	200002c0 	.word	0x200002c0

08001124 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <DMA1_Stream0_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_Init+0x40>)
 8001132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_Init+0x40>)
 800113e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_Init+0x40>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 fdc5 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	200f      	movs	r0, #15
 8001158:	f000 f808 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff fe72 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023c00 	.word	0x40023c00

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x54>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x58>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fddd 	bl	8001d4a <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 fda5 	bl	8001cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_InitTick+0x5c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200000c0 	.word	0x200000c0
 80011c4:	200000c8 	.word	0x200000c8
 80011c8:	200000c4 	.word	0x200000c4

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	200000c8 	.word	0x200000c8
 80011f0:	200002ac 	.word	0x200002ac

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200002ac 	.word	0x200002ac

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200000c8 	.word	0x200000c8

08001254 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e033      	b.n	80012d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d109      	bne.n	8001286 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fe0e 	bl	8000e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	d118      	bne.n	80012c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800129a:	f023 0302 	bic.w	r3, r3, #2
 800129e:	f043 0202 	orr.w	r2, r3, #2
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fb44 	bl	8001934 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
 80012c2:	e001      	b.n	80012c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Start_IT+0x1a>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e0a1      	b.n	800143a <HAL_ADC_Start_IT+0x15e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b01      	cmp	r3, #1
 800130a:	d018      	beq.n	800133e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800131c:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <HAL_ADC_Start_IT+0x16c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a4a      	ldr	r2, [pc, #296]	; (800144c <HAL_ADC_Start_IT+0x170>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0c9a      	lsrs	r2, r3, #18
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001330:	e002      	b.n	8001338 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3b01      	subs	r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f9      	bne.n	8001332 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b01      	cmp	r3, #1
 800134a:	d169      	bne.n	8001420 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001376:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800138a:	d106      	bne.n	800139a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	f023 0206 	bic.w	r2, r3, #6
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	645a      	str	r2, [r3, #68]	; 0x44
 8001398:	e002      	b.n	80013a0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_ADC_Start_IT+0x174>)
 80013aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013b4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10f      	bne.n	80013f6 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d129      	bne.n	8001438 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	e020      	b.n	8001438 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a16      	ldr	r2, [pc, #88]	; (8001454 <HAL_ADC_Start_IT+0x178>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d11b      	bne.n	8001438 <HAL_ADC_Start_IT+0x15c>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d114      	bne.n	8001438 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	e00b      	b.n	8001438 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f043 0210 	orr.w	r2, r3, #16
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	f043 0201 	orr.w	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	200000c0 	.word	0x200000c0
 800144c:	431bde83 	.word	0x431bde83
 8001450:	40012300 	.word	0x40012300
 8001454:	40012000 	.word	0x40012000

08001458 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d049      	beq.n	8001522 <HAL_ADC_IRQHandler+0xca>
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d046      	beq.n	8001522 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d12b      	bne.n	8001512 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d127      	bne.n	8001512 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d119      	bne.n	8001512 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0220 	bic.w	r2, r2, #32
 80014ec:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d105      	bne.n	8001512 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f043 0201 	orr.w	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f8bd 	bl	8001692 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f06f 0212 	mvn.w	r2, #18
 8001520:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001530:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d057      	beq.n	80015e8 <HAL_ADC_IRQHandler+0x190>
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d054      	beq.n	80015e8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b00      	cmp	r3, #0
 8001548:	d105      	bne.n	8001556 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d139      	bne.n	80015d8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800157c:	2b00      	cmp	r3, #0
 800157e:	d12b      	bne.n	80015d8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800158a:	2b00      	cmp	r3, #0
 800158c:	d124      	bne.n	80015d8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001598:	2b00      	cmp	r3, #0
 800159a:	d11d      	bne.n	80015d8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d119      	bne.n	80015d8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f043 0201 	orr.w	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 faa7 	bl	8001b2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f06f 020c 	mvn.w	r2, #12
 80015e6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d017      	beq.n	800162e <HAL_ADC_IRQHandler+0x1d6>
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d014      	beq.n	800162e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b01      	cmp	r3, #1
 8001610:	d10d      	bne.n	800162e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f841 	bl	80016a6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f06f 0201 	mvn.w	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 0320 	and.w	r3, r3, #32
 8001634:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800163c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d015      	beq.n	8001670 <HAL_ADC_IRQHandler+0x218>
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d012      	beq.n	8001670 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f043 0202 	orr.w	r2, r3, #2
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f06f 0220 	mvn.w	r2, #32
 800165e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f82a 	bl	80016ba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f06f 0220 	mvn.w	r2, #32
 800166e:	601a      	str	r2, [r3, #0]
  }
}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x1c>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e113      	b.n	8001914 <HAL_ADC_ConfigChannel+0x244>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b09      	cmp	r3, #9
 80016fa:	d925      	bls.n	8001748 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68d9      	ldr	r1, [r3, #12]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	3b1e      	subs	r3, #30
 8001712:	2207      	movs	r2, #7
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43da      	mvns	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	400a      	ands	r2, r1
 8001720:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68d9      	ldr	r1, [r3, #12]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	4618      	mov	r0, r3
 8001734:	4603      	mov	r3, r0
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4403      	add	r3, r0
 800173a:	3b1e      	subs	r3, #30
 800173c:	409a      	lsls	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	e022      	b.n	800178e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6919      	ldr	r1, [r3, #16]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	2207      	movs	r2, #7
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	400a      	ands	r2, r1
 800176a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6919      	ldr	r1, [r3, #16]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	4603      	mov	r3, r0
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4403      	add	r3, r0
 8001784:	409a      	lsls	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b06      	cmp	r3, #6
 8001794:	d824      	bhi.n	80017e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b05      	subs	r3, #5
 80017a8:	221f      	movs	r2, #31
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	400a      	ands	r2, r1
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3b05      	subs	r3, #5
 80017d2:	fa00 f203 	lsl.w	r2, r0, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	635a      	str	r2, [r3, #52]	; 0x34
 80017de:	e04c      	b.n	800187a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	d824      	bhi.n	8001832 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	3b23      	subs	r3, #35	; 0x23
 80017fa:	221f      	movs	r2, #31
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43da      	mvns	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	400a      	ands	r2, r1
 8001808:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	4618      	mov	r0, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	3b23      	subs	r3, #35	; 0x23
 8001824:	fa00 f203 	lsl.w	r2, r0, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
 8001830:	e023      	b.n	800187a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b41      	subs	r3, #65	; 0x41
 8001844:	221f      	movs	r2, #31
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	400a      	ands	r2, r1
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3b41      	subs	r3, #65	; 0x41
 800186e:	fa00 f203 	lsl.w	r2, r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800187a:	4b29      	ldr	r3, [pc, #164]	; (8001920 <HAL_ADC_ConfigChannel+0x250>)
 800187c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a28      	ldr	r2, [pc, #160]	; (8001924 <HAL_ADC_ConfigChannel+0x254>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d10f      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1d8>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b12      	cmp	r3, #18
 800188e:	d10b      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <HAL_ADC_ConfigChannel+0x254>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12b      	bne.n	800190a <HAL_ADC_ConfigChannel+0x23a>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_ADC_ConfigChannel+0x258>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d003      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x1f4>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b11      	cmp	r3, #17
 80018c2:	d122      	bne.n	800190a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a11      	ldr	r2, [pc, #68]	; (8001928 <HAL_ADC_ConfigChannel+0x258>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d111      	bne.n	800190a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_ADC_ConfigChannel+0x25c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a11      	ldr	r2, [pc, #68]	; (8001930 <HAL_ADC_ConfigChannel+0x260>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	0c9a      	lsrs	r2, r3, #18
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018fc:	e002      	b.n	8001904 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	3b01      	subs	r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f9      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40012300 	.word	0x40012300
 8001924:	40012000 	.word	0x40012000
 8001928:	10000012 	.word	0x10000012
 800192c:	200000c0 	.word	0x200000c0
 8001930:	431bde83 	.word	0x431bde83

08001934 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800193c:	4b79      	ldr	r3, [pc, #484]	; (8001b24 <ADC_Init+0x1f0>)
 800193e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	431a      	orrs	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	021a      	lsls	r2, r3, #8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800198c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <ADC_Init+0x1f4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d022      	beq.n	8001a12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e00f      	b.n	8001a32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0202 	bic.w	r2, r2, #2
 8001a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7e1b      	ldrb	r3, [r3, #24]
 8001a4c:	005a      	lsls	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	035a      	lsls	r2, r3, #13
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	e007      	b.n	8001aa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	051a      	lsls	r2, r3, #20
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aea:	025a      	lsls	r2, r3, #9
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	029a      	lsls	r2, r3, #10
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40012300 	.word	0x40012300
 8001b28:	0f000001 	.word	0x0f000001

08001b2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	; (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	; (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	; (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
         );
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cac:	d301      	bcc.n	8001cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <SysTick_Config+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cba:	210f      	movs	r1, #15
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f7ff ff8e 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <SysTick_Config+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SysTick_Config+0x40>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff29 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d08:	f7ff ff3e 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7ff ff8e 	bl	8001c34 <NVIC_EncodePriority>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff5d 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff31 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffa2 	bl	8001c9c <SysTick_Config>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e159      	b.n	8002034 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d80:	2201      	movs	r2, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 8148 	bne.w	800202e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d005      	beq.n	8001db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d130      	bne.n	8001e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 0201 	and.w	r2, r3, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d017      	beq.n	8001e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d123      	bne.n	8001ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	08da      	lsrs	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3208      	adds	r2, #8
 8001e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	220f      	movs	r2, #15
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	08da      	lsrs	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a2 	beq.w	800202e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b57      	ldr	r3, [pc, #348]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b54      	ldr	r3, [pc, #336]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f06:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_GPIO_Init+0x2ec>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a49      	ldr	r2, [pc, #292]	; (8002054 <HAL_GPIO_Init+0x2f0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x202>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a48      	ldr	r2, [pc, #288]	; (8002058 <HAL_GPIO_Init+0x2f4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x1fe>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a47      	ldr	r2, [pc, #284]	; (800205c <HAL_GPIO_Init+0x2f8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x1fa>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a46      	ldr	r2, [pc, #280]	; (8002060 <HAL_GPIO_Init+0x2fc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x1f6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a45      	ldr	r2, [pc, #276]	; (8002064 <HAL_GPIO_Init+0x300>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x1f2>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f56:	2307      	movs	r3, #7
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f66:	2300      	movs	r3, #0
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	f002 0203 	and.w	r2, r2, #3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f78:	4935      	ldr	r1, [pc, #212]	; (8002050 <HAL_GPIO_Init+0x2ec>)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f86:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001faa:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd4:	4a24      	ldr	r2, [pc, #144]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ffe:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002028:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_GPIO_Init+0x304>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	f67f aea2 	bls.w	8001d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40013800 	.word	0x40013800
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400
 800205c:	40020800 	.word	0x40020800
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021000 	.word	0x40021000
 8002068:	40013c00 	.word	0x40013c00

0800206c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e001      	b.n	800208e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e12b      	b.n	8002306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe ff32 	bl	8000f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2224      	movs	r2, #36	; 0x24
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002100:	f001 f848 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8002104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4a81      	ldr	r2, [pc, #516]	; (8002310 <HAL_I2C_Init+0x274>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d807      	bhi.n	8002120 <HAL_I2C_Init+0x84>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a80      	ldr	r2, [pc, #512]	; (8002314 <HAL_I2C_Init+0x278>)
 8002114:	4293      	cmp	r3, r2
 8002116:	bf94      	ite	ls
 8002118:	2301      	movls	r3, #1
 800211a:	2300      	movhi	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e006      	b.n	800212e <HAL_I2C_Init+0x92>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a7d      	ldr	r2, [pc, #500]	; (8002318 <HAL_I2C_Init+0x27c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	bf94      	ite	ls
 8002128:	2301      	movls	r3, #1
 800212a:	2300      	movhi	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e0e7      	b.n	8002306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4a78      	ldr	r2, [pc, #480]	; (800231c <HAL_I2C_Init+0x280>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0c9b      	lsrs	r3, r3, #18
 8002140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a6a      	ldr	r2, [pc, #424]	; (8002310 <HAL_I2C_Init+0x274>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d802      	bhi.n	8002170 <HAL_I2C_Init+0xd4>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3301      	adds	r3, #1
 800216e:	e009      	b.n	8002184 <HAL_I2C_Init+0xe8>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	4a69      	ldr	r2, [pc, #420]	; (8002320 <HAL_I2C_Init+0x284>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	3301      	adds	r3, #1
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	430b      	orrs	r3, r1
 800218a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002196:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	495c      	ldr	r1, [pc, #368]	; (8002310 <HAL_I2C_Init+0x274>)
 80021a0:	428b      	cmp	r3, r1
 80021a2:	d819      	bhi.n	80021d8 <HAL_I2C_Init+0x13c>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1e59      	subs	r1, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b2:	1c59      	adds	r1, r3, #1
 80021b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021b8:	400b      	ands	r3, r1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_I2C_Init+0x138>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1e59      	subs	r1, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d2:	e051      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 80021d4:	2304      	movs	r3, #4
 80021d6:	e04f      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d111      	bne.n	8002204 <HAL_I2C_Init+0x168>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1e58      	subs	r0, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	440b      	add	r3, r1
 80021ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e012      	b.n	800222a <HAL_I2C_Init+0x18e>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e58      	subs	r0, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	0099      	lsls	r1, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Init+0x196>
 800222e:	2301      	movs	r3, #1
 8002230:	e022      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10e      	bne.n	8002258 <HAL_I2C_Init+0x1bc>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1e58      	subs	r0, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	440b      	add	r3, r1
 8002248:	fbb0 f3f3 	udiv	r3, r0, r3
 800224c:	3301      	adds	r3, #1
 800224e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002256:	e00f      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1e58      	subs	r0, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	0099      	lsls	r1, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	fbb0 f3f3 	udiv	r3, r0, r3
 800226e:	3301      	adds	r3, #1
 8002270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	6809      	ldr	r1, [r1, #0]
 800227c:	4313      	orrs	r3, r2
 800227e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69da      	ldr	r2, [r3, #28]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6911      	ldr	r1, [r2, #16]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68d2      	ldr	r2, [r2, #12]
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	000186a0 	.word	0x000186a0
 8002314:	001e847f 	.word	0x001e847f
 8002318:	003d08ff 	.word	0x003d08ff
 800231c:	431bde83 	.word	0x431bde83
 8002320:	10624dd3 	.word	0x10624dd3

08002324 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	461a      	mov	r2, r3
 8002330:	460b      	mov	r3, r1
 8002332:	817b      	strh	r3, [r7, #10]
 8002334:	4613      	mov	r3, r2
 8002336:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002338:	f7fe ff5c 	bl	80011f4 <HAL_GetTick>
 800233c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b20      	cmp	r3, #32
 8002348:	f040 80e0 	bne.w	800250c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2319      	movs	r3, #25
 8002352:	2201      	movs	r2, #1
 8002354:	4970      	ldr	r1, [pc, #448]	; (8002518 <HAL_I2C_Master_Transmit+0x1f4>)
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f964 	bl	8002624 <I2C_WaitOnFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002362:	2302      	movs	r3, #2
 8002364:	e0d3      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_I2C_Master_Transmit+0x50>
 8002370:	2302      	movs	r3, #2
 8002372:	e0cc      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d007      	beq.n	800239a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2221      	movs	r2, #33	; 0x21
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2210      	movs	r2, #16
 80023b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	893a      	ldrh	r2, [r7, #8]
 80023ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a50      	ldr	r2, [pc, #320]	; (800251c <HAL_I2C_Master_Transmit+0x1f8>)
 80023da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	6a3a      	ldr	r2, [r7, #32]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f89c 	bl	8002520 <I2C_MasterRequestWrite>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e08d      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002408:	e066      	b.n	80024d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	6a39      	ldr	r1, [r7, #32]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f9de 	bl	80027d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2b04      	cmp	r3, #4
 8002420:	d107      	bne.n	8002432 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002430:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d11b      	bne.n	80024ac <HAL_I2C_Master_Transmit+0x188>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	2b00      	cmp	r3, #0
 800247a:	d017      	beq.n	80024ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	6a39      	ldr	r1, [r7, #32]
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f9ce 	bl	8002852 <I2C_WaitOnBTFFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d107      	bne.n	80024d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e01a      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d194      	bne.n	800240a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	00100002 	.word	0x00100002
 800251c:	ffff0000 	.word	0xffff0000

08002520 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	460b      	mov	r3, r1
 800252e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b08      	cmp	r3, #8
 800253a:	d006      	beq.n	800254a <I2C_MasterRequestWrite+0x2a>
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d003      	beq.n	800254a <I2C_MasterRequestWrite+0x2a>
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002548:	d108      	bne.n	800255c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e00b      	b.n	8002574 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	2b12      	cmp	r3, #18
 8002562:	d107      	bne.n	8002574 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002572:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f84f 	bl	8002624 <I2C_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00d      	beq.n	80025a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259a:	d103      	bne.n	80025a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e035      	b.n	8002614 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025b0:	d108      	bne.n	80025c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025b2:	897b      	ldrh	r3, [r7, #10]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025c0:	611a      	str	r2, [r3, #16]
 80025c2:	e01b      	b.n	80025fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025c4:	897b      	ldrh	r3, [r7, #10]
 80025c6:	11db      	asrs	r3, r3, #7
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f003 0306 	and.w	r3, r3, #6
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f063 030f 	orn	r3, r3, #15
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	490e      	ldr	r1, [pc, #56]	; (800261c <I2C_MasterRequestWrite+0xfc>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f875 	bl	80026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e010      	b.n	8002614 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025f2:	897b      	ldrh	r3, [r7, #10]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4907      	ldr	r1, [pc, #28]	; (8002620 <I2C_MasterRequestWrite+0x100>)
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f865 	bl	80026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	00010008 	.word	0x00010008
 8002620:	00010002 	.word	0x00010002

08002624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	4613      	mov	r3, r2
 8002632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002634:	e025      	b.n	8002682 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d021      	beq.n	8002682 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263e:	f7fe fdd9 	bl	80011f4 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d302      	bcc.n	8002654 <I2C_WaitOnFlagUntilTimeout+0x30>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d116      	bne.n	8002682 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f043 0220 	orr.w	r2, r3, #32
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e023      	b.n	80026ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d10d      	bne.n	80026a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4013      	ands	r3, r2
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	e00c      	b.n	80026c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4013      	ands	r3, r2
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf0c      	ite	eq
 80026ba:	2301      	moveq	r3, #1
 80026bc:	2300      	movne	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d0b6      	beq.n	8002636 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026e0:	e051      	b.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f0:	d123      	bne.n	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002700:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800270a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f043 0204 	orr.w	r2, r3, #4
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e046      	b.n	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d021      	beq.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7fe fd57 	bl	80011f4 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d116      	bne.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f043 0220 	orr.w	r2, r3, #32
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e020      	b.n	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d10c      	bne.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4013      	ands	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e00b      	b.n	80027c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	43da      	mvns	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4013      	ands	r3, r2
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d18d      	bne.n	80026e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027dc:	e02d      	b.n	800283a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f878 	bl	80028d4 <I2C_IsAcknowledgeFailed>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e02d      	b.n	800284a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d021      	beq.n	800283a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f6:	f7fe fcfd 	bl	80011f4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e007      	b.n	800284a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d1ca      	bne.n	80027de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800285e:	e02d      	b.n	80028bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f837 	bl	80028d4 <I2C_IsAcknowledgeFailed>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e02d      	b.n	80028cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002876:	d021      	beq.n	80028bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002878:	f7fe fcbc 	bl	80011f4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	d302      	bcc.n	800288e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d116      	bne.n	80028bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e007      	b.n	80028cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d1ca      	bne.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ea:	d11b      	bne.n	8002924 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f043 0204 	orr.w	r2, r3, #4
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e267      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d075      	beq.n	8002a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002952:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b04      	cmp	r3, #4
 800295c:	d00c      	beq.n	8002978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295e:	4b85      	ldr	r3, [pc, #532]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002966:	2b08      	cmp	r3, #8
 8002968:	d112      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4b82      	ldr	r3, [pc, #520]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002976:	d10b      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	4b7e      	ldr	r3, [pc, #504]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d05b      	beq.n	8002a3c <HAL_RCC_OscConfig+0x108>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d157      	bne.n	8002a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e242      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002998:	d106      	bne.n	80029a8 <HAL_RCC_OscConfig+0x74>
 800299a:	4b76      	ldr	r3, [pc, #472]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a75      	ldr	r2, [pc, #468]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x98>
 80029b2:	4b70      	ldr	r3, [pc, #448]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6f      	ldr	r2, [pc, #444]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b6d      	ldr	r3, [pc, #436]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6c      	ldr	r2, [pc, #432]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029cc:	4b69      	ldr	r3, [pc, #420]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a68      	ldr	r2, [pc, #416]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a65      	ldr	r2, [pc, #404]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe fc02 	bl	80011f4 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe fbfe 	bl	80011f4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e207      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b5b      	ldr	r3, [pc, #364]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xc0>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fbee 	bl	80011f4 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fbea 	bl	80011f4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1f3      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0xe8>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d063      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x152>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1c7      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4937      	ldr	r1, [pc, #220]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	e03a      	b.n	8002b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa4:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HAL_RCC_OscConfig+0x244>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fba3 	bl	80011f4 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7fe fb9f 	bl	80011f4 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1a8      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4925      	ldr	r1, [pc, #148]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_OscConfig+0x244>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe fb82 	bl	80011f4 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fe fb7e 	bl	80011f4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e187      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d036      	beq.n	8002b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d016      	beq.n	8002b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_RCC_OscConfig+0x248>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fb62 	bl	80011f4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe fb5e 	bl	80011f4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e167      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x200>
 8002b52:	e01b      	b.n	8002b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_RCC_OscConfig+0x248>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe fb4b 	bl	80011f4 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	e00e      	b.n	8002b80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe fb47 	bl	80011f4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d907      	bls.n	8002b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e150      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	42470000 	.word	0x42470000
 8002b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ea      	bne.n	8002b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8097 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b81      	ldr	r3, [pc, #516]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b7d      	ldr	r3, [pc, #500]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a7c      	ldr	r2, [pc, #496]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b7a      	ldr	r3, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b77      	ldr	r3, [pc, #476]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d118      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd6:	4b74      	ldr	r3, [pc, #464]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a73      	ldr	r2, [pc, #460]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7fe fb07 	bl	80011f4 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bea:	f7fe fb03 	bl	80011f4 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e10c      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2ea>
 8002c10:	4b64      	ldr	r3, [pc, #400]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a63      	ldr	r2, [pc, #396]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1c:	e01c      	b.n	8002c58 <HAL_RCC_OscConfig+0x324>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x30c>
 8002c26:	4b5f      	ldr	r3, [pc, #380]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a5e      	ldr	r2, [pc, #376]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a5b      	ldr	r2, [pc, #364]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0x324>
 8002c40:	4b58      	ldr	r3, [pc, #352]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a57      	ldr	r2, [pc, #348]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	4b55      	ldr	r3, [pc, #340]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	4a54      	ldr	r2, [pc, #336]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c52:	f023 0304 	bic.w	r3, r3, #4
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fac8 	bl	80011f4 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe fac4 	bl	80011f4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0cb      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ee      	beq.n	8002c68 <HAL_RCC_OscConfig+0x334>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fab2 	bl	80011f4 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe faae 	bl	80011f4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0b5      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002caa:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ee      	bne.n	8002c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80a1 	beq.w	8002e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd2:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d05c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d141      	bne.n	8002d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b31      	ldr	r3, [pc, #196]	; (8002dac <HAL_RCC_OscConfig+0x478>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe fa82 	bl	80011f4 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fa7e 	bl	80011f4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e087      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	019b      	lsls	r3, r3, #6
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	491b      	ldr	r1, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_RCC_OscConfig+0x478>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe fa57 	bl	80011f4 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe fa53 	bl	80011f4 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e05c      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x416>
 8002d68:	e054      	b.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_RCC_OscConfig+0x478>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe fa40 	bl	80011f4 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe fa3c 	bl	80011f4 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e045      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x444>
 8002d96:	e03d      	b.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e038      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40007000 	.word	0x40007000
 8002dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x4ec>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d028      	beq.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d121      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d11a      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d111      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800

08002e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0cc      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e38:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d90c      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b65      	ldr	r3, [pc, #404]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b63      	ldr	r3, [pc, #396]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0b8      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e78:	4b59      	ldr	r3, [pc, #356]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a58      	ldr	r2, [pc, #352]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e90:	4b53      	ldr	r3, [pc, #332]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a52      	ldr	r2, [pc, #328]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9c:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	494d      	ldr	r1, [pc, #308]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d044      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d119      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e07f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee2:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e06f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e067      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f02:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f023 0203 	bic.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4934      	ldr	r1, [pc, #208]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f14:	f7fe f96e 	bl	80011f4 <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1c:	f7fe f96a 	bl	80011f4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e04f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 020c 	and.w	r2, r3, #12
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1eb      	bne.n	8002f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d20c      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e032      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4916      	ldr	r1, [pc, #88]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	490e      	ldr	r1, [pc, #56]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002faa:	f000 f821 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	490a      	ldr	r1, [pc, #40]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	5ccb      	ldrb	r3, [r1, r3]
 8002fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc2:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe f8ce 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023c00 	.word	0x40023c00
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	08003c64 	.word	0x08003c64
 8002fe8:	200000c0 	.word	0x200000c0
 8002fec:	200000c4 	.word	0x200000c4

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b090      	sub	sp, #64	; 0x40
 8002ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003000:	2300      	movs	r3, #0
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003008:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d00d      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x40>
 8003014:	2b08      	cmp	r3, #8
 8003016:	f200 80a1 	bhi.w	800315c <HAL_RCC_GetSysClockFreq+0x16c>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x34>
 800301e:	2b04      	cmp	r3, #4
 8003020:	d003      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0x3a>
 8003022:	e09b      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_GetSysClockFreq+0x184>)
 8003026:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003028:	e09b      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302a:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800302c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800302e:	e098      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003030:	4b4f      	ldr	r3, [pc, #316]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303a:	4b4d      	ldr	r3, [pc, #308]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d028      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	099b      	lsrs	r3, r3, #6
 800304c:	2200      	movs	r2, #0
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	627a      	str	r2, [r7, #36]	; 0x24
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003058:	2100      	movs	r1, #0
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800305c:	fb03 f201 	mul.w	r2, r3, r1
 8003060:	2300      	movs	r3, #0
 8003062:	fb00 f303 	mul.w	r3, r0, r3
 8003066:	4413      	add	r3, r2
 8003068:	4a43      	ldr	r2, [pc, #268]	; (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800306a:	fba0 1202 	umull	r1, r2, r0, r2
 800306e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003070:	460a      	mov	r2, r1
 8003072:	62ba      	str	r2, [r7, #40]	; 0x28
 8003074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003076:	4413      	add	r3, r2
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307c:	2200      	movs	r2, #0
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	61fa      	str	r2, [r7, #28]
 8003082:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003086:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800308a:	f7fd f8f9 	bl	8000280 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4613      	mov	r3, r2
 8003094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003096:	e053      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003098:	4b35      	ldr	r3, [pc, #212]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	2200      	movs	r2, #0
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	617a      	str	r2, [r7, #20]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030aa:	f04f 0b00 	mov.w	fp, #0
 80030ae:	4652      	mov	r2, sl
 80030b0:	465b      	mov	r3, fp
 80030b2:	f04f 0000 	mov.w	r0, #0
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	0159      	lsls	r1, r3, #5
 80030bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c0:	0150      	lsls	r0, r2, #5
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	ebb2 080a 	subs.w	r8, r2, sl
 80030ca:	eb63 090b 	sbc.w	r9, r3, fp
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030e2:	ebb2 0408 	subs.w	r4, r2, r8
 80030e6:	eb63 0509 	sbc.w	r5, r3, r9
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	00eb      	lsls	r3, r5, #3
 80030f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030f8:	00e2      	lsls	r2, r4, #3
 80030fa:	4614      	mov	r4, r2
 80030fc:	461d      	mov	r5, r3
 80030fe:	eb14 030a 	adds.w	r3, r4, sl
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	eb45 030b 	adc.w	r3, r5, fp
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003116:	4629      	mov	r1, r5
 8003118:	028b      	lsls	r3, r1, #10
 800311a:	4621      	mov	r1, r4
 800311c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003120:	4621      	mov	r1, r4
 8003122:	028a      	lsls	r2, r1, #10
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312a:	2200      	movs	r2, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	60fa      	str	r2, [r7, #12]
 8003130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003134:	f7fd f8a4 	bl	8000280 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4613      	mov	r3, r2
 800313e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	3301      	adds	r3, #1
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800315a:	e002      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetSysClockFreq+0x184>)
 800315e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003164:	4618      	mov	r0, r3
 8003166:	3740      	adds	r7, #64	; 0x40
 8003168:	46bd      	mov	sp, r7
 800316a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	00f42400 	.word	0x00f42400
 8003178:	017d7840 	.word	0x017d7840

0800317c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_RCC_GetHCLKFreq+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	200000c0 	.word	0x200000c0

08003194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003198:	f7ff fff0 	bl	800317c <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	0a9b      	lsrs	r3, r3, #10
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4903      	ldr	r1, [pc, #12]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40023800 	.word	0x40023800
 80031b8:	08003c74 	.word	0x08003c74

080031bc <__errno>:
 80031bc:	4b01      	ldr	r3, [pc, #4]	; (80031c4 <__errno+0x8>)
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	200000cc 	.word	0x200000cc

080031c8 <__libc_init_array>:
 80031c8:	b570      	push	{r4, r5, r6, lr}
 80031ca:	4d0d      	ldr	r5, [pc, #52]	; (8003200 <__libc_init_array+0x38>)
 80031cc:	4c0d      	ldr	r4, [pc, #52]	; (8003204 <__libc_init_array+0x3c>)
 80031ce:	1b64      	subs	r4, r4, r5
 80031d0:	10a4      	asrs	r4, r4, #2
 80031d2:	2600      	movs	r6, #0
 80031d4:	42a6      	cmp	r6, r4
 80031d6:	d109      	bne.n	80031ec <__libc_init_array+0x24>
 80031d8:	4d0b      	ldr	r5, [pc, #44]	; (8003208 <__libc_init_array+0x40>)
 80031da:	4c0c      	ldr	r4, [pc, #48]	; (800320c <__libc_init_array+0x44>)
 80031dc:	f000 fc8e 	bl	8003afc <_init>
 80031e0:	1b64      	subs	r4, r4, r5
 80031e2:	10a4      	asrs	r4, r4, #2
 80031e4:	2600      	movs	r6, #0
 80031e6:	42a6      	cmp	r6, r4
 80031e8:	d105      	bne.n	80031f6 <__libc_init_array+0x2e>
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f0:	4798      	blx	r3
 80031f2:	3601      	adds	r6, #1
 80031f4:	e7ee      	b.n	80031d4 <__libc_init_array+0xc>
 80031f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fa:	4798      	blx	r3
 80031fc:	3601      	adds	r6, #1
 80031fe:	e7f2      	b.n	80031e6 <__libc_init_array+0x1e>
 8003200:	08003cb8 	.word	0x08003cb8
 8003204:	08003cb8 	.word	0x08003cb8
 8003208:	08003cb8 	.word	0x08003cb8
 800320c:	08003cbc 	.word	0x08003cbc

08003210 <memset>:
 8003210:	4402      	add	r2, r0
 8003212:	4603      	mov	r3, r0
 8003214:	4293      	cmp	r3, r2
 8003216:	d100      	bne.n	800321a <memset+0xa>
 8003218:	4770      	bx	lr
 800321a:	f803 1b01 	strb.w	r1, [r3], #1
 800321e:	e7f9      	b.n	8003214 <memset+0x4>

08003220 <siprintf>:
 8003220:	b40e      	push	{r1, r2, r3}
 8003222:	b500      	push	{lr}
 8003224:	b09c      	sub	sp, #112	; 0x70
 8003226:	ab1d      	add	r3, sp, #116	; 0x74
 8003228:	9002      	str	r0, [sp, #8]
 800322a:	9006      	str	r0, [sp, #24]
 800322c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003230:	4809      	ldr	r0, [pc, #36]	; (8003258 <siprintf+0x38>)
 8003232:	9107      	str	r1, [sp, #28]
 8003234:	9104      	str	r1, [sp, #16]
 8003236:	4909      	ldr	r1, [pc, #36]	; (800325c <siprintf+0x3c>)
 8003238:	f853 2b04 	ldr.w	r2, [r3], #4
 800323c:	9105      	str	r1, [sp, #20]
 800323e:	6800      	ldr	r0, [r0, #0]
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	a902      	add	r1, sp, #8
 8003244:	f000 f868 	bl	8003318 <_svfiprintf_r>
 8003248:	9b02      	ldr	r3, [sp, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	b01c      	add	sp, #112	; 0x70
 8003250:	f85d eb04 	ldr.w	lr, [sp], #4
 8003254:	b003      	add	sp, #12
 8003256:	4770      	bx	lr
 8003258:	200000cc 	.word	0x200000cc
 800325c:	ffff0208 	.word	0xffff0208

08003260 <__ssputs_r>:
 8003260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003264:	688e      	ldr	r6, [r1, #8]
 8003266:	429e      	cmp	r6, r3
 8003268:	4682      	mov	sl, r0
 800326a:	460c      	mov	r4, r1
 800326c:	4690      	mov	r8, r2
 800326e:	461f      	mov	r7, r3
 8003270:	d838      	bhi.n	80032e4 <__ssputs_r+0x84>
 8003272:	898a      	ldrh	r2, [r1, #12]
 8003274:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003278:	d032      	beq.n	80032e0 <__ssputs_r+0x80>
 800327a:	6825      	ldr	r5, [r4, #0]
 800327c:	6909      	ldr	r1, [r1, #16]
 800327e:	eba5 0901 	sub.w	r9, r5, r1
 8003282:	6965      	ldr	r5, [r4, #20]
 8003284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003288:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800328c:	3301      	adds	r3, #1
 800328e:	444b      	add	r3, r9
 8003290:	106d      	asrs	r5, r5, #1
 8003292:	429d      	cmp	r5, r3
 8003294:	bf38      	it	cc
 8003296:	461d      	movcc	r5, r3
 8003298:	0553      	lsls	r3, r2, #21
 800329a:	d531      	bpl.n	8003300 <__ssputs_r+0xa0>
 800329c:	4629      	mov	r1, r5
 800329e:	f000 fb63 	bl	8003968 <_malloc_r>
 80032a2:	4606      	mov	r6, r0
 80032a4:	b950      	cbnz	r0, 80032bc <__ssputs_r+0x5c>
 80032a6:	230c      	movs	r3, #12
 80032a8:	f8ca 3000 	str.w	r3, [sl]
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b2:	81a3      	strh	r3, [r4, #12]
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295
 80032b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032bc:	6921      	ldr	r1, [r4, #16]
 80032be:	464a      	mov	r2, r9
 80032c0:	f000 fabe 	bl	8003840 <memcpy>
 80032c4:	89a3      	ldrh	r3, [r4, #12]
 80032c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ce:	81a3      	strh	r3, [r4, #12]
 80032d0:	6126      	str	r6, [r4, #16]
 80032d2:	6165      	str	r5, [r4, #20]
 80032d4:	444e      	add	r6, r9
 80032d6:	eba5 0509 	sub.w	r5, r5, r9
 80032da:	6026      	str	r6, [r4, #0]
 80032dc:	60a5      	str	r5, [r4, #8]
 80032de:	463e      	mov	r6, r7
 80032e0:	42be      	cmp	r6, r7
 80032e2:	d900      	bls.n	80032e6 <__ssputs_r+0x86>
 80032e4:	463e      	mov	r6, r7
 80032e6:	6820      	ldr	r0, [r4, #0]
 80032e8:	4632      	mov	r2, r6
 80032ea:	4641      	mov	r1, r8
 80032ec:	f000 fab6 	bl	800385c <memmove>
 80032f0:	68a3      	ldr	r3, [r4, #8]
 80032f2:	1b9b      	subs	r3, r3, r6
 80032f4:	60a3      	str	r3, [r4, #8]
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	4433      	add	r3, r6
 80032fa:	6023      	str	r3, [r4, #0]
 80032fc:	2000      	movs	r0, #0
 80032fe:	e7db      	b.n	80032b8 <__ssputs_r+0x58>
 8003300:	462a      	mov	r2, r5
 8003302:	f000 fba5 	bl	8003a50 <_realloc_r>
 8003306:	4606      	mov	r6, r0
 8003308:	2800      	cmp	r0, #0
 800330a:	d1e1      	bne.n	80032d0 <__ssputs_r+0x70>
 800330c:	6921      	ldr	r1, [r4, #16]
 800330e:	4650      	mov	r0, sl
 8003310:	f000 fabe 	bl	8003890 <_free_r>
 8003314:	e7c7      	b.n	80032a6 <__ssputs_r+0x46>
	...

08003318 <_svfiprintf_r>:
 8003318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331c:	4698      	mov	r8, r3
 800331e:	898b      	ldrh	r3, [r1, #12]
 8003320:	061b      	lsls	r3, r3, #24
 8003322:	b09d      	sub	sp, #116	; 0x74
 8003324:	4607      	mov	r7, r0
 8003326:	460d      	mov	r5, r1
 8003328:	4614      	mov	r4, r2
 800332a:	d50e      	bpl.n	800334a <_svfiprintf_r+0x32>
 800332c:	690b      	ldr	r3, [r1, #16]
 800332e:	b963      	cbnz	r3, 800334a <_svfiprintf_r+0x32>
 8003330:	2140      	movs	r1, #64	; 0x40
 8003332:	f000 fb19 	bl	8003968 <_malloc_r>
 8003336:	6028      	str	r0, [r5, #0]
 8003338:	6128      	str	r0, [r5, #16]
 800333a:	b920      	cbnz	r0, 8003346 <_svfiprintf_r+0x2e>
 800333c:	230c      	movs	r3, #12
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	e0d1      	b.n	80034ea <_svfiprintf_r+0x1d2>
 8003346:	2340      	movs	r3, #64	; 0x40
 8003348:	616b      	str	r3, [r5, #20]
 800334a:	2300      	movs	r3, #0
 800334c:	9309      	str	r3, [sp, #36]	; 0x24
 800334e:	2320      	movs	r3, #32
 8003350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003354:	f8cd 800c 	str.w	r8, [sp, #12]
 8003358:	2330      	movs	r3, #48	; 0x30
 800335a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003504 <_svfiprintf_r+0x1ec>
 800335e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003362:	f04f 0901 	mov.w	r9, #1
 8003366:	4623      	mov	r3, r4
 8003368:	469a      	mov	sl, r3
 800336a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800336e:	b10a      	cbz	r2, 8003374 <_svfiprintf_r+0x5c>
 8003370:	2a25      	cmp	r2, #37	; 0x25
 8003372:	d1f9      	bne.n	8003368 <_svfiprintf_r+0x50>
 8003374:	ebba 0b04 	subs.w	fp, sl, r4
 8003378:	d00b      	beq.n	8003392 <_svfiprintf_r+0x7a>
 800337a:	465b      	mov	r3, fp
 800337c:	4622      	mov	r2, r4
 800337e:	4629      	mov	r1, r5
 8003380:	4638      	mov	r0, r7
 8003382:	f7ff ff6d 	bl	8003260 <__ssputs_r>
 8003386:	3001      	adds	r0, #1
 8003388:	f000 80aa 	beq.w	80034e0 <_svfiprintf_r+0x1c8>
 800338c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800338e:	445a      	add	r2, fp
 8003390:	9209      	str	r2, [sp, #36]	; 0x24
 8003392:	f89a 3000 	ldrb.w	r3, [sl]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80a2 	beq.w	80034e0 <_svfiprintf_r+0x1c8>
 800339c:	2300      	movs	r3, #0
 800339e:	f04f 32ff 	mov.w	r2, #4294967295
 80033a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033a6:	f10a 0a01 	add.w	sl, sl, #1
 80033aa:	9304      	str	r3, [sp, #16]
 80033ac:	9307      	str	r3, [sp, #28]
 80033ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033b2:	931a      	str	r3, [sp, #104]	; 0x68
 80033b4:	4654      	mov	r4, sl
 80033b6:	2205      	movs	r2, #5
 80033b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033bc:	4851      	ldr	r0, [pc, #324]	; (8003504 <_svfiprintf_r+0x1ec>)
 80033be:	f7fc ff0f 	bl	80001e0 <memchr>
 80033c2:	9a04      	ldr	r2, [sp, #16]
 80033c4:	b9d8      	cbnz	r0, 80033fe <_svfiprintf_r+0xe6>
 80033c6:	06d0      	lsls	r0, r2, #27
 80033c8:	bf44      	itt	mi
 80033ca:	2320      	movmi	r3, #32
 80033cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033d0:	0711      	lsls	r1, r2, #28
 80033d2:	bf44      	itt	mi
 80033d4:	232b      	movmi	r3, #43	; 0x2b
 80033d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033da:	f89a 3000 	ldrb.w	r3, [sl]
 80033de:	2b2a      	cmp	r3, #42	; 0x2a
 80033e0:	d015      	beq.n	800340e <_svfiprintf_r+0xf6>
 80033e2:	9a07      	ldr	r2, [sp, #28]
 80033e4:	4654      	mov	r4, sl
 80033e6:	2000      	movs	r0, #0
 80033e8:	f04f 0c0a 	mov.w	ip, #10
 80033ec:	4621      	mov	r1, r4
 80033ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033f2:	3b30      	subs	r3, #48	; 0x30
 80033f4:	2b09      	cmp	r3, #9
 80033f6:	d94e      	bls.n	8003496 <_svfiprintf_r+0x17e>
 80033f8:	b1b0      	cbz	r0, 8003428 <_svfiprintf_r+0x110>
 80033fa:	9207      	str	r2, [sp, #28]
 80033fc:	e014      	b.n	8003428 <_svfiprintf_r+0x110>
 80033fe:	eba0 0308 	sub.w	r3, r0, r8
 8003402:	fa09 f303 	lsl.w	r3, r9, r3
 8003406:	4313      	orrs	r3, r2
 8003408:	9304      	str	r3, [sp, #16]
 800340a:	46a2      	mov	sl, r4
 800340c:	e7d2      	b.n	80033b4 <_svfiprintf_r+0x9c>
 800340e:	9b03      	ldr	r3, [sp, #12]
 8003410:	1d19      	adds	r1, r3, #4
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	9103      	str	r1, [sp, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	bfbb      	ittet	lt
 800341a:	425b      	neglt	r3, r3
 800341c:	f042 0202 	orrlt.w	r2, r2, #2
 8003420:	9307      	strge	r3, [sp, #28]
 8003422:	9307      	strlt	r3, [sp, #28]
 8003424:	bfb8      	it	lt
 8003426:	9204      	strlt	r2, [sp, #16]
 8003428:	7823      	ldrb	r3, [r4, #0]
 800342a:	2b2e      	cmp	r3, #46	; 0x2e
 800342c:	d10c      	bne.n	8003448 <_svfiprintf_r+0x130>
 800342e:	7863      	ldrb	r3, [r4, #1]
 8003430:	2b2a      	cmp	r3, #42	; 0x2a
 8003432:	d135      	bne.n	80034a0 <_svfiprintf_r+0x188>
 8003434:	9b03      	ldr	r3, [sp, #12]
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	9203      	str	r2, [sp, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	bfb8      	it	lt
 8003440:	f04f 33ff 	movlt.w	r3, #4294967295
 8003444:	3402      	adds	r4, #2
 8003446:	9305      	str	r3, [sp, #20]
 8003448:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003514 <_svfiprintf_r+0x1fc>
 800344c:	7821      	ldrb	r1, [r4, #0]
 800344e:	2203      	movs	r2, #3
 8003450:	4650      	mov	r0, sl
 8003452:	f7fc fec5 	bl	80001e0 <memchr>
 8003456:	b140      	cbz	r0, 800346a <_svfiprintf_r+0x152>
 8003458:	2340      	movs	r3, #64	; 0x40
 800345a:	eba0 000a 	sub.w	r0, r0, sl
 800345e:	fa03 f000 	lsl.w	r0, r3, r0
 8003462:	9b04      	ldr	r3, [sp, #16]
 8003464:	4303      	orrs	r3, r0
 8003466:	3401      	adds	r4, #1
 8003468:	9304      	str	r3, [sp, #16]
 800346a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800346e:	4826      	ldr	r0, [pc, #152]	; (8003508 <_svfiprintf_r+0x1f0>)
 8003470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003474:	2206      	movs	r2, #6
 8003476:	f7fc feb3 	bl	80001e0 <memchr>
 800347a:	2800      	cmp	r0, #0
 800347c:	d038      	beq.n	80034f0 <_svfiprintf_r+0x1d8>
 800347e:	4b23      	ldr	r3, [pc, #140]	; (800350c <_svfiprintf_r+0x1f4>)
 8003480:	bb1b      	cbnz	r3, 80034ca <_svfiprintf_r+0x1b2>
 8003482:	9b03      	ldr	r3, [sp, #12]
 8003484:	3307      	adds	r3, #7
 8003486:	f023 0307 	bic.w	r3, r3, #7
 800348a:	3308      	adds	r3, #8
 800348c:	9303      	str	r3, [sp, #12]
 800348e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003490:	4433      	add	r3, r6
 8003492:	9309      	str	r3, [sp, #36]	; 0x24
 8003494:	e767      	b.n	8003366 <_svfiprintf_r+0x4e>
 8003496:	fb0c 3202 	mla	r2, ip, r2, r3
 800349a:	460c      	mov	r4, r1
 800349c:	2001      	movs	r0, #1
 800349e:	e7a5      	b.n	80033ec <_svfiprintf_r+0xd4>
 80034a0:	2300      	movs	r3, #0
 80034a2:	3401      	adds	r4, #1
 80034a4:	9305      	str	r3, [sp, #20]
 80034a6:	4619      	mov	r1, r3
 80034a8:	f04f 0c0a 	mov.w	ip, #10
 80034ac:	4620      	mov	r0, r4
 80034ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034b2:	3a30      	subs	r2, #48	; 0x30
 80034b4:	2a09      	cmp	r2, #9
 80034b6:	d903      	bls.n	80034c0 <_svfiprintf_r+0x1a8>
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0c5      	beq.n	8003448 <_svfiprintf_r+0x130>
 80034bc:	9105      	str	r1, [sp, #20]
 80034be:	e7c3      	b.n	8003448 <_svfiprintf_r+0x130>
 80034c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80034c4:	4604      	mov	r4, r0
 80034c6:	2301      	movs	r3, #1
 80034c8:	e7f0      	b.n	80034ac <_svfiprintf_r+0x194>
 80034ca:	ab03      	add	r3, sp, #12
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	462a      	mov	r2, r5
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <_svfiprintf_r+0x1f8>)
 80034d2:	a904      	add	r1, sp, #16
 80034d4:	4638      	mov	r0, r7
 80034d6:	f3af 8000 	nop.w
 80034da:	1c42      	adds	r2, r0, #1
 80034dc:	4606      	mov	r6, r0
 80034de:	d1d6      	bne.n	800348e <_svfiprintf_r+0x176>
 80034e0:	89ab      	ldrh	r3, [r5, #12]
 80034e2:	065b      	lsls	r3, r3, #25
 80034e4:	f53f af2c 	bmi.w	8003340 <_svfiprintf_r+0x28>
 80034e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034ea:	b01d      	add	sp, #116	; 0x74
 80034ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f0:	ab03      	add	r3, sp, #12
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	462a      	mov	r2, r5
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <_svfiprintf_r+0x1f8>)
 80034f8:	a904      	add	r1, sp, #16
 80034fa:	4638      	mov	r0, r7
 80034fc:	f000 f87a 	bl	80035f4 <_printf_i>
 8003500:	e7eb      	b.n	80034da <_svfiprintf_r+0x1c2>
 8003502:	bf00      	nop
 8003504:	08003c7c 	.word	0x08003c7c
 8003508:	08003c86 	.word	0x08003c86
 800350c:	00000000 	.word	0x00000000
 8003510:	08003261 	.word	0x08003261
 8003514:	08003c82 	.word	0x08003c82

08003518 <_printf_common>:
 8003518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800351c:	4616      	mov	r6, r2
 800351e:	4699      	mov	r9, r3
 8003520:	688a      	ldr	r2, [r1, #8]
 8003522:	690b      	ldr	r3, [r1, #16]
 8003524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003528:	4293      	cmp	r3, r2
 800352a:	bfb8      	it	lt
 800352c:	4613      	movlt	r3, r2
 800352e:	6033      	str	r3, [r6, #0]
 8003530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003534:	4607      	mov	r7, r0
 8003536:	460c      	mov	r4, r1
 8003538:	b10a      	cbz	r2, 800353e <_printf_common+0x26>
 800353a:	3301      	adds	r3, #1
 800353c:	6033      	str	r3, [r6, #0]
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	0699      	lsls	r1, r3, #26
 8003542:	bf42      	ittt	mi
 8003544:	6833      	ldrmi	r3, [r6, #0]
 8003546:	3302      	addmi	r3, #2
 8003548:	6033      	strmi	r3, [r6, #0]
 800354a:	6825      	ldr	r5, [r4, #0]
 800354c:	f015 0506 	ands.w	r5, r5, #6
 8003550:	d106      	bne.n	8003560 <_printf_common+0x48>
 8003552:	f104 0a19 	add.w	sl, r4, #25
 8003556:	68e3      	ldr	r3, [r4, #12]
 8003558:	6832      	ldr	r2, [r6, #0]
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	42ab      	cmp	r3, r5
 800355e:	dc26      	bgt.n	80035ae <_printf_common+0x96>
 8003560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003564:	1e13      	subs	r3, r2, #0
 8003566:	6822      	ldr	r2, [r4, #0]
 8003568:	bf18      	it	ne
 800356a:	2301      	movne	r3, #1
 800356c:	0692      	lsls	r2, r2, #26
 800356e:	d42b      	bmi.n	80035c8 <_printf_common+0xb0>
 8003570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003574:	4649      	mov	r1, r9
 8003576:	4638      	mov	r0, r7
 8003578:	47c0      	blx	r8
 800357a:	3001      	adds	r0, #1
 800357c:	d01e      	beq.n	80035bc <_printf_common+0xa4>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	68e5      	ldr	r5, [r4, #12]
 8003582:	6832      	ldr	r2, [r6, #0]
 8003584:	f003 0306 	and.w	r3, r3, #6
 8003588:	2b04      	cmp	r3, #4
 800358a:	bf08      	it	eq
 800358c:	1aad      	subeq	r5, r5, r2
 800358e:	68a3      	ldr	r3, [r4, #8]
 8003590:	6922      	ldr	r2, [r4, #16]
 8003592:	bf0c      	ite	eq
 8003594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003598:	2500      	movne	r5, #0
 800359a:	4293      	cmp	r3, r2
 800359c:	bfc4      	itt	gt
 800359e:	1a9b      	subgt	r3, r3, r2
 80035a0:	18ed      	addgt	r5, r5, r3
 80035a2:	2600      	movs	r6, #0
 80035a4:	341a      	adds	r4, #26
 80035a6:	42b5      	cmp	r5, r6
 80035a8:	d11a      	bne.n	80035e0 <_printf_common+0xc8>
 80035aa:	2000      	movs	r0, #0
 80035ac:	e008      	b.n	80035c0 <_printf_common+0xa8>
 80035ae:	2301      	movs	r3, #1
 80035b0:	4652      	mov	r2, sl
 80035b2:	4649      	mov	r1, r9
 80035b4:	4638      	mov	r0, r7
 80035b6:	47c0      	blx	r8
 80035b8:	3001      	adds	r0, #1
 80035ba:	d103      	bne.n	80035c4 <_printf_common+0xac>
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c4:	3501      	adds	r5, #1
 80035c6:	e7c6      	b.n	8003556 <_printf_common+0x3e>
 80035c8:	18e1      	adds	r1, r4, r3
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	2030      	movs	r0, #48	; 0x30
 80035ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035d2:	4422      	add	r2, r4
 80035d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035dc:	3302      	adds	r3, #2
 80035de:	e7c7      	b.n	8003570 <_printf_common+0x58>
 80035e0:	2301      	movs	r3, #1
 80035e2:	4622      	mov	r2, r4
 80035e4:	4649      	mov	r1, r9
 80035e6:	4638      	mov	r0, r7
 80035e8:	47c0      	blx	r8
 80035ea:	3001      	adds	r0, #1
 80035ec:	d0e6      	beq.n	80035bc <_printf_common+0xa4>
 80035ee:	3601      	adds	r6, #1
 80035f0:	e7d9      	b.n	80035a6 <_printf_common+0x8e>
	...

080035f4 <_printf_i>:
 80035f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035f8:	7e0f      	ldrb	r7, [r1, #24]
 80035fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035fc:	2f78      	cmp	r7, #120	; 0x78
 80035fe:	4691      	mov	r9, r2
 8003600:	4680      	mov	r8, r0
 8003602:	460c      	mov	r4, r1
 8003604:	469a      	mov	sl, r3
 8003606:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800360a:	d807      	bhi.n	800361c <_printf_i+0x28>
 800360c:	2f62      	cmp	r7, #98	; 0x62
 800360e:	d80a      	bhi.n	8003626 <_printf_i+0x32>
 8003610:	2f00      	cmp	r7, #0
 8003612:	f000 80d8 	beq.w	80037c6 <_printf_i+0x1d2>
 8003616:	2f58      	cmp	r7, #88	; 0x58
 8003618:	f000 80a3 	beq.w	8003762 <_printf_i+0x16e>
 800361c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003624:	e03a      	b.n	800369c <_printf_i+0xa8>
 8003626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800362a:	2b15      	cmp	r3, #21
 800362c:	d8f6      	bhi.n	800361c <_printf_i+0x28>
 800362e:	a101      	add	r1, pc, #4	; (adr r1, 8003634 <_printf_i+0x40>)
 8003630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003634:	0800368d 	.word	0x0800368d
 8003638:	080036a1 	.word	0x080036a1
 800363c:	0800361d 	.word	0x0800361d
 8003640:	0800361d 	.word	0x0800361d
 8003644:	0800361d 	.word	0x0800361d
 8003648:	0800361d 	.word	0x0800361d
 800364c:	080036a1 	.word	0x080036a1
 8003650:	0800361d 	.word	0x0800361d
 8003654:	0800361d 	.word	0x0800361d
 8003658:	0800361d 	.word	0x0800361d
 800365c:	0800361d 	.word	0x0800361d
 8003660:	080037ad 	.word	0x080037ad
 8003664:	080036d1 	.word	0x080036d1
 8003668:	0800378f 	.word	0x0800378f
 800366c:	0800361d 	.word	0x0800361d
 8003670:	0800361d 	.word	0x0800361d
 8003674:	080037cf 	.word	0x080037cf
 8003678:	0800361d 	.word	0x0800361d
 800367c:	080036d1 	.word	0x080036d1
 8003680:	0800361d 	.word	0x0800361d
 8003684:	0800361d 	.word	0x0800361d
 8003688:	08003797 	.word	0x08003797
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	1d1a      	adds	r2, r3, #4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	602a      	str	r2, [r5, #0]
 8003694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800369c:	2301      	movs	r3, #1
 800369e:	e0a3      	b.n	80037e8 <_printf_i+0x1f4>
 80036a0:	6820      	ldr	r0, [r4, #0]
 80036a2:	6829      	ldr	r1, [r5, #0]
 80036a4:	0606      	lsls	r6, r0, #24
 80036a6:	f101 0304 	add.w	r3, r1, #4
 80036aa:	d50a      	bpl.n	80036c2 <_printf_i+0xce>
 80036ac:	680e      	ldr	r6, [r1, #0]
 80036ae:	602b      	str	r3, [r5, #0]
 80036b0:	2e00      	cmp	r6, #0
 80036b2:	da03      	bge.n	80036bc <_printf_i+0xc8>
 80036b4:	232d      	movs	r3, #45	; 0x2d
 80036b6:	4276      	negs	r6, r6
 80036b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036bc:	485e      	ldr	r0, [pc, #376]	; (8003838 <_printf_i+0x244>)
 80036be:	230a      	movs	r3, #10
 80036c0:	e019      	b.n	80036f6 <_printf_i+0x102>
 80036c2:	680e      	ldr	r6, [r1, #0]
 80036c4:	602b      	str	r3, [r5, #0]
 80036c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036ca:	bf18      	it	ne
 80036cc:	b236      	sxthne	r6, r6
 80036ce:	e7ef      	b.n	80036b0 <_printf_i+0xbc>
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	6820      	ldr	r0, [r4, #0]
 80036d4:	1d19      	adds	r1, r3, #4
 80036d6:	6029      	str	r1, [r5, #0]
 80036d8:	0601      	lsls	r1, r0, #24
 80036da:	d501      	bpl.n	80036e0 <_printf_i+0xec>
 80036dc:	681e      	ldr	r6, [r3, #0]
 80036de:	e002      	b.n	80036e6 <_printf_i+0xf2>
 80036e0:	0646      	lsls	r6, r0, #25
 80036e2:	d5fb      	bpl.n	80036dc <_printf_i+0xe8>
 80036e4:	881e      	ldrh	r6, [r3, #0]
 80036e6:	4854      	ldr	r0, [pc, #336]	; (8003838 <_printf_i+0x244>)
 80036e8:	2f6f      	cmp	r7, #111	; 0x6f
 80036ea:	bf0c      	ite	eq
 80036ec:	2308      	moveq	r3, #8
 80036ee:	230a      	movne	r3, #10
 80036f0:	2100      	movs	r1, #0
 80036f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036f6:	6865      	ldr	r5, [r4, #4]
 80036f8:	60a5      	str	r5, [r4, #8]
 80036fa:	2d00      	cmp	r5, #0
 80036fc:	bfa2      	ittt	ge
 80036fe:	6821      	ldrge	r1, [r4, #0]
 8003700:	f021 0104 	bicge.w	r1, r1, #4
 8003704:	6021      	strge	r1, [r4, #0]
 8003706:	b90e      	cbnz	r6, 800370c <_printf_i+0x118>
 8003708:	2d00      	cmp	r5, #0
 800370a:	d04d      	beq.n	80037a8 <_printf_i+0x1b4>
 800370c:	4615      	mov	r5, r2
 800370e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003712:	fb03 6711 	mls	r7, r3, r1, r6
 8003716:	5dc7      	ldrb	r7, [r0, r7]
 8003718:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800371c:	4637      	mov	r7, r6
 800371e:	42bb      	cmp	r3, r7
 8003720:	460e      	mov	r6, r1
 8003722:	d9f4      	bls.n	800370e <_printf_i+0x11a>
 8003724:	2b08      	cmp	r3, #8
 8003726:	d10b      	bne.n	8003740 <_printf_i+0x14c>
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	07de      	lsls	r6, r3, #31
 800372c:	d508      	bpl.n	8003740 <_printf_i+0x14c>
 800372e:	6923      	ldr	r3, [r4, #16]
 8003730:	6861      	ldr	r1, [r4, #4]
 8003732:	4299      	cmp	r1, r3
 8003734:	bfde      	ittt	le
 8003736:	2330      	movle	r3, #48	; 0x30
 8003738:	f805 3c01 	strble.w	r3, [r5, #-1]
 800373c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003740:	1b52      	subs	r2, r2, r5
 8003742:	6122      	str	r2, [r4, #16]
 8003744:	f8cd a000 	str.w	sl, [sp]
 8003748:	464b      	mov	r3, r9
 800374a:	aa03      	add	r2, sp, #12
 800374c:	4621      	mov	r1, r4
 800374e:	4640      	mov	r0, r8
 8003750:	f7ff fee2 	bl	8003518 <_printf_common>
 8003754:	3001      	adds	r0, #1
 8003756:	d14c      	bne.n	80037f2 <_printf_i+0x1fe>
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	b004      	add	sp, #16
 800375e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003762:	4835      	ldr	r0, [pc, #212]	; (8003838 <_printf_i+0x244>)
 8003764:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003768:	6829      	ldr	r1, [r5, #0]
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003770:	6029      	str	r1, [r5, #0]
 8003772:	061d      	lsls	r5, r3, #24
 8003774:	d514      	bpl.n	80037a0 <_printf_i+0x1ac>
 8003776:	07df      	lsls	r7, r3, #31
 8003778:	bf44      	itt	mi
 800377a:	f043 0320 	orrmi.w	r3, r3, #32
 800377e:	6023      	strmi	r3, [r4, #0]
 8003780:	b91e      	cbnz	r6, 800378a <_printf_i+0x196>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	f023 0320 	bic.w	r3, r3, #32
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	2310      	movs	r3, #16
 800378c:	e7b0      	b.n	80036f0 <_printf_i+0xfc>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	f043 0320 	orr.w	r3, r3, #32
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	2378      	movs	r3, #120	; 0x78
 8003798:	4828      	ldr	r0, [pc, #160]	; (800383c <_printf_i+0x248>)
 800379a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800379e:	e7e3      	b.n	8003768 <_printf_i+0x174>
 80037a0:	0659      	lsls	r1, r3, #25
 80037a2:	bf48      	it	mi
 80037a4:	b2b6      	uxthmi	r6, r6
 80037a6:	e7e6      	b.n	8003776 <_printf_i+0x182>
 80037a8:	4615      	mov	r5, r2
 80037aa:	e7bb      	b.n	8003724 <_printf_i+0x130>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	6826      	ldr	r6, [r4, #0]
 80037b0:	6961      	ldr	r1, [r4, #20]
 80037b2:	1d18      	adds	r0, r3, #4
 80037b4:	6028      	str	r0, [r5, #0]
 80037b6:	0635      	lsls	r5, r6, #24
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	d501      	bpl.n	80037c0 <_printf_i+0x1cc>
 80037bc:	6019      	str	r1, [r3, #0]
 80037be:	e002      	b.n	80037c6 <_printf_i+0x1d2>
 80037c0:	0670      	lsls	r0, r6, #25
 80037c2:	d5fb      	bpl.n	80037bc <_printf_i+0x1c8>
 80037c4:	8019      	strh	r1, [r3, #0]
 80037c6:	2300      	movs	r3, #0
 80037c8:	6123      	str	r3, [r4, #16]
 80037ca:	4615      	mov	r5, r2
 80037cc:	e7ba      	b.n	8003744 <_printf_i+0x150>
 80037ce:	682b      	ldr	r3, [r5, #0]
 80037d0:	1d1a      	adds	r2, r3, #4
 80037d2:	602a      	str	r2, [r5, #0]
 80037d4:	681d      	ldr	r5, [r3, #0]
 80037d6:	6862      	ldr	r2, [r4, #4]
 80037d8:	2100      	movs	r1, #0
 80037da:	4628      	mov	r0, r5
 80037dc:	f7fc fd00 	bl	80001e0 <memchr>
 80037e0:	b108      	cbz	r0, 80037e6 <_printf_i+0x1f2>
 80037e2:	1b40      	subs	r0, r0, r5
 80037e4:	6060      	str	r0, [r4, #4]
 80037e6:	6863      	ldr	r3, [r4, #4]
 80037e8:	6123      	str	r3, [r4, #16]
 80037ea:	2300      	movs	r3, #0
 80037ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037f0:	e7a8      	b.n	8003744 <_printf_i+0x150>
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	462a      	mov	r2, r5
 80037f6:	4649      	mov	r1, r9
 80037f8:	4640      	mov	r0, r8
 80037fa:	47d0      	blx	sl
 80037fc:	3001      	adds	r0, #1
 80037fe:	d0ab      	beq.n	8003758 <_printf_i+0x164>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	079b      	lsls	r3, r3, #30
 8003804:	d413      	bmi.n	800382e <_printf_i+0x23a>
 8003806:	68e0      	ldr	r0, [r4, #12]
 8003808:	9b03      	ldr	r3, [sp, #12]
 800380a:	4298      	cmp	r0, r3
 800380c:	bfb8      	it	lt
 800380e:	4618      	movlt	r0, r3
 8003810:	e7a4      	b.n	800375c <_printf_i+0x168>
 8003812:	2301      	movs	r3, #1
 8003814:	4632      	mov	r2, r6
 8003816:	4649      	mov	r1, r9
 8003818:	4640      	mov	r0, r8
 800381a:	47d0      	blx	sl
 800381c:	3001      	adds	r0, #1
 800381e:	d09b      	beq.n	8003758 <_printf_i+0x164>
 8003820:	3501      	adds	r5, #1
 8003822:	68e3      	ldr	r3, [r4, #12]
 8003824:	9903      	ldr	r1, [sp, #12]
 8003826:	1a5b      	subs	r3, r3, r1
 8003828:	42ab      	cmp	r3, r5
 800382a:	dcf2      	bgt.n	8003812 <_printf_i+0x21e>
 800382c:	e7eb      	b.n	8003806 <_printf_i+0x212>
 800382e:	2500      	movs	r5, #0
 8003830:	f104 0619 	add.w	r6, r4, #25
 8003834:	e7f5      	b.n	8003822 <_printf_i+0x22e>
 8003836:	bf00      	nop
 8003838:	08003c8d 	.word	0x08003c8d
 800383c:	08003c9e 	.word	0x08003c9e

08003840 <memcpy>:
 8003840:	440a      	add	r2, r1
 8003842:	4291      	cmp	r1, r2
 8003844:	f100 33ff 	add.w	r3, r0, #4294967295
 8003848:	d100      	bne.n	800384c <memcpy+0xc>
 800384a:	4770      	bx	lr
 800384c:	b510      	push	{r4, lr}
 800384e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003856:	4291      	cmp	r1, r2
 8003858:	d1f9      	bne.n	800384e <memcpy+0xe>
 800385a:	bd10      	pop	{r4, pc}

0800385c <memmove>:
 800385c:	4288      	cmp	r0, r1
 800385e:	b510      	push	{r4, lr}
 8003860:	eb01 0402 	add.w	r4, r1, r2
 8003864:	d902      	bls.n	800386c <memmove+0x10>
 8003866:	4284      	cmp	r4, r0
 8003868:	4623      	mov	r3, r4
 800386a:	d807      	bhi.n	800387c <memmove+0x20>
 800386c:	1e43      	subs	r3, r0, #1
 800386e:	42a1      	cmp	r1, r4
 8003870:	d008      	beq.n	8003884 <memmove+0x28>
 8003872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800387a:	e7f8      	b.n	800386e <memmove+0x12>
 800387c:	4402      	add	r2, r0
 800387e:	4601      	mov	r1, r0
 8003880:	428a      	cmp	r2, r1
 8003882:	d100      	bne.n	8003886 <memmove+0x2a>
 8003884:	bd10      	pop	{r4, pc}
 8003886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800388a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800388e:	e7f7      	b.n	8003880 <memmove+0x24>

08003890 <_free_r>:
 8003890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003892:	2900      	cmp	r1, #0
 8003894:	d044      	beq.n	8003920 <_free_r+0x90>
 8003896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800389a:	9001      	str	r0, [sp, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f1a1 0404 	sub.w	r4, r1, #4
 80038a2:	bfb8      	it	lt
 80038a4:	18e4      	addlt	r4, r4, r3
 80038a6:	f000 f913 	bl	8003ad0 <__malloc_lock>
 80038aa:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <_free_r+0x94>)
 80038ac:	9801      	ldr	r0, [sp, #4]
 80038ae:	6813      	ldr	r3, [r2, #0]
 80038b0:	b933      	cbnz	r3, 80038c0 <_free_r+0x30>
 80038b2:	6063      	str	r3, [r4, #4]
 80038b4:	6014      	str	r4, [r2, #0]
 80038b6:	b003      	add	sp, #12
 80038b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038bc:	f000 b90e 	b.w	8003adc <__malloc_unlock>
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d908      	bls.n	80038d6 <_free_r+0x46>
 80038c4:	6825      	ldr	r5, [r4, #0]
 80038c6:	1961      	adds	r1, r4, r5
 80038c8:	428b      	cmp	r3, r1
 80038ca:	bf01      	itttt	eq
 80038cc:	6819      	ldreq	r1, [r3, #0]
 80038ce:	685b      	ldreq	r3, [r3, #4]
 80038d0:	1949      	addeq	r1, r1, r5
 80038d2:	6021      	streq	r1, [r4, #0]
 80038d4:	e7ed      	b.n	80038b2 <_free_r+0x22>
 80038d6:	461a      	mov	r2, r3
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	b10b      	cbz	r3, 80038e0 <_free_r+0x50>
 80038dc:	42a3      	cmp	r3, r4
 80038de:	d9fa      	bls.n	80038d6 <_free_r+0x46>
 80038e0:	6811      	ldr	r1, [r2, #0]
 80038e2:	1855      	adds	r5, r2, r1
 80038e4:	42a5      	cmp	r5, r4
 80038e6:	d10b      	bne.n	8003900 <_free_r+0x70>
 80038e8:	6824      	ldr	r4, [r4, #0]
 80038ea:	4421      	add	r1, r4
 80038ec:	1854      	adds	r4, r2, r1
 80038ee:	42a3      	cmp	r3, r4
 80038f0:	6011      	str	r1, [r2, #0]
 80038f2:	d1e0      	bne.n	80038b6 <_free_r+0x26>
 80038f4:	681c      	ldr	r4, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	6053      	str	r3, [r2, #4]
 80038fa:	4421      	add	r1, r4
 80038fc:	6011      	str	r1, [r2, #0]
 80038fe:	e7da      	b.n	80038b6 <_free_r+0x26>
 8003900:	d902      	bls.n	8003908 <_free_r+0x78>
 8003902:	230c      	movs	r3, #12
 8003904:	6003      	str	r3, [r0, #0]
 8003906:	e7d6      	b.n	80038b6 <_free_r+0x26>
 8003908:	6825      	ldr	r5, [r4, #0]
 800390a:	1961      	adds	r1, r4, r5
 800390c:	428b      	cmp	r3, r1
 800390e:	bf04      	itt	eq
 8003910:	6819      	ldreq	r1, [r3, #0]
 8003912:	685b      	ldreq	r3, [r3, #4]
 8003914:	6063      	str	r3, [r4, #4]
 8003916:	bf04      	itt	eq
 8003918:	1949      	addeq	r1, r1, r5
 800391a:	6021      	streq	r1, [r4, #0]
 800391c:	6054      	str	r4, [r2, #4]
 800391e:	e7ca      	b.n	80038b6 <_free_r+0x26>
 8003920:	b003      	add	sp, #12
 8003922:	bd30      	pop	{r4, r5, pc}
 8003924:	200002b0 	.word	0x200002b0

08003928 <sbrk_aligned>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	4e0e      	ldr	r6, [pc, #56]	; (8003964 <sbrk_aligned+0x3c>)
 800392c:	460c      	mov	r4, r1
 800392e:	6831      	ldr	r1, [r6, #0]
 8003930:	4605      	mov	r5, r0
 8003932:	b911      	cbnz	r1, 800393a <sbrk_aligned+0x12>
 8003934:	f000 f8bc 	bl	8003ab0 <_sbrk_r>
 8003938:	6030      	str	r0, [r6, #0]
 800393a:	4621      	mov	r1, r4
 800393c:	4628      	mov	r0, r5
 800393e:	f000 f8b7 	bl	8003ab0 <_sbrk_r>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	d00a      	beq.n	800395c <sbrk_aligned+0x34>
 8003946:	1cc4      	adds	r4, r0, #3
 8003948:	f024 0403 	bic.w	r4, r4, #3
 800394c:	42a0      	cmp	r0, r4
 800394e:	d007      	beq.n	8003960 <sbrk_aligned+0x38>
 8003950:	1a21      	subs	r1, r4, r0
 8003952:	4628      	mov	r0, r5
 8003954:	f000 f8ac 	bl	8003ab0 <_sbrk_r>
 8003958:	3001      	adds	r0, #1
 800395a:	d101      	bne.n	8003960 <sbrk_aligned+0x38>
 800395c:	f04f 34ff 	mov.w	r4, #4294967295
 8003960:	4620      	mov	r0, r4
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	200002b4 	.word	0x200002b4

08003968 <_malloc_r>:
 8003968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800396c:	1ccd      	adds	r5, r1, #3
 800396e:	f025 0503 	bic.w	r5, r5, #3
 8003972:	3508      	adds	r5, #8
 8003974:	2d0c      	cmp	r5, #12
 8003976:	bf38      	it	cc
 8003978:	250c      	movcc	r5, #12
 800397a:	2d00      	cmp	r5, #0
 800397c:	4607      	mov	r7, r0
 800397e:	db01      	blt.n	8003984 <_malloc_r+0x1c>
 8003980:	42a9      	cmp	r1, r5
 8003982:	d905      	bls.n	8003990 <_malloc_r+0x28>
 8003984:	230c      	movs	r3, #12
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	2600      	movs	r6, #0
 800398a:	4630      	mov	r0, r6
 800398c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003990:	4e2e      	ldr	r6, [pc, #184]	; (8003a4c <_malloc_r+0xe4>)
 8003992:	f000 f89d 	bl	8003ad0 <__malloc_lock>
 8003996:	6833      	ldr	r3, [r6, #0]
 8003998:	461c      	mov	r4, r3
 800399a:	bb34      	cbnz	r4, 80039ea <_malloc_r+0x82>
 800399c:	4629      	mov	r1, r5
 800399e:	4638      	mov	r0, r7
 80039a0:	f7ff ffc2 	bl	8003928 <sbrk_aligned>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	4604      	mov	r4, r0
 80039a8:	d14d      	bne.n	8003a46 <_malloc_r+0xde>
 80039aa:	6834      	ldr	r4, [r6, #0]
 80039ac:	4626      	mov	r6, r4
 80039ae:	2e00      	cmp	r6, #0
 80039b0:	d140      	bne.n	8003a34 <_malloc_r+0xcc>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	4631      	mov	r1, r6
 80039b6:	4638      	mov	r0, r7
 80039b8:	eb04 0803 	add.w	r8, r4, r3
 80039bc:	f000 f878 	bl	8003ab0 <_sbrk_r>
 80039c0:	4580      	cmp	r8, r0
 80039c2:	d13a      	bne.n	8003a3a <_malloc_r+0xd2>
 80039c4:	6821      	ldr	r1, [r4, #0]
 80039c6:	3503      	adds	r5, #3
 80039c8:	1a6d      	subs	r5, r5, r1
 80039ca:	f025 0503 	bic.w	r5, r5, #3
 80039ce:	3508      	adds	r5, #8
 80039d0:	2d0c      	cmp	r5, #12
 80039d2:	bf38      	it	cc
 80039d4:	250c      	movcc	r5, #12
 80039d6:	4629      	mov	r1, r5
 80039d8:	4638      	mov	r0, r7
 80039da:	f7ff ffa5 	bl	8003928 <sbrk_aligned>
 80039de:	3001      	adds	r0, #1
 80039e0:	d02b      	beq.n	8003a3a <_malloc_r+0xd2>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	442b      	add	r3, r5
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	e00e      	b.n	8003a08 <_malloc_r+0xa0>
 80039ea:	6822      	ldr	r2, [r4, #0]
 80039ec:	1b52      	subs	r2, r2, r5
 80039ee:	d41e      	bmi.n	8003a2e <_malloc_r+0xc6>
 80039f0:	2a0b      	cmp	r2, #11
 80039f2:	d916      	bls.n	8003a22 <_malloc_r+0xba>
 80039f4:	1961      	adds	r1, r4, r5
 80039f6:	42a3      	cmp	r3, r4
 80039f8:	6025      	str	r5, [r4, #0]
 80039fa:	bf18      	it	ne
 80039fc:	6059      	strne	r1, [r3, #4]
 80039fe:	6863      	ldr	r3, [r4, #4]
 8003a00:	bf08      	it	eq
 8003a02:	6031      	streq	r1, [r6, #0]
 8003a04:	5162      	str	r2, [r4, r5]
 8003a06:	604b      	str	r3, [r1, #4]
 8003a08:	4638      	mov	r0, r7
 8003a0a:	f104 060b 	add.w	r6, r4, #11
 8003a0e:	f000 f865 	bl	8003adc <__malloc_unlock>
 8003a12:	f026 0607 	bic.w	r6, r6, #7
 8003a16:	1d23      	adds	r3, r4, #4
 8003a18:	1af2      	subs	r2, r6, r3
 8003a1a:	d0b6      	beq.n	800398a <_malloc_r+0x22>
 8003a1c:	1b9b      	subs	r3, r3, r6
 8003a1e:	50a3      	str	r3, [r4, r2]
 8003a20:	e7b3      	b.n	800398a <_malloc_r+0x22>
 8003a22:	6862      	ldr	r2, [r4, #4]
 8003a24:	42a3      	cmp	r3, r4
 8003a26:	bf0c      	ite	eq
 8003a28:	6032      	streq	r2, [r6, #0]
 8003a2a:	605a      	strne	r2, [r3, #4]
 8003a2c:	e7ec      	b.n	8003a08 <_malloc_r+0xa0>
 8003a2e:	4623      	mov	r3, r4
 8003a30:	6864      	ldr	r4, [r4, #4]
 8003a32:	e7b2      	b.n	800399a <_malloc_r+0x32>
 8003a34:	4634      	mov	r4, r6
 8003a36:	6876      	ldr	r6, [r6, #4]
 8003a38:	e7b9      	b.n	80039ae <_malloc_r+0x46>
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	4638      	mov	r0, r7
 8003a40:	f000 f84c 	bl	8003adc <__malloc_unlock>
 8003a44:	e7a1      	b.n	800398a <_malloc_r+0x22>
 8003a46:	6025      	str	r5, [r4, #0]
 8003a48:	e7de      	b.n	8003a08 <_malloc_r+0xa0>
 8003a4a:	bf00      	nop
 8003a4c:	200002b0 	.word	0x200002b0

08003a50 <_realloc_r>:
 8003a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a54:	4680      	mov	r8, r0
 8003a56:	4614      	mov	r4, r2
 8003a58:	460e      	mov	r6, r1
 8003a5a:	b921      	cbnz	r1, 8003a66 <_realloc_r+0x16>
 8003a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a60:	4611      	mov	r1, r2
 8003a62:	f7ff bf81 	b.w	8003968 <_malloc_r>
 8003a66:	b92a      	cbnz	r2, 8003a74 <_realloc_r+0x24>
 8003a68:	f7ff ff12 	bl	8003890 <_free_r>
 8003a6c:	4625      	mov	r5, r4
 8003a6e:	4628      	mov	r0, r5
 8003a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a74:	f000 f838 	bl	8003ae8 <_malloc_usable_size_r>
 8003a78:	4284      	cmp	r4, r0
 8003a7a:	4607      	mov	r7, r0
 8003a7c:	d802      	bhi.n	8003a84 <_realloc_r+0x34>
 8003a7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a82:	d812      	bhi.n	8003aaa <_realloc_r+0x5a>
 8003a84:	4621      	mov	r1, r4
 8003a86:	4640      	mov	r0, r8
 8003a88:	f7ff ff6e 	bl	8003968 <_malloc_r>
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d0ed      	beq.n	8003a6e <_realloc_r+0x1e>
 8003a92:	42bc      	cmp	r4, r7
 8003a94:	4622      	mov	r2, r4
 8003a96:	4631      	mov	r1, r6
 8003a98:	bf28      	it	cs
 8003a9a:	463a      	movcs	r2, r7
 8003a9c:	f7ff fed0 	bl	8003840 <memcpy>
 8003aa0:	4631      	mov	r1, r6
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f7ff fef4 	bl	8003890 <_free_r>
 8003aa8:	e7e1      	b.n	8003a6e <_realloc_r+0x1e>
 8003aaa:	4635      	mov	r5, r6
 8003aac:	e7df      	b.n	8003a6e <_realloc_r+0x1e>
	...

08003ab0 <_sbrk_r>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4d06      	ldr	r5, [pc, #24]	; (8003acc <_sbrk_r+0x1c>)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	4608      	mov	r0, r1
 8003aba:	602b      	str	r3, [r5, #0]
 8003abc:	f7fd fac2 	bl	8001044 <_sbrk>
 8003ac0:	1c43      	adds	r3, r0, #1
 8003ac2:	d102      	bne.n	8003aca <_sbrk_r+0x1a>
 8003ac4:	682b      	ldr	r3, [r5, #0]
 8003ac6:	b103      	cbz	r3, 8003aca <_sbrk_r+0x1a>
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	bd38      	pop	{r3, r4, r5, pc}
 8003acc:	200002b8 	.word	0x200002b8

08003ad0 <__malloc_lock>:
 8003ad0:	4801      	ldr	r0, [pc, #4]	; (8003ad8 <__malloc_lock+0x8>)
 8003ad2:	f000 b811 	b.w	8003af8 <__retarget_lock_acquire_recursive>
 8003ad6:	bf00      	nop
 8003ad8:	200002bc 	.word	0x200002bc

08003adc <__malloc_unlock>:
 8003adc:	4801      	ldr	r0, [pc, #4]	; (8003ae4 <__malloc_unlock+0x8>)
 8003ade:	f000 b80c 	b.w	8003afa <__retarget_lock_release_recursive>
 8003ae2:	bf00      	nop
 8003ae4:	200002bc 	.word	0x200002bc

08003ae8 <_malloc_usable_size_r>:
 8003ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aec:	1f18      	subs	r0, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bfbc      	itt	lt
 8003af2:	580b      	ldrlt	r3, [r1, r0]
 8003af4:	18c0      	addlt	r0, r0, r3
 8003af6:	4770      	bx	lr

08003af8 <__retarget_lock_acquire_recursive>:
 8003af8:	4770      	bx	lr

08003afa <__retarget_lock_release_recursive>:
 8003afa:	4770      	bx	lr

08003afc <_init>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	bf00      	nop
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr

08003b08 <_fini>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr


LAZER_TRANSFER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800547c  0800547c  0001547c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080054fc  080054fc  000154fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08005500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000108  24000074  08005574  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400017c  08005574  0002017c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f606  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c40  00000000  00000000  0002f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a10  00000000  00000000  000312e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000968  00000000  00000000  00031cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035b86  00000000  00000000  00032660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000dbc6  00000000  00000000  000681e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001576cd  00000000  00000000  00075dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cd479  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002cb0  00000000  00000000  001cd4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005464 	.word	0x08005464

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08005464 	.word	0x08005464

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f000 fab8 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f82c 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 f8f4 	bl	800087c <MX_GPIO_Init>
  MX_UART4_Init();
 8000694:	f000 f8a6 	bl	80007e4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  Time = HAL_GetTick();
 8000698:	f000 fb36 	bl	8000d08 <HAL_GetTick>
 800069c:	4603      	mov	r3, r0
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <main+0x54>)
 80006a0:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick() - Time >= 1000) {
 80006a2:	f000 fb31 	bl	8000d08 <HAL_GetTick>
 80006a6:	4602      	mov	r2, r0
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <main+0x54>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006b2:	d3f6      	bcc.n	80006a2 <main+0x1e>
		  Time = HAL_GetTick();
 80006b4:	f000 fb28 	bl	8000d08 <HAL_GetTick>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <main+0x54>)
 80006bc:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart4, msg, sprintf(msg, "Hello"),  0xFFFF);
 80006be:	4907      	ldr	r1, [pc, #28]	; (80006dc <main+0x58>)
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <main+0x5c>)
 80006c2:	f004 fa61 	bl	8004b88 <siprintf>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ce:	4904      	ldr	r1, [pc, #16]	; (80006e0 <main+0x5c>)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <main+0x60>)
 80006d2:	f003 f971 	bl	80039b8 <HAL_UART_Transmit>
	  if (HAL_GetTick() - Time >= 1000) {
 80006d6:	e7e4      	b.n	80006a2 <main+0x1e>
 80006d8:	24000160 	.word	0x24000160
 80006dc:	0800547c 	.word	0x0800547c
 80006e0:	24000120 	.word	0x24000120
 80006e4:	24000090 	.word	0x24000090

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09c      	sub	sp, #112	; 0x70
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f2:	224c      	movs	r2, #76	; 0x4c
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fa3e 	bl	8004b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2220      	movs	r2, #32
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fa38 	bl	8004b78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000708:	2002      	movs	r0, #2
 800070a:	f000 fda9 	bl	8001260 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <SystemClock_Config+0xf4>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	4a31      	ldr	r2, [pc, #196]	; (80007dc <SystemClock_Config+0xf4>)
 8000718:	f023 0301 	bic.w	r3, r3, #1
 800071c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800071e:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <SystemClock_Config+0xf4>)
 8000720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <SystemClock_Config+0xf8>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000730:	4a2b      	ldr	r2, [pc, #172]	; (80007e0 <SystemClock_Config+0xf8>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <SystemClock_Config+0xf8>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000744:	bf00      	nop
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <SystemClock_Config+0xf8>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800074e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000752:	d1f8      	bne.n	8000746 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000758:	2301      	movs	r3, #1
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2340      	movs	r3, #64	; 0x40
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800076c:	230c      	movs	r3, #12
 800076e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800077c:	230c      	movs	r3, #12
 800077e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000780:	2300      	movs	r3, #0
 8000782:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fda0 	bl	80012d4 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800079a:	f000 f899 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	233f      	movs	r3, #63	; 0x3f
 80007a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2303      	movs	r3, #3
 80007a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007b2:	2340      	movs	r3, #64	; 0x40
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2102      	movs	r1, #2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 f9b4 	bl	8001b30 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80007ce:	f000 f87f 	bl	80008d0 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3770      	adds	r7, #112	; 0x70
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	58000400 	.word	0x58000400
 80007e0:	58024800 	.word	0x58024800

080007e4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_UART4_Init+0x90>)
 80007ea:	4a23      	ldr	r2, [pc, #140]	; (8000878 <MX_UART4_Init+0x94>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_UART4_Init+0x90>)
 80007f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_UART4_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_UART4_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_UART4_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_UART4_Init+0x90>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_UART4_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_UART4_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_UART4_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_UART4_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_UART4_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800082c:	4811      	ldr	r0, [pc, #68]	; (8000874 <MX_UART4_Init+0x90>)
 800082e:	f003 f873 	bl	8003918 <HAL_UART_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000838:	f000 f84a 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083c:	2100      	movs	r1, #0
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_UART4_Init+0x90>)
 8000840:	f004 f8a6 	bl	8004990 <HAL_UARTEx_SetTxFifoThreshold>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800084a:	f000 f841 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <MX_UART4_Init+0x90>)
 8000852:	f004 f8db 	bl	8004a0c <HAL_UARTEx_SetRxFifoThreshold>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800085c:	f000 f838 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_UART4_Init+0x90>)
 8000862:	f004 f85c 	bl	800491e <HAL_UARTEx_DisableFifoMode>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800086c:	f000 f830 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	24000090 	.word	0x24000090
 8000878:	40004c00 	.word	0x40004c00

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_GPIO_Init+0x50>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000888:	4a10      	ldr	r2, [pc, #64]	; (80008cc <MX_GPIO_Init+0x50>)
 800088a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_GPIO_Init+0x50>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_GPIO_Init+0x50>)
 80008a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a6:	4a09      	ldr	r2, [pc, #36]	; (80008cc <MX_GPIO_Init+0x50>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_GPIO_Init+0x50>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	58024400 	.word	0x58024400

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_MspInit+0x30>)
 80008e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008e8:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x30>)
 80008ea:	f043 0302 	orr.w	r3, r3, #2
 80008ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x30>)
 80008f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	58024400 	.word	0x58024400

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0b8      	sub	sp, #224	; 0xe0
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	22bc      	movs	r2, #188	; 0xbc
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f004 f921 	bl	8004b78 <memset>
  if(huart->Instance==UART4)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a24      	ldr	r2, [pc, #144]	; (80009cc <HAL_UART_MspInit+0xbc>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d141      	bne.n	80009c4 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000940:	2302      	movs	r3, #2
 8000942:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4618      	mov	r0, r3
 8000950:	f001 fc7a 	bl	8002248 <HAL_RCCEx_PeriphCLKConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800095a:	f7ff ffb9 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_UART_MspInit+0xc0>)
 8000960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000964:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <HAL_UART_MspInit+0xc0>)
 8000966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800096a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0xc0>)
 8000970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_UART_MspInit+0xc0>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000982:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <HAL_UART_MspInit+0xc0>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_UART_MspInit+0xc0>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800099a:	2303      	movs	r3, #3
 800099c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009b2:	2308      	movs	r3, #8
 80009b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_UART_MspInit+0xc4>)
 80009c0:	f000 fa9e 	bl	8000f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	37e0      	adds	r7, #224	; 0xe0
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40004c00 	.word	0x40004c00
 80009d0:	58024400 	.word	0x58024400
 80009d4:	58020000 	.word	0x58020000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f95c 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <_sbrk+0x5c>)
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <_sbrk+0x60>)
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <_sbrk+0x64>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <_sbrk+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d207      	bcs.n	8000a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a5c:	f004 f862 	bl	8004b24 <__errno>
 8000a60:	4603      	mov	r3, r0
 8000a62:	220c      	movs	r2, #12
 8000a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	e009      	b.n	8000a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <_sbrk+0x64>)
 8000a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24080000 	.word	0x24080000
 8000a8c:	00000400 	.word	0x00000400
 8000a90:	24000164 	.word	0x24000164
 8000a94:	24000180 	.word	0x24000180

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0xe4>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <SystemInit+0xe4>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aac:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <SystemInit+0xe8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 030f 	and.w	r3, r3, #15
 8000ab4:	2b06      	cmp	r3, #6
 8000ab6:	d807      	bhi.n	8000ac8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0xe8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f023 030f 	bic.w	r3, r3, #15
 8000ac0:	4a2f      	ldr	r2, [pc, #188]	; (8000b80 <SystemInit+0xe8>)
 8000ac2:	f043 0307 	orr.w	r3, r3, #7
 8000ac6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <SystemInit+0xec>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a2d      	ldr	r2, [pc, #180]	; (8000b84 <SystemInit+0xec>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <SystemInit+0xec>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ada:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <SystemInit+0xec>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4929      	ldr	r1, [pc, #164]	; (8000b84 <SystemInit+0xec>)
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <SystemInit+0xf0>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <SystemInit+0xe8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0xe8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f023 030f 	bic.w	r3, r3, #15
 8000afa:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <SystemInit+0xe8>)
 8000afc:	f043 0307 	orr.w	r3, r3, #7
 8000b00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <SystemInit+0xec>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <SystemInit+0xec>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <SystemInit+0xec>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <SystemInit+0xec>)
 8000b16:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <SystemInit+0xf4>)
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <SystemInit+0xec>)
 8000b1c:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0xf8>)
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <SystemInit+0xec>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <SystemInit+0xfc>)
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <SystemInit+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <SystemInit+0xec>)
 8000b2e:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <SystemInit+0xfc>)
 8000b30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <SystemInit+0xec>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <SystemInit+0xec>)
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <SystemInit+0xfc>)
 8000b3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <SystemInit+0xec>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <SystemInit+0xec>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <SystemInit+0xec>)
 8000b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <SystemInit+0xec>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <SystemInit+0x100>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <SystemInit+0x104>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b62:	d202      	bcs.n	8000b6a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <SystemInit+0x108>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <SystemInit+0x10c>)
 8000b6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b70:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00
 8000b80:	52002000 	.word	0x52002000
 8000b84:	58024400 	.word	0x58024400
 8000b88:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b8c:	02020200 	.word	0x02020200
 8000b90:	01ff0000 	.word	0x01ff0000
 8000b94:	01010280 	.word	0x01010280
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bac:	f7ff ff74 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f003 ffab 	bl	8004b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bda:	f7ff fd53 	bl	8000684 <main>
  bx  lr
 8000bde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000be4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000be8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000bec:	08005500 	.word	0x08005500
  ldr r2, =_sbss
 8000bf0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000bf4:	2400017c 	.word	0x2400017c

08000bf8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC3_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c02:	2003      	movs	r0, #3
 8000c04:	f000 f94a 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c08:	f001 f948 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_Init+0x68>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	0a1b      	lsrs	r3, r3, #8
 8000c14:	f003 030f 	and.w	r3, r3, #15
 8000c18:	4913      	ldr	r1, [pc, #76]	; (8000c68 <HAL_Init+0x6c>)
 8000c1a:	5ccb      	ldrb	r3, [r1, r3]
 8000c1c:	f003 031f 	and.w	r3, r3, #31
 8000c20:	fa22 f303 	lsr.w	r3, r2, r3
 8000c24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_Init+0x68>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_Init+0x6c>)
 8000c30:	5cd3      	ldrb	r3, [r2, r3]
 8000c32:	f003 031f 	and.w	r3, r3, #31
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_Init+0x70>)
 8000c3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <HAL_Init+0x74>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c46:	200f      	movs	r0, #15
 8000c48:	f000 f814 	bl	8000c74 <HAL_InitTick>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e002      	b.n	8000c5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c56:	f7ff fe41 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	58024400 	.word	0x58024400
 8000c68:	08005484 	.word	0x08005484
 8000c6c:	24000004 	.word	0x24000004
 8000c70:	24000000 	.word	0x24000000

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_InitTick+0x60>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e021      	b.n	8000ccc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <HAL_InitTick+0x64>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_InitTick+0x60>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f921 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f8f9 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_InitTick+0x68>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2400000c 	.word	0x2400000c
 8000cd8:	24000000 	.word	0x24000000
 8000cdc:	24000008 	.word	0x24000008

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	2400000c 	.word	0x2400000c
 8000d04:	24000168 	.word	0x24000168

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	24000168 	.word	0x24000168

08000d20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetREVID+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	0c1b      	lsrs	r3, r3, #16
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	5c001000 	.word	0x5c001000

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <__NVIC_SetPriorityGrouping+0x40>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x40>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	05fa0000 	.word	0x05fa0000

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff47 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff5e 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff90 	bl	8000df0 <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5f 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffb2 	bl	8000e58 <SysTick_Config>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f0e:	4b89      	ldr	r3, [pc, #548]	; (8001134 <HAL_GPIO_Init+0x234>)
 8000f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f12:	e194      	b.n	800123e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 8186 	beq.w	8001238 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d005      	beq.n	8000f44 <HAL_GPIO_Init+0x44>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d130      	bne.n	8000fa6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 0201 	and.w	r2, r3, #1
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d017      	beq.n	8000fe2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d123      	bne.n	8001036 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	69b9      	ldr	r1, [r7, #24]
 8001032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0203 	and.w	r2, r3, #3
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 80e0 	beq.w	8001238 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <HAL_GPIO_Init+0x238>)
 800107a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800107e:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <HAL_GPIO_Init+0x238>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001088:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <HAL_GPIO_Init+0x238>)
 800108a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001096:	4a29      	ldr	r2, [pc, #164]	; (800113c <HAL_GPIO_Init+0x23c>)
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a20      	ldr	r2, [pc, #128]	; (8001140 <HAL_GPIO_Init+0x240>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d052      	beq.n	8001168 <HAL_GPIO_Init+0x268>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <HAL_GPIO_Init+0x244>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d031      	beq.n	800112e <HAL_GPIO_Init+0x22e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <HAL_GPIO_Init+0x248>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x22a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a1d      	ldr	r2, [pc, #116]	; (800114c <HAL_GPIO_Init+0x24c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x226>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <HAL_GPIO_Init+0x250>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x222>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <HAL_GPIO_Init+0x254>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x21e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x258>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x21a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <HAL_GPIO_Init+0x25c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x216>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a18      	ldr	r2, [pc, #96]	; (8001160 <HAL_GPIO_Init+0x260>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x212>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_GPIO_Init+0x264>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x20e>
 800110a:	2309      	movs	r3, #9
 800110c:	e02d      	b.n	800116a <HAL_GPIO_Init+0x26a>
 800110e:	230a      	movs	r3, #10
 8001110:	e02b      	b.n	800116a <HAL_GPIO_Init+0x26a>
 8001112:	2308      	movs	r3, #8
 8001114:	e029      	b.n	800116a <HAL_GPIO_Init+0x26a>
 8001116:	2307      	movs	r3, #7
 8001118:	e027      	b.n	800116a <HAL_GPIO_Init+0x26a>
 800111a:	2306      	movs	r3, #6
 800111c:	e025      	b.n	800116a <HAL_GPIO_Init+0x26a>
 800111e:	2305      	movs	r3, #5
 8001120:	e023      	b.n	800116a <HAL_GPIO_Init+0x26a>
 8001122:	2304      	movs	r3, #4
 8001124:	e021      	b.n	800116a <HAL_GPIO_Init+0x26a>
 8001126:	2303      	movs	r3, #3
 8001128:	e01f      	b.n	800116a <HAL_GPIO_Init+0x26a>
 800112a:	2302      	movs	r3, #2
 800112c:	e01d      	b.n	800116a <HAL_GPIO_Init+0x26a>
 800112e:	2301      	movs	r3, #1
 8001130:	e01b      	b.n	800116a <HAL_GPIO_Init+0x26a>
 8001132:	bf00      	nop
 8001134:	58000080 	.word	0x58000080
 8001138:	58024400 	.word	0x58024400
 800113c:	58000400 	.word	0x58000400
 8001140:	58020000 	.word	0x58020000
 8001144:	58020400 	.word	0x58020400
 8001148:	58020800 	.word	0x58020800
 800114c:	58020c00 	.word	0x58020c00
 8001150:	58021000 	.word	0x58021000
 8001154:	58021400 	.word	0x58021400
 8001158:	58021800 	.word	0x58021800
 800115c:	58021c00 	.word	0x58021c00
 8001160:	58022000 	.word	0x58022000
 8001164:	58022400 	.word	0x58022400
 8001168:	2300      	movs	r3, #0
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	f002 0203 	and.w	r2, r2, #3
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	4093      	lsls	r3, r2
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800117a:	4938      	ldr	r1, [pc, #224]	; (800125c <HAL_GPIO_Init+0x35c>)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	3301      	adds	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa22 f303 	lsr.w	r3, r2, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	f47f ae63 	bne.w	8000f14 <HAL_GPIO_Init+0x14>
  }
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	3724      	adds	r7, #36	; 0x24
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	58000400 	.word	0x58000400

08001260 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_PWREx_ConfigSupply+0x70>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b04      	cmp	r3, #4
 8001272:	d00a      	beq.n	800128a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	d001      	beq.n	8001286 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e01f      	b.n	80012c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e01d      	b.n	80012c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_PWREx_ConfigSupply+0x70>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	f023 0207 	bic.w	r2, r3, #7
 8001292:	490f      	ldr	r1, [pc, #60]	; (80012d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4313      	orrs	r3, r2
 8001298:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800129a:	f7ff fd35 	bl	8000d08 <HAL_GetTick>
 800129e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012a0:	e009      	b.n	80012b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012a2:	f7ff fd31 	bl	8000d08 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012b0:	d901      	bls.n	80012b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e007      	b.n	80012c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_PWREx_ConfigSupply+0x70>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012c2:	d1ee      	bne.n	80012a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	58024800 	.word	0x58024800

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f000 bc1d 	b.w	8001b22 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 8087 	beq.w	8001404 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f6:	4b99      	ldr	r3, [pc, #612]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001300:	4b96      	ldr	r3, [pc, #600]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001308:	2b10      	cmp	r3, #16
 800130a:	d007      	beq.n	800131c <HAL_RCC_OscConfig+0x48>
 800130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130e:	2b18      	cmp	r3, #24
 8001310:	d110      	bne.n	8001334 <HAL_RCC_OscConfig+0x60>
 8001312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d10b      	bne.n	8001334 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	4b8f      	ldr	r3, [pc, #572]	; (800155c <HAL_RCC_OscConfig+0x288>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d06c      	beq.n	8001402 <HAL_RCC_OscConfig+0x12e>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d168      	bne.n	8001402 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e3f6      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133c:	d106      	bne.n	800134c <HAL_RCC_OscConfig+0x78>
 800133e:	4b87      	ldr	r3, [pc, #540]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a86      	ldr	r2, [pc, #536]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e02e      	b.n	80013aa <HAL_RCC_OscConfig+0xd6>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10c      	bne.n	800136e <HAL_RCC_OscConfig+0x9a>
 8001354:	4b81      	ldr	r3, [pc, #516]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a80      	ldr	r2, [pc, #512]	; (800155c <HAL_RCC_OscConfig+0x288>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b7e      	ldr	r3, [pc, #504]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a7d      	ldr	r2, [pc, #500]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	e01d      	b.n	80013aa <HAL_RCC_OscConfig+0xd6>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001376:	d10c      	bne.n	8001392 <HAL_RCC_OscConfig+0xbe>
 8001378:	4b78      	ldr	r3, [pc, #480]	; (800155c <HAL_RCC_OscConfig+0x288>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a77      	ldr	r2, [pc, #476]	; (800155c <HAL_RCC_OscConfig+0x288>)
 800137e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b75      	ldr	r3, [pc, #468]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a74      	ldr	r2, [pc, #464]	; (800155c <HAL_RCC_OscConfig+0x288>)
 800138a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	e00b      	b.n	80013aa <HAL_RCC_OscConfig+0xd6>
 8001392:	4b72      	ldr	r3, [pc, #456]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a71      	ldr	r2, [pc, #452]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b6f      	ldr	r3, [pc, #444]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a6e      	ldr	r2, [pc, #440]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80013a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d013      	beq.n	80013da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff fca9 	bl	8000d08 <HAL_GetTick>
 80013b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ba:	f7ff fca5 	bl	8000d08 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b64      	cmp	r3, #100	; 0x64
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e3aa      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013cc:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0xe6>
 80013d8:	e014      	b.n	8001404 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fc95 	bl	8000d08 <HAL_GetTick>
 80013de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e2:	f7ff fc91 	bl	8000d08 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b64      	cmp	r3, #100	; 0x64
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e396      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013f4:	4b59      	ldr	r3, [pc, #356]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0x10e>
 8001400:	e000      	b.n	8001404 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001402:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80cb 	beq.w	80015a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001412:	4b52      	ldr	r3, [pc, #328]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800141a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800141c:	4b4f      	ldr	r3, [pc, #316]	; (800155c <HAL_RCC_OscConfig+0x288>)
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d007      	beq.n	8001438 <HAL_RCC_OscConfig+0x164>
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	2b18      	cmp	r3, #24
 800142c:	d156      	bne.n	80014dc <HAL_RCC_OscConfig+0x208>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d151      	bne.n	80014dc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001438:	4b48      	ldr	r3, [pc, #288]	; (800155c <HAL_RCC_OscConfig+0x288>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_OscConfig+0x17c>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e368      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001450:	4b42      	ldr	r3, [pc, #264]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 0219 	bic.w	r2, r3, #25
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	493f      	ldr	r1, [pc, #252]	; (800155c <HAL_RCC_OscConfig+0x288>)
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001462:	f7ff fc51 	bl	8000d08 <HAL_GetTick>
 8001466:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fc4d 	bl	8000d08 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e352      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <HAL_RCC_OscConfig+0x288>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001488:	f7ff fc4a 	bl	8000d20 <HAL_GetREVID>
 800148c:	4603      	mov	r3, r0
 800148e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001492:	4293      	cmp	r3, r2
 8001494:	d817      	bhi.n	80014c6 <HAL_RCC_OscConfig+0x1f2>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b40      	cmp	r3, #64	; 0x40
 800149c:	d108      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1dc>
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80014a6:	4a2d      	ldr	r2, [pc, #180]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ae:	e07b      	b.n	80015a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	031b      	lsls	r3, r3, #12
 80014be:	4927      	ldr	r1, [pc, #156]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c4:	e070      	b.n	80015a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	061b      	lsls	r3, r3, #24
 80014d4:	4921      	ldr	r1, [pc, #132]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014da:	e065      	b.n	80015a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d048      	beq.n	8001576 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 0219 	bic.w	r2, r3, #25
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	491a      	ldr	r1, [pc, #104]	; (800155c <HAL_RCC_OscConfig+0x288>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff fc07 	bl	8000d08 <HAL_GetTick>
 80014fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc03 	bl	8000d08 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e308      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	f7ff fc00 	bl	8000d20 <HAL_GetREVID>
 8001520:	4603      	mov	r3, r0
 8001522:	f241 0203 	movw	r2, #4099	; 0x1003
 8001526:	4293      	cmp	r3, r2
 8001528:	d81a      	bhi.n	8001560 <HAL_RCC_OscConfig+0x28c>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b40      	cmp	r3, #64	; 0x40
 8001530:	d108      	bne.n	8001544 <HAL_RCC_OscConfig+0x270>
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_RCC_OscConfig+0x288>)
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	6053      	str	r3, [r2, #4]
 8001542:	e031      	b.n	80015a8 <HAL_RCC_OscConfig+0x2d4>
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	031b      	lsls	r3, r3, #12
 8001552:	4902      	ldr	r1, [pc, #8]	; (800155c <HAL_RCC_OscConfig+0x288>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
 8001558:	e026      	b.n	80015a8 <HAL_RCC_OscConfig+0x2d4>
 800155a:	bf00      	nop
 800155c:	58024400 	.word	0x58024400
 8001560:	4b9a      	ldr	r3, [pc, #616]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	4997      	ldr	r1, [pc, #604]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
 8001574:	e018      	b.n	80015a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001576:	4b95      	ldr	r3, [pc, #596]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a94      	ldr	r2, [pc, #592]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fbc1 	bl	8000d08 <HAL_GetTick>
 8001586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fbbd 	bl	8000d08 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e2c2      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800159c:	4b8b      	ldr	r3, [pc, #556]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80a9 	beq.w	8001708 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b6:	4b85      	ldr	r3, [pc, #532]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015c0:	4b82      	ldr	r3, [pc, #520]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d007      	beq.n	80015dc <HAL_RCC_OscConfig+0x308>
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2b18      	cmp	r3, #24
 80015d0:	d13a      	bne.n	8001648 <HAL_RCC_OscConfig+0x374>
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d135      	bne.n	8001648 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015dc:	4b7b      	ldr	r3, [pc, #492]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x320>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	2b80      	cmp	r3, #128	; 0x80
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e296      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015f4:	f7ff fb94 	bl	8000d20 <HAL_GetREVID>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80015fe:	4293      	cmp	r3, r2
 8001600:	d817      	bhi.n	8001632 <HAL_RCC_OscConfig+0x35e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	2b20      	cmp	r3, #32
 8001608:	d108      	bne.n	800161c <HAL_RCC_OscConfig+0x348>
 800160a:	4b70      	ldr	r3, [pc, #448]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001612:	4a6e      	ldr	r2, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001614:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001618:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800161a:	e075      	b.n	8001708 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800161c:	4b6b      	ldr	r3, [pc, #428]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	069b      	lsls	r3, r3, #26
 800162a:	4968      	ldr	r1, [pc, #416]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001630:	e06a      	b.n	8001708 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001632:	4b66      	ldr	r3, [pc, #408]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	061b      	lsls	r3, r3, #24
 8001640:	4962      	ldr	r1, [pc, #392]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001642:	4313      	orrs	r3, r2
 8001644:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001646:	e05f      	b.n	8001708 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d042      	beq.n	80016d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001650:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a5d      	ldr	r2, [pc, #372]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800165a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fb54 	bl	8000d08 <HAL_GetTick>
 8001660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001664:	f7ff fb50 	bl	8000d08 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e255      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001676:	4b55      	ldr	r3, [pc, #340]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001682:	f7ff fb4d 	bl	8000d20 <HAL_GetREVID>
 8001686:	4603      	mov	r3, r0
 8001688:	f241 0203 	movw	r2, #4099	; 0x1003
 800168c:	4293      	cmp	r3, r2
 800168e:	d817      	bhi.n	80016c0 <HAL_RCC_OscConfig+0x3ec>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2b20      	cmp	r3, #32
 8001696:	d108      	bne.n	80016aa <HAL_RCC_OscConfig+0x3d6>
 8001698:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016a0:	4a4a      	ldr	r2, [pc, #296]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80016a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016a6:	6053      	str	r3, [r2, #4]
 80016a8:	e02e      	b.n	8001708 <HAL_RCC_OscConfig+0x434>
 80016aa:	4b48      	ldr	r3, [pc, #288]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	069b      	lsls	r3, r3, #26
 80016b8:	4944      	ldr	r1, [pc, #272]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
 80016be:	e023      	b.n	8001708 <HAL_RCC_OscConfig+0x434>
 80016c0:	4b42      	ldr	r3, [pc, #264]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	493f      	ldr	r1, [pc, #252]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60cb      	str	r3, [r1, #12]
 80016d4:	e018      	b.n	8001708 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80016d6:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a3c      	ldr	r2, [pc, #240]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80016dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff fb11 	bl	8000d08 <HAL_GetTick>
 80016e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80016ea:	f7ff fb0d 	bl	8000d08 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e212      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d036      	beq.n	8001782 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d019      	beq.n	8001750 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 800171e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001720:	4a2a      	ldr	r2, [pc, #168]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff faee 	bl	8000d08 <HAL_GetTick>
 800172c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff faea 	bl	8000d08 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1ef      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x45c>
 800174e:	e018      	b.n	8001782 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001756:	f023 0301 	bic.w	r3, r3, #1
 800175a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fad4 	bl	8000d08 <HAL_GetTick>
 8001760:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fad0 	bl	8000d08 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e1d5      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	2b00      	cmp	r3, #0
 800178c:	d039      	beq.n	8001802 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d01c      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 800179c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fab1 	bl	8000d08 <HAL_GetTick>
 80017a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80017aa:	f7ff faad 	bl	8000d08 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1b2      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x4d6>
 80017c8:	e01b      	b.n	8001802 <HAL_RCC_OscConfig+0x52e>
 80017ca:	bf00      	nop
 80017cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017d0:	4b9b      	ldr	r3, [pc, #620]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a9a      	ldr	r2, [pc, #616]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80017d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fa94 	bl	8000d08 <HAL_GetTick>
 80017e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80017e4:	f7ff fa90 	bl	8000d08 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e195      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017f6:	4b92      	ldr	r3, [pc, #584]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8081 	beq.w	8001912 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001810:	4b8c      	ldr	r3, [pc, #560]	; (8001a44 <HAL_RCC_OscConfig+0x770>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a8b      	ldr	r2, [pc, #556]	; (8001a44 <HAL_RCC_OscConfig+0x770>)
 8001816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800181c:	f7ff fa74 	bl	8000d08 <HAL_GetTick>
 8001820:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001824:	f7ff fa70 	bl	8000d08 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e175      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001836:	4b83      	ldr	r3, [pc, #524]	; (8001a44 <HAL_RCC_OscConfig+0x770>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d106      	bne.n	8001858 <HAL_RCC_OscConfig+0x584>
 800184a:	4b7d      	ldr	r3, [pc, #500]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a7c      	ldr	r2, [pc, #496]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	e02d      	b.n	80018b4 <HAL_RCC_OscConfig+0x5e0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10c      	bne.n	800187a <HAL_RCC_OscConfig+0x5a6>
 8001860:	4b77      	ldr	r3, [pc, #476]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a76      	ldr	r2, [pc, #472]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	4b74      	ldr	r3, [pc, #464]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a73      	ldr	r2, [pc, #460]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001872:	f023 0304 	bic.w	r3, r3, #4
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	e01c      	b.n	80018b4 <HAL_RCC_OscConfig+0x5e0>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b05      	cmp	r3, #5
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x5c8>
 8001882:	4b6f      	ldr	r3, [pc, #444]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a6e      	ldr	r2, [pc, #440]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
 800188e:	4b6c      	ldr	r3, [pc, #432]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	4a6b      	ldr	r2, [pc, #428]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6713      	str	r3, [r2, #112]	; 0x70
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0x5e0>
 800189c:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a0:	4a67      	ldr	r2, [pc, #412]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	6713      	str	r3, [r2, #112]	; 0x70
 80018a8:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a64      	ldr	r2, [pc, #400]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80018ae:	f023 0304 	bic.w	r3, r3, #4
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d015      	beq.n	80018e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff fa24 	bl	8000d08 <HAL_GetTick>
 80018c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018c2:	e00a      	b.n	80018da <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff fa20 	bl	8000d08 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e123      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018da:	4b59      	ldr	r3, [pc, #356]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0ee      	beq.n	80018c4 <HAL_RCC_OscConfig+0x5f0>
 80018e6:	e014      	b.n	8001912 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff fa0e 	bl	8000d08 <HAL_GetTick>
 80018ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff fa0a 	bl	8000d08 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e10d      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001906:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ee      	bne.n	80018f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 8102 	beq.w	8001b20 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800191c:	4b48      	ldr	r3, [pc, #288]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001924:	2b18      	cmp	r3, #24
 8001926:	f000 80bd 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	2b02      	cmp	r3, #2
 8001930:	f040 809e 	bne.w	8001a70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a41      	ldr	r2, [pc, #260]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f9e2 	bl	8000d08 <HAL_GetTick>
 8001944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff f9de 	bl	8000d08 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0e3      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800195a:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001966:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_OscConfig+0x774>)
 800196c:	4013      	ands	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	430a      	orrs	r2, r1
 800197a:	4931      	ldr	r1, [pc, #196]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 800197c:	4313      	orrs	r3, r2
 800197e:	628b      	str	r3, [r1, #40]	; 0x28
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	3b01      	subs	r3, #1
 8001986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198e:	3b01      	subs	r3, #1
 8001990:	025b      	lsls	r3, r3, #9
 8001992:	b29b      	uxth	r3, r3
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199a:	3b01      	subs	r3, #1
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a8:	3b01      	subs	r3, #1
 80019aa:	061b      	lsls	r3, r3, #24
 80019ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80019b0:	4923      	ldr	r1, [pc, #140]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80019c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_RCC_OscConfig+0x778>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019ce:	00d2      	lsls	r2, r2, #3
 80019d0:	491b      	ldr	r1, [pc, #108]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f023 020c 	bic.w	r2, r3, #12
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4917      	ldr	r1, [pc, #92]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	f023 0202 	bic.w	r2, r3, #2
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	4912      	ldr	r1, [pc, #72]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_RCC_OscConfig+0x76c>)
 8001a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff f967 	bl	8000d08 <HAL_GetTick>
 8001a3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a3c:	e011      	b.n	8001a62 <HAL_RCC_OscConfig+0x78e>
 8001a3e:	bf00      	nop
 8001a40:	58024400 	.word	0x58024400
 8001a44:	58024800 	.word	0x58024800
 8001a48:	fffffc0c 	.word	0xfffffc0c
 8001a4c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff f95a 	bl	8000d08 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e05f      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_RCC_OscConfig+0x858>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x77c>
 8001a6e:	e057      	b.n	8001b20 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_RCC_OscConfig+0x858>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2d      	ldr	r2, [pc, #180]	; (8001b2c <HAL_RCC_OscConfig+0x858>)
 8001a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f944 	bl	8000d08 <HAL_GetTick>
 8001a80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f940 	bl	8000d08 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e045      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_RCC_OscConfig+0x858>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x7b0>
 8001aa2:	e03d      	b.n	8001b20 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_RCC_OscConfig+0x858>)
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_RCC_OscConfig+0x858>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d031      	beq.n	8001b1c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f003 0203 	and.w	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d12a      	bne.n	8001b1c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d122      	bne.n	8001b1c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d11a      	bne.n	8001b1c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	0a5b      	lsrs	r3, r3, #9
 8001aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d111      	bne.n	8001b1c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b04:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d108      	bne.n	8001b1c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	0e1b      	lsrs	r3, r3, #24
 8001b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b16:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3730      	adds	r7, #48	; 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	58024400 	.word	0x58024400

08001b30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e19c      	b.n	8001e7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b44:	4b8a      	ldr	r3, [pc, #552]	; (8001d70 <HAL_RCC_ClockConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d910      	bls.n	8001b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b87      	ldr	r3, [pc, #540]	; (8001d70 <HAL_RCC_ClockConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 020f 	bic.w	r2, r3, #15
 8001b5a:	4985      	ldr	r1, [pc, #532]	; (8001d70 <HAL_RCC_ClockConfig+0x240>)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b83      	ldr	r3, [pc, #524]	; (8001d70 <HAL_RCC_ClockConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e184      	b.n	8001e7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d010      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	4b7b      	ldr	r3, [pc, #492]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d908      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b90:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4975      	ldr	r1, [pc, #468]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d010      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	4b70      	ldr	r3, [pc, #448]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d908      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bbe:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	496a      	ldr	r1, [pc, #424]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d908      	bls.n	8001bfe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bec:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	495e      	ldr	r1, [pc, #376]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d010      	beq.n	8001c2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d908      	bls.n	8001c2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c1a:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4953      	ldr	r1, [pc, #332]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d010      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d908      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c48:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f023 020f 	bic.w	r2, r3, #15
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4947      	ldr	r1, [pc, #284]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d055      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c66:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4940      	ldr	r1, [pc, #256]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c80:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d121      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0f6      	b.n	8001e7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d115      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0ea      	b.n	8001e7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cb0:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0de      	b.n	8001e7e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0d6      	b.n	8001e7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f023 0207 	bic.w	r2, r3, #7
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4925      	ldr	r1, [pc, #148]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce2:	f7ff f811 	bl	8000d08 <HAL_GetTick>
 8001ce6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cea:	f7ff f80d 	bl	8000d08 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e0be      	b.n	8001e7e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d1eb      	bne.n	8001cea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d010      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d208      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f023 020f 	bic.w	r2, r3, #15
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <HAL_RCC_ClockConfig+0x244>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_ClockConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d214      	bcs.n	8001d78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_RCC_ClockConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 020f 	bic.w	r2, r3, #15
 8001d56:	4906      	ldr	r1, [pc, #24]	; (8001d70 <HAL_RCC_ClockConfig+0x240>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <HAL_RCC_ClockConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e086      	b.n	8001e7e <HAL_RCC_ClockConfig+0x34e>
 8001d70:	52002000 	.word	0x52002000
 8001d74:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d208      	bcs.n	8001da6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d94:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	4939      	ldr	r1, [pc, #228]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d010      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d208      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dc2:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	492e      	ldr	r1, [pc, #184]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d010      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699a      	ldr	r2, [r3, #24]
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d208      	bcs.n	8001e02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4922      	ldr	r1, [pc, #136]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69da      	ldr	r2, [r3, #28]
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d208      	bcs.n	8001e30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4917      	ldr	r1, [pc, #92]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e30:	f000 f834 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	4912      	ldr	r1, [pc, #72]	; (8001e8c <HAL_RCC_ClockConfig+0x35c>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_RCC_ClockConfig+0x358>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_RCC_ClockConfig+0x35c>)
 8001e58:	5cd3      	ldrb	r3, [r2, r3]
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x360>)
 8001e66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_RCC_ClockConfig+0x364>)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_RCC_ClockConfig+0x368>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fefe 	bl	8000c74 <HAL_InitTick>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	08005484 	.word	0x08005484
 8001e90:	24000004 	.word	0x24000004
 8001e94:	24000000 	.word	0x24000000
 8001e98:	24000008 	.word	0x24000008

08001e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ea2:	4bb3      	ldr	r3, [pc, #716]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eaa:	2b18      	cmp	r3, #24
 8001eac:	f200 8155 	bhi.w	800215a <HAL_RCC_GetSysClockFreq+0x2be>
 8001eb0:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb6:	bf00      	nop
 8001eb8:	08001f1d 	.word	0x08001f1d
 8001ebc:	0800215b 	.word	0x0800215b
 8001ec0:	0800215b 	.word	0x0800215b
 8001ec4:	0800215b 	.word	0x0800215b
 8001ec8:	0800215b 	.word	0x0800215b
 8001ecc:	0800215b 	.word	0x0800215b
 8001ed0:	0800215b 	.word	0x0800215b
 8001ed4:	0800215b 	.word	0x0800215b
 8001ed8:	08001f43 	.word	0x08001f43
 8001edc:	0800215b 	.word	0x0800215b
 8001ee0:	0800215b 	.word	0x0800215b
 8001ee4:	0800215b 	.word	0x0800215b
 8001ee8:	0800215b 	.word	0x0800215b
 8001eec:	0800215b 	.word	0x0800215b
 8001ef0:	0800215b 	.word	0x0800215b
 8001ef4:	0800215b 	.word	0x0800215b
 8001ef8:	08001f49 	.word	0x08001f49
 8001efc:	0800215b 	.word	0x0800215b
 8001f00:	0800215b 	.word	0x0800215b
 8001f04:	0800215b 	.word	0x0800215b
 8001f08:	0800215b 	.word	0x0800215b
 8001f0c:	0800215b 	.word	0x0800215b
 8001f10:	0800215b 	.word	0x0800215b
 8001f14:	0800215b 	.word	0x0800215b
 8001f18:	08001f4f 	.word	0x08001f4f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f1c:	4b94      	ldr	r3, [pc, #592]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f28:	4b91      	ldr	r3, [pc, #580]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	4a90      	ldr	r2, [pc, #576]	; (8002174 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001f3a:	e111      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f3c:	4b8d      	ldr	r3, [pc, #564]	; (8002174 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f3e:	61bb      	str	r3, [r7, #24]
    break;
 8001f40:	e10e      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f42:	4b8d      	ldr	r3, [pc, #564]	; (8002178 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f44:	61bb      	str	r3, [r7, #24]
    break;
 8001f46:	e10b      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001f48:	4b8c      	ldr	r3, [pc, #560]	; (800217c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f4a:	61bb      	str	r3, [r7, #24]
    break;
 8001f4c:	e108      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f4e:	4b88      	ldr	r3, [pc, #544]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001f58:	4b85      	ldr	r3, [pc, #532]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f64:	4b82      	ldr	r3, [pc, #520]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001f6e:	4b80      	ldr	r3, [pc, #512]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f72:	08db      	lsrs	r3, r3, #3
 8001f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f86:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80e1 	beq.w	8002154 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	f000 8083 	beq.w	80020a0 <HAL_RCC_GetSysClockFreq+0x204>
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	f200 80a1 	bhi.w	80020e4 <HAL_RCC_GetSysClockFreq+0x248>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x114>
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d056      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001fae:	e099      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fb0:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d02d      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fbc:	4b6c      	ldr	r3, [pc, #432]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	08db      	lsrs	r3, r3, #3
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	4a6b      	ldr	r2, [pc, #428]	; (8002174 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fe6:	4b62      	ldr	r3, [pc, #392]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ffa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002180 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800200a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800200e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002012:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002016:	e087      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002022:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002184 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800202a:	4b51      	ldr	r3, [pc, #324]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800203a:	ed97 6a02 	vldr	s12, [r7, #8]
 800203e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002180 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800204a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800204e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800205a:	e065      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002066:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002188 <HAL_RCC_GetSysClockFreq+0x2ec>
 800206a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800206e:	4b40      	ldr	r3, [pc, #256]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002076:	ee07 3a90 	vmov	s15, r3
 800207a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800207e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002082:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002180 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800208a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800208e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800209e:	e043      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800218c <HAL_RCC_GetSysClockFreq+0x2f0>
 80020ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020b2:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80020c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002180 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020e2:	e021      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002188 <HAL_RCC_GetSysClockFreq+0x2ec>
 80020f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002106:	ed97 6a02 	vldr	s12, [r7, #8]
 800210a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002180 <HAL_RCC_GetSysClockFreq+0x2e4>
 800210e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800211a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800211e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002126:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	0a5b      	lsrs	r3, r3, #9
 800212e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002132:	3301      	adds	r3, #1
 8002134:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002140:	edd7 6a07 	vldr	s13, [r7, #28]
 8002144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800214c:	ee17 3a90 	vmov	r3, s15
 8002150:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002152:	e005      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
    break;
 8002158:	e002      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800215c:	61bb      	str	r3, [r7, #24]
    break;
 800215e:	bf00      	nop
  }

  return sysclockfreq;
 8002160:	69bb      	ldr	r3, [r7, #24]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	58024400 	.word	0x58024400
 8002174:	03d09000 	.word	0x03d09000
 8002178:	003d0900 	.word	0x003d0900
 800217c:	017d7840 	.word	0x017d7840
 8002180:	46000000 	.word	0x46000000
 8002184:	4c742400 	.word	0x4c742400
 8002188:	4a742400 	.word	0x4a742400
 800218c:	4bbebc20 	.word	0x4bbebc20

08002190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002196:	f7ff fe81 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 800219a:	4602      	mov	r2, r0
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	490f      	ldr	r1, [pc, #60]	; (80021e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80021a8:	5ccb      	ldrb	r3, [r1, r3]
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ca:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80021cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	58024400 	.word	0x58024400
 80021e4:	08005484 	.word	0x08005484
 80021e8:	24000004 	.word	0x24000004
 80021ec:	24000000 	.word	0x24000000

080021f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80021f4:	f7ff ffcc 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4904      	ldr	r1, [pc, #16]	; (8002218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	58024400 	.word	0x58024400
 8002218:	08005484 	.word	0x08005484

0800221c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002220:	f7ff ffb6 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4904      	ldr	r1, [pc, #16]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	58024400 	.word	0x58024400
 8002244:	08005484 	.word	0x08005484

08002248 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002254:	2300      	movs	r3, #0
 8002256:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d03f      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002268:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800226c:	d02a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800226e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002272:	d824      	bhi.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002274:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002278:	d018      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800227a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800227e:	d81e      	bhi.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002288:	d007      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800228a:	e018      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800228c:	4ba3      	ldr	r3, [pc, #652]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	4aa2      	ldr	r2, [pc, #648]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002296:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002298:	e015      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	2102      	movs	r1, #2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 f9d5 	bl	8003650 <RCCEx_PLL2_Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80022aa:	e00c      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3324      	adds	r3, #36	; 0x24
 80022b0:	2102      	movs	r1, #2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 fa7e 	bl	80037b4 <RCCEx_PLL3_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80022bc:	e003      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	75fb      	strb	r3, [r7, #23]
      break;
 80022c2:	e000      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80022cc:	4b93      	ldr	r3, [pc, #588]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d8:	4990      	ldr	r1, [pc, #576]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	650b      	str	r3, [r1, #80]	; 0x50
 80022de:	e001      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d03d      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d826      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80022f8:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	08002315 	.word	0x08002315
 8002304:	08002323 	.word	0x08002323
 8002308:	08002335 	.word	0x08002335
 800230c:	0800234d 	.word	0x0800234d
 8002310:	0800234d 	.word	0x0800234d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002314:	4b81      	ldr	r3, [pc, #516]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	4a80      	ldr	r2, [pc, #512]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800231a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002320:	e015      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f001 f991 	bl	8003650 <RCCEx_PLL2_Config>
 800232e:	4603      	mov	r3, r0
 8002330:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002332:	e00c      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3324      	adds	r3, #36	; 0x24
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f001 fa3a 	bl	80037b4 <RCCEx_PLL3_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002344:	e003      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
      break;
 800234a:	e000      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800234c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002354:	4b71      	ldr	r3, [pc, #452]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002358:	f023 0207 	bic.w	r2, r3, #7
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	496e      	ldr	r1, [pc, #440]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002362:	4313      	orrs	r3, r2
 8002364:	650b      	str	r3, [r1, #80]	; 0x50
 8002366:	e001      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002374:	2b00      	cmp	r3, #0
 8002376:	d042      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002380:	d02b      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002386:	d825      	bhi.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002388:	2bc0      	cmp	r3, #192	; 0xc0
 800238a:	d028      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800238c:	2bc0      	cmp	r3, #192	; 0xc0
 800238e:	d821      	bhi.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d016      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002394:	2b80      	cmp	r3, #128	; 0x80
 8002396:	d81d      	bhi.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d007      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80023a0:	e018      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023a2:	4b5e      	ldr	r3, [pc, #376]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	4a5d      	ldr	r2, [pc, #372]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023ae:	e017      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f001 f94a 	bl	8003650 <RCCEx_PLL2_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023c0:	e00e      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3324      	adds	r3, #36	; 0x24
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f001 f9f3 	bl	80037b4 <RCCEx_PLL3_Config>
 80023ce:	4603      	mov	r3, r0
 80023d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023d2:	e005      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	75fb      	strb	r3, [r7, #23]
      break;
 80023d8:	e002      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80023de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80023e6:	4b4d      	ldr	r3, [pc, #308]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	494a      	ldr	r1, [pc, #296]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	650b      	str	r3, [r1, #80]	; 0x50
 80023f8:	e001      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002406:	2b00      	cmp	r3, #0
 8002408:	d049      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002410:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002414:	d030      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002416:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800241a:	d82a      	bhi.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800241c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002420:	d02c      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002422:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002426:	d824      	bhi.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800242c:	d018      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800242e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002432:	d81e      	bhi.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800243c:	d007      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800243e:	e018      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002440:	4b36      	ldr	r3, [pc, #216]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	4a35      	ldr	r2, [pc, #212]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800244c:	e017      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	2100      	movs	r1, #0
 8002454:	4618      	mov	r0, r3
 8002456:	f001 f8fb 	bl	8003650 <RCCEx_PLL2_Config>
 800245a:	4603      	mov	r3, r0
 800245c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800245e:	e00e      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3324      	adds	r3, #36	; 0x24
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f001 f9a4 	bl	80037b4 <RCCEx_PLL3_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002470:	e005      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
      break;
 8002476:	e002      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002478:	bf00      	nop
 800247a:	e000      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800247c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800247e:	7dfb      	ldrb	r3, [r7, #23]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002492:	4922      	ldr	r1, [pc, #136]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	658b      	str	r3, [r1, #88]	; 0x58
 8002498:	e001      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800249a:	7dfb      	ldrb	r3, [r7, #23]
 800249c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d04b      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024b4:	d030      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80024b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ba:	d82a      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80024bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024c0:	d02e      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80024c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024c6:	d824      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80024c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024cc:	d018      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80024ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024d2:	d81e      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80024d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024dc:	d007      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80024de:	e018      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024e0:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024ec:	e019      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 f8ab 	bl	8003650 <RCCEx_PLL2_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80024fe:	e010      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3324      	adds	r3, #36	; 0x24
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f001 f954 	bl	80037b4 <RCCEx_PLL3_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002510:	e007      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	75fb      	strb	r3, [r7, #23]
      break;
 8002516:	e004      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002518:	bf00      	nop
 800251a:	e002      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800251c:	58024400 	.word	0x58024400
      break;
 8002520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002522:	7dfb      	ldrb	r3, [r7, #23]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002528:	4b99      	ldr	r3, [pc, #612]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002536:	4996      	ldr	r1, [pc, #600]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002538:	4313      	orrs	r3, r2
 800253a:	658b      	str	r3, [r1, #88]	; 0x58
 800253c:	e001      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d032      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002552:	2b30      	cmp	r3, #48	; 0x30
 8002554:	d01c      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002556:	2b30      	cmp	r3, #48	; 0x30
 8002558:	d817      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800255a:	2b20      	cmp	r3, #32
 800255c:	d00c      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800255e:	2b20      	cmp	r3, #32
 8002560:	d813      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002566:	2b10      	cmp	r3, #16
 8002568:	d10f      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800256a:	4b89      	ldr	r3, [pc, #548]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	4a88      	ldr	r2, [pc, #544]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002576:	e00e      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
 800257c:	2102      	movs	r1, #2
 800257e:	4618      	mov	r0, r3
 8002580:	f001 f866 	bl	8003650 <RCCEx_PLL2_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002588:	e005      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002590:	bf00      	nop
 8002592:	e000      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002596:	7dfb      	ldrb	r3, [r7, #23]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800259c:	4b7c      	ldr	r3, [pc, #496]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a8:	4979      	ldr	r1, [pc, #484]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80025ae:	e001      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d047      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025c8:	d030      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ce:	d82a      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80025d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025d4:	d02c      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80025d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025da:	d824      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80025dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e0:	d018      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80025e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e6:	d81e      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80025ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f0:	d007      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80025f2:	e018      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f4:	4b66      	ldr	r3, [pc, #408]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	4a65      	ldr	r2, [pc, #404]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002600:	e017      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f001 f821 	bl	8003650 <RCCEx_PLL2_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002612:	e00e      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3324      	adds	r3, #36	; 0x24
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f001 f8ca 	bl	80037b4 <RCCEx_PLL3_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002624:	e005      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
      break;
 800262a:	e002      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800262c:	bf00      	nop
 800262e:	e000      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002638:	4b55      	ldr	r3, [pc, #340]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800263a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	4952      	ldr	r1, [pc, #328]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002646:	4313      	orrs	r3, r2
 8002648:	650b      	str	r3, [r1, #80]	; 0x50
 800264a:	e001      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d049      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002664:	d02e      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002666:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266a:	d828      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x476>
 800266c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002670:	d02a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002672:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002676:	d822      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002678:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800267c:	d026      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800267e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002682:	d81c      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002688:	d010      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x464>
 800268a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800268e:	d816      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01d      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	d111      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	2101      	movs	r1, #1
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 ffd5 	bl	8003650 <RCCEx_PLL2_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026aa:	e012      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3324      	adds	r3, #36	; 0x24
 80026b0:	2101      	movs	r1, #1
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 f87e 	bl	80037b4 <RCCEx_PLL3_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026bc:	e009      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
      break;
 80026c2:	e006      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026c4:	bf00      	nop
 80026c6:	e004      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026c8:	bf00      	nop
 80026ca:	e002      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026cc:	bf00      	nop
 80026ce:	e000      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80026d8:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	492a      	ldr	r1, [pc, #168]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	650b      	str	r3, [r1, #80]	; 0x50
 80026ea:	e001      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d04d      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002706:	d02e      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800270c:	d828      	bhi.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002712:	d02a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002718:	d822      	bhi.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800271a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800271e:	d026      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002720:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002724:	d81c      	bhi.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800272a:	d010      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800272c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002730:	d816      	bhi.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01d      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800273a:	d111      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	2101      	movs	r1, #1
 8002742:	4618      	mov	r0, r3
 8002744:	f000 ff84 	bl	8003650 <RCCEx_PLL2_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800274c:	e012      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3324      	adds	r3, #36	; 0x24
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f001 f82d 	bl	80037b4 <RCCEx_PLL3_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800275e:	e009      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	75fb      	strb	r3, [r7, #23]
      break;
 8002764:	e006      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002766:	bf00      	nop
 8002768:	e004      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800276a:	bf00      	nop
 800276c:	e002      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10c      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002788:	4901      	ldr	r1, [pc, #4]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800278a:	4313      	orrs	r3, r2
 800278c:	658b      	str	r3, [r1, #88]	; 0x58
 800278e:	e003      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d02f      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ac:	d00e      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80027ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b2:	d814      	bhi.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x596>
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80027b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027bc:	d10f      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027be:	4baf      	ldr	r3, [pc, #700]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	4aae      	ldr	r2, [pc, #696]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80027ca:	e00c      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3304      	adds	r3, #4
 80027d0:	2101      	movs	r1, #1
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 ff3c 	bl	8003650 <RCCEx_PLL2_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80027dc:	e003      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
      break;
 80027e2:	e000      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80027e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027ec:	4ba3      	ldr	r3, [pc, #652]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f8:	49a0      	ldr	r1, [pc, #640]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	650b      	str	r3, [r1, #80]	; 0x50
 80027fe:	e001      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d032      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	2b03      	cmp	r3, #3
 8002816:	d81b      	bhi.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002818:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800281a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281e:	bf00      	nop
 8002820:	08002857 	.word	0x08002857
 8002824:	08002831 	.word	0x08002831
 8002828:	0800283f 	.word	0x0800283f
 800282c:	08002857 	.word	0x08002857
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002830:	4b92      	ldr	r3, [pc, #584]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	4a91      	ldr	r2, [pc, #580]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800283c:	e00c      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	2102      	movs	r1, #2
 8002844:	4618      	mov	r0, r3
 8002846:	f000 ff03 	bl	8003650 <RCCEx_PLL2_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800284e:	e003      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	75fb      	strb	r3, [r7, #23]
      break;
 8002854:	e000      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800285e:	4b87      	ldr	r3, [pc, #540]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	4984      	ldr	r1, [pc, #528]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800286c:	4313      	orrs	r3, r2
 800286e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002870:	e001      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002872:	7dfb      	ldrb	r3, [r7, #23]
 8002874:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8086 	beq.w	8002990 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002884:	4b7e      	ldr	r3, [pc, #504]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a7d      	ldr	r2, [pc, #500]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002890:	f7fe fa3a 	bl	8000d08 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002896:	e009      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe fa36 	bl	8000d08 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d902      	bls.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	75fb      	strb	r3, [r7, #23]
        break;
 80028aa:	e005      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ac:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ef      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d166      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80028be:	4b6f      	ldr	r3, [pc, #444]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028c8:	4053      	eors	r3, r2
 80028ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d013      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028d2:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028dc:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a66      	ldr	r2, [pc, #408]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028e8:	4b64      	ldr	r3, [pc, #400]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a63      	ldr	r2, [pc, #396]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80028f4:	4a61      	ldr	r2, [pc, #388]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002904:	d115      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7fe f9ff 	bl	8000d08 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800290c:	e00b      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7fe f9fb 	bl	8000d08 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d902      	bls.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	75fb      	strb	r3, [r7, #23]
            break;
 8002924:	e005      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002926:	4b55      	ldr	r3, [pc, #340]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ed      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d126      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800293e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002946:	d10d      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002948:	4b4c      	ldr	r3, [pc, #304]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002956:	0919      	lsrs	r1, r3, #4
 8002958:	4b4a      	ldr	r3, [pc, #296]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800295a:	400b      	ands	r3, r1
 800295c:	4947      	ldr	r1, [pc, #284]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800295e:	4313      	orrs	r3, r2
 8002960:	610b      	str	r3, [r1, #16]
 8002962:	e005      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002964:	4b45      	ldr	r3, [pc, #276]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	4a44      	ldr	r2, [pc, #272]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800296a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800296e:	6113      	str	r3, [r2, #16]
 8002970:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002972:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800297a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297e:	493f      	ldr	r1, [pc, #252]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002980:	4313      	orrs	r3, r2
 8002982:	670b      	str	r3, [r1, #112]	; 0x70
 8002984:	e004      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	75bb      	strb	r3, [r7, #22]
 800298a:	e001      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8085 	beq.w	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a2:	2b28      	cmp	r3, #40	; 0x28
 80029a4:	d866      	bhi.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80029a6:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	08002a89 	.word	0x08002a89
 80029b0:	08002a75 	.word	0x08002a75
 80029b4:	08002a75 	.word	0x08002a75
 80029b8:	08002a75 	.word	0x08002a75
 80029bc:	08002a75 	.word	0x08002a75
 80029c0:	08002a75 	.word	0x08002a75
 80029c4:	08002a75 	.word	0x08002a75
 80029c8:	08002a75 	.word	0x08002a75
 80029cc:	08002a51 	.word	0x08002a51
 80029d0:	08002a75 	.word	0x08002a75
 80029d4:	08002a75 	.word	0x08002a75
 80029d8:	08002a75 	.word	0x08002a75
 80029dc:	08002a75 	.word	0x08002a75
 80029e0:	08002a75 	.word	0x08002a75
 80029e4:	08002a75 	.word	0x08002a75
 80029e8:	08002a75 	.word	0x08002a75
 80029ec:	08002a63 	.word	0x08002a63
 80029f0:	08002a75 	.word	0x08002a75
 80029f4:	08002a75 	.word	0x08002a75
 80029f8:	08002a75 	.word	0x08002a75
 80029fc:	08002a75 	.word	0x08002a75
 8002a00:	08002a75 	.word	0x08002a75
 8002a04:	08002a75 	.word	0x08002a75
 8002a08:	08002a75 	.word	0x08002a75
 8002a0c:	08002a89 	.word	0x08002a89
 8002a10:	08002a75 	.word	0x08002a75
 8002a14:	08002a75 	.word	0x08002a75
 8002a18:	08002a75 	.word	0x08002a75
 8002a1c:	08002a75 	.word	0x08002a75
 8002a20:	08002a75 	.word	0x08002a75
 8002a24:	08002a75 	.word	0x08002a75
 8002a28:	08002a75 	.word	0x08002a75
 8002a2c:	08002a89 	.word	0x08002a89
 8002a30:	08002a75 	.word	0x08002a75
 8002a34:	08002a75 	.word	0x08002a75
 8002a38:	08002a75 	.word	0x08002a75
 8002a3c:	08002a75 	.word	0x08002a75
 8002a40:	08002a75 	.word	0x08002a75
 8002a44:	08002a75 	.word	0x08002a75
 8002a48:	08002a75 	.word	0x08002a75
 8002a4c:	08002a89 	.word	0x08002a89
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	2101      	movs	r1, #1
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fdfa 	bl	8003650 <RCCEx_PLL2_Config>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a60:	e013      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3324      	adds	r3, #36	; 0x24
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fea3 	bl	80037b4 <RCCEx_PLL3_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a72:	e00a      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	75fb      	strb	r3, [r7, #23]
      break;
 8002a78:	e007      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002a7a:	bf00      	nop
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	58024800 	.word	0x58024800
 8002a84:	00ffffcf 	.word	0x00ffffcf
      break;
 8002a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002a90:	4b96      	ldr	r3, [pc, #600]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a9c:	4993      	ldr	r1, [pc, #588]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	654b      	str	r3, [r1, #84]	; 0x54
 8002aa2:	e001      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
 8002aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d038      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d821      	bhi.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002abc:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002b07 	.word	0x08002b07
 8002ac8:	08002add 	.word	0x08002add
 8002acc:	08002aef 	.word	0x08002aef
 8002ad0:	08002b07 	.word	0x08002b07
 8002ad4:	08002b07 	.word	0x08002b07
 8002ad8:	08002b07 	.word	0x08002b07
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fdb4 	bl	8003650 <RCCEx_PLL2_Config>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002aec:	e00c      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3324      	adds	r3, #36	; 0x24
 8002af2:	2101      	movs	r1, #1
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fe5d 	bl	80037b4 <RCCEx_PLL3_Config>
 8002afa:	4603      	mov	r3, r0
 8002afc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002afe:	e003      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	75fb      	strb	r3, [r7, #23]
      break;
 8002b04:	e000      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002b0e:	4b77      	ldr	r3, [pc, #476]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	f023 0207 	bic.w	r2, r3, #7
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1a:	4974      	ldr	r1, [pc, #464]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	654b      	str	r3, [r1, #84]	; 0x54
 8002b20:	e001      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d03a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d821      	bhi.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b87 	.word	0x08002b87
 8002b48:	08002b5d 	.word	0x08002b5d
 8002b4c:	08002b6f 	.word	0x08002b6f
 8002b50:	08002b87 	.word	0x08002b87
 8002b54:	08002b87 	.word	0x08002b87
 8002b58:	08002b87 	.word	0x08002b87
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	2101      	movs	r1, #1
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fd74 	bl	8003650 <RCCEx_PLL2_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b6c:	e00c      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3324      	adds	r3, #36	; 0x24
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fe1d 	bl	80037b4 <RCCEx_PLL3_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b7e:	e003      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	75fb      	strb	r3, [r7, #23]
      break;
 8002b84:	e000      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b8e:	4b57      	ldr	r3, [pc, #348]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	4953      	ldr	r1, [pc, #332]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ba2:	e001      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d04b      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bbe:	d02e      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc4:	d828      	bhi.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bca:	d02a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d822      	bhi.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002bd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bd6:	d026      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002bd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bdc:	d81c      	bhi.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be2:	d010      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be8:	d816      	bhi.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01d      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf2:	d111      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fd28 	bl	8003650 <RCCEx_PLL2_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c04:	e012      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3324      	adds	r3, #36	; 0x24
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fdd1 	bl	80037b4 <RCCEx_PLL3_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c16:	e009      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c1c:	e006      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c1e:	bf00      	nop
 8002c20:	e004      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c22:	bf00      	nop
 8002c24:	e002      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c26:	bf00      	nop
 8002c28:	e000      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c32:	4b2e      	ldr	r3, [pc, #184]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c40:	492a      	ldr	r1, [pc, #168]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	654b      	str	r3, [r1, #84]	; 0x54
 8002c46:	e001      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
 8002c4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d04d      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c62:	d02e      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002c64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c68:	d828      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6e:	d02a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c74:	d822      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c7a:	d026      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c80:	d81c      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c86:	d010      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c8c:	d816      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01d      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c96:	d111      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fcd6 	bl	8003650 <RCCEx_PLL2_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002ca8:	e012      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3324      	adds	r3, #36	; 0x24
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fd7f 	bl	80037b4 <RCCEx_PLL3_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002cba:	e009      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc0:	e006      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e004      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e002      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ce4:	4901      	ldr	r1, [pc, #4]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	658b      	str	r3, [r1, #88]	; 0x58
 8002cea:	e003      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002cec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d04b      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d0a:	d02e      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002d0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d10:	d828      	bhi.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d16:	d02a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d1c:	d822      	bhi.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d22:	d026      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002d24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d28:	d81c      	bhi.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d2e:	d010      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d34:	d816      	bhi.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01d      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3e:	d111      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fc82 	bl	8003650 <RCCEx_PLL2_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d50:	e012      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3324      	adds	r3, #36	; 0x24
 8002d56:	2102      	movs	r1, #2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fd2b 	bl	80037b4 <RCCEx_PLL3_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d62:	e009      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	75fb      	strb	r3, [r7, #23]
      break;
 8002d68:	e006      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e004      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d6e:	bf00      	nop
 8002d70:	e002      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d72:	bf00      	nop
 8002d74:	e000      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002d7e:	4b9d      	ldr	r3, [pc, #628]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d8c:	4999      	ldr	r1, [pc, #612]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	658b      	str	r3, [r1, #88]	; 0x58
 8002d92:	e001      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dae:	d10a      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3324      	adds	r3, #36	; 0x24
 8002db4:	2102      	movs	r1, #2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fcfc 	bl	80037b4 <RCCEx_PLL3_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002dc6:	4b8b      	ldr	r3, [pc, #556]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd4:	4987      	ldr	r1, [pc, #540]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df0:	d10a      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3324      	adds	r3, #36	; 0x24
 8002df6:	2102      	movs	r1, #2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fcdb 	bl	80037b4 <RCCEx_PLL3_Config>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e08:	4b7a      	ldr	r3, [pc, #488]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e16:	4977      	ldr	r1, [pc, #476]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d034      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e32:	d01d      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e38:	d817      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e42:	d009      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002e44:	e011      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fbff 	bl	8003650 <RCCEx_PLL2_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e56:	e00c      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3324      	adds	r3, #36	; 0x24
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fca8 	bl	80037b4 <RCCEx_PLL3_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e68:	e003      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e6e:	e000      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e78:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e86:	495b      	ldr	r1, [pc, #364]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	658b      	str	r3, [r1, #88]	; 0x58
 8002e8c:	e001      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d033      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ea8:	d01c      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002eaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eae:	d816      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eb4:	d003      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eba:	d007      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002ebc:	e00f      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ebe:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	4a4c      	ldr	r2, [pc, #304]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3324      	adds	r3, #36	; 0x24
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fc6e 	bl	80037b4 <RCCEx_PLL3_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efa:	493e      	ldr	r1, [pc, #248]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	654b      	str	r3, [r1, #84]	; 0x54
 8002f00:	e001      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d029      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1e:	d007      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8002f20:	e00f      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f22:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	4a33      	ldr	r2, [pc, #204]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	2102      	movs	r1, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fb8a 	bl	8003650 <RCCEx_PLL2_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f40:	e002      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
      break;
 8002f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002f4e:	4b29      	ldr	r3, [pc, #164]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	4926      	ldr	r1, [pc, #152]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f60:	e001      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3324      	adds	r3, #36	; 0x24
 8002f76:	2102      	movs	r1, #2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fc1b 	bl	80037b4 <RCCEx_PLL3_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d033      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d017      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fa2:	d811      	bhi.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d013      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fae:	d80b      	bhi.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d010      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8002fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb8:	d106      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002fc6:	e007      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	75fb      	strb	r3, [r7, #23]
      break;
 8002fcc:	e004      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e002      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fea:	4902      	ldr	r1, [pc, #8]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	654b      	str	r3, [r1, #84]	; 0x54
 8002ff0:	e004      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8002ff2:	bf00      	nop
 8002ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003008:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800300a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	492e      	ldr	r1, [pc, #184]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003016:	4313      	orrs	r3, r2
 8003018:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003026:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003034:	4926      	ldr	r1, [pc, #152]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003036:	4313      	orrs	r3, r2
 8003038:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003046:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003052:	491f      	ldr	r1, [pc, #124]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003054:	4313      	orrs	r3, r2
 8003056:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003064:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800306a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800306e:	6113      	str	r3, [r2, #16]
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800307a:	4915      	ldr	r1, [pc, #84]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800307c:	4313      	orrs	r3, r2
 800307e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	da08      	bge.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800308a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003094:	490e      	ldr	r1, [pc, #56]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003096:	4313      	orrs	r3, r2
 8003098:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	4906      	ldr	r1, [pc, #24]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80030ba:	7dbb      	ldrb	r3, [r7, #22]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	58024400 	.word	0x58024400

080030d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80030d8:	f7ff f85a 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4904      	ldr	r1, [pc, #16]	; (80030fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	58024400 	.word	0x58024400
 80030fc:	08005484 	.word	0x08005484

08003100 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003108:	4ba1      	ldr	r3, [pc, #644]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003112:	4b9f      	ldr	r3, [pc, #636]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	0b1b      	lsrs	r3, r3, #12
 8003118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800311c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800311e:	4b9c      	ldr	r3, [pc, #624]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800312a:	4b99      	ldr	r3, [pc, #612]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	08db      	lsrs	r3, r3, #3
 8003130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8111 	beq.w	8003370 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b02      	cmp	r3, #2
 8003152:	f000 8083 	beq.w	800325c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	2b02      	cmp	r3, #2
 800315a:	f200 80a1 	bhi.w	80032a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d056      	beq.n	8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800316a:	e099      	b.n	80032a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800316c:	4b88      	ldr	r3, [pc, #544]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d02d      	beq.n	80031d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003178:	4b85      	ldr	r3, [pc, #532]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	08db      	lsrs	r3, r3, #3
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	4a84      	ldr	r2, [pc, #528]	; (8003394 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
 8003188:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	ee07 3a90 	vmov	s15, r3
 8003190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a2:	4b7b      	ldr	r3, [pc, #492]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80031b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80031ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80031d2:	e087      	b.n	80032e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800339c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e6:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80031fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003216:	e065      	b.n	80032e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80033a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322a:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323a:	ed97 6a03 	vldr	s12, [r7, #12]
 800323e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800325a:	e043      	b.n	80032e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003266:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80033a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800326a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326e:	4b48      	ldr	r3, [pc, #288]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003282:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800328a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800329e:	e021      	b.n	80032e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80033a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80032ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b2:	4b37      	ldr	r3, [pc, #220]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80032c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80032e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80032e4:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	0a5b      	lsrs	r3, r3, #9
 80032ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80032fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800330a:	ee17 2a90 	vmov	r2, s15
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003312:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	0c1b      	lsrs	r3, r3, #16
 8003318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800332c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003338:	ee17 2a90 	vmov	r2, s15
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	0e1b      	lsrs	r3, r3, #24
 8003346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800335a:	edd7 6a07 	vldr	s13, [r7, #28]
 800335e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003366:	ee17 2a90 	vmov	r2, s15
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800336e:	e008      	b.n	8003382 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
}
 8003382:	bf00      	nop
 8003384:	3724      	adds	r7, #36	; 0x24
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	58024400 	.word	0x58024400
 8003394:	03d09000 	.word	0x03d09000
 8003398:	46000000 	.word	0x46000000
 800339c:	4c742400 	.word	0x4c742400
 80033a0:	4a742400 	.word	0x4a742400
 80033a4:	4bbebc20 	.word	0x4bbebc20

080033a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033b0:	4ba1      	ldr	r3, [pc, #644]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80033ba:	4b9f      	ldr	r3, [pc, #636]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	0d1b      	lsrs	r3, r3, #20
 80033c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80033c6:	4b9c      	ldr	r3, [pc, #624]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80033d2:	4b99      	ldr	r3, [pc, #612]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	08db      	lsrs	r3, r3, #3
 80033d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8111 	beq.w	8003618 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	f000 8083 	beq.w	8003504 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	2b02      	cmp	r3, #2
 8003402:	f200 80a1 	bhi.w	8003548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d056      	beq.n	80034c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003412:	e099      	b.n	8003548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003414:	4b88      	ldr	r3, [pc, #544]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d02d      	beq.n	800347c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003420:	4b85      	ldr	r3, [pc, #532]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	08db      	lsrs	r3, r3, #3
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	4a84      	ldr	r2, [pc, #528]	; (800363c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
 8003430:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344a:	4b7b      	ldr	r3, [pc, #492]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345a:	ed97 6a03 	vldr	s12, [r7, #12]
 800345e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800346e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003476:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800347a:	e087      	b.n	800358c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003486:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800348a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348e:	4b6a      	ldr	r3, [pc, #424]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349e:	ed97 6a03 	vldr	s12, [r7, #12]
 80034a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80034a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034be:	e065      	b.n	800358c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80034ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d2:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80034e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80034ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003502:	e043      	b.n	800358c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800364c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003516:	4b48      	ldr	r3, [pc, #288]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003526:	ed97 6a03 	vldr	s12, [r7, #12]
 800352a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800352e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800353a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003546:	e021      	b.n	800358c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003552:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800355a:	4b37      	ldr	r3, [pc, #220]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356a:	ed97 6a03 	vldr	s12, [r7, #12]
 800356e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800357a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800357e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800358a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800358c:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	0a5b      	lsrs	r3, r3, #9
 8003592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80035aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035b2:	ee17 2a90 	vmov	r2, s15
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80035ba:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	0c1b      	lsrs	r3, r3, #16
 80035c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80035d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e0:	ee17 2a90 	vmov	r2, s15
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80035e8:	4b13      	ldr	r3, [pc, #76]	; (8003638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	0e1b      	lsrs	r3, r3, #24
 80035ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003602:	edd7 6a07 	vldr	s13, [r7, #28]
 8003606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800360a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800360e:	ee17 2a90 	vmov	r2, s15
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003616:	e008      	b.n	800362a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
}
 800362a:	bf00      	nop
 800362c:	3724      	adds	r7, #36	; 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	58024400 	.word	0x58024400
 800363c:	03d09000 	.word	0x03d09000
 8003640:	46000000 	.word	0x46000000
 8003644:	4c742400 	.word	0x4c742400
 8003648:	4a742400 	.word	0x4a742400
 800364c:	4bbebc20 	.word	0x4bbebc20

08003650 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800365e:	4b53      	ldr	r3, [pc, #332]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b03      	cmp	r3, #3
 8003668:	d101      	bne.n	800366e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e099      	b.n	80037a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800366e:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4e      	ldr	r2, [pc, #312]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003674:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367a:	f7fd fb45 	bl	8000d08 <HAL_GetTick>
 800367e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003680:	e008      	b.n	8003694 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003682:	f7fd fb41 	bl	8000d08 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e086      	b.n	80037a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003694:	4b45      	ldr	r3, [pc, #276]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f0      	bne.n	8003682 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80036a0:	4b42      	ldr	r3, [pc, #264]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	031b      	lsls	r3, r3, #12
 80036ae:	493f      	ldr	r1, [pc, #252]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	628b      	str	r3, [r1, #40]	; 0x28
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	025b      	lsls	r3, r3, #9
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	3b01      	subs	r3, #1
 80036de:	061b      	lsls	r3, r3, #24
 80036e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036e4:	4931      	ldr	r1, [pc, #196]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80036ea:	4b30      	ldr	r3, [pc, #192]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	492d      	ldr	r1, [pc, #180]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80036fc:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	f023 0220 	bic.w	r2, r3, #32
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	4928      	ldr	r1, [pc, #160]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800370e:	4b27      	ldr	r3, [pc, #156]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	4a26      	ldr	r2, [pc, #152]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003714:	f023 0310 	bic.w	r3, r3, #16
 8003718:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 800371c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800371e:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <RCCEx_PLL2_Config+0x160>)
 8003720:	4013      	ands	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	69d2      	ldr	r2, [r2, #28]
 8003726:	00d2      	lsls	r2, r2, #3
 8003728:	4920      	ldr	r1, [pc, #128]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 800372a:	4313      	orrs	r3, r2
 800372c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800372e:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003734:	f043 0310 	orr.w	r3, r3, #16
 8003738:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003740:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	4a19      	ldr	r2, [pc, #100]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003746:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800374a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800374c:	e00f      	b.n	800376e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d106      	bne.n	8003762 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003754:	4b15      	ldr	r3, [pc, #84]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 800375a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003760:	e005      	b.n	800376e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800376c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003774:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377a:	f7fd fac5 	bl	8000d08 <HAL_GetTick>
 800377e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003780:	e008      	b.n	8003794 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003782:	f7fd fac1 	bl	8000d08 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e006      	b.n	80037a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	58024400 	.word	0x58024400
 80037b0:	ffff0007 	.word	0xffff0007

080037b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037c2:	4b53      	ldr	r3, [pc, #332]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d101      	bne.n	80037d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e099      	b.n	8003906 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80037d2:	4b4f      	ldr	r3, [pc, #316]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a4e      	ldr	r2, [pc, #312]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80037d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037de:	f7fd fa93 	bl	8000d08 <HAL_GetTick>
 80037e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037e6:	f7fd fa8f 	bl	8000d08 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e086      	b.n	8003906 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037f8:	4b45      	ldr	r3, [pc, #276]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003804:	4b42      	ldr	r3, [pc, #264]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	051b      	lsls	r3, r3, #20
 8003812:	493f      	ldr	r1, [pc, #252]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003814:	4313      	orrs	r3, r2
 8003816:	628b      	str	r3, [r1, #40]	; 0x28
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	3b01      	subs	r3, #1
 800381e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	3b01      	subs	r3, #1
 8003828:	025b      	lsls	r3, r3, #9
 800382a:	b29b      	uxth	r3, r3
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	3b01      	subs	r3, #1
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	3b01      	subs	r3, #1
 8003842:	061b      	lsls	r3, r3, #24
 8003844:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003848:	4931      	ldr	r1, [pc, #196]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 800384a:	4313      	orrs	r3, r2
 800384c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800384e:	4b30      	ldr	r3, [pc, #192]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	492d      	ldr	r1, [pc, #180]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	4928      	ldr	r1, [pc, #160]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 800386e:	4313      	orrs	r3, r2
 8003870:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003872:	4b27      	ldr	r3, [pc, #156]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4a26      	ldr	r2, [pc, #152]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800387c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003882:	4b24      	ldr	r3, [pc, #144]	; (8003914 <RCCEx_PLL3_Config+0x160>)
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	69d2      	ldr	r2, [r2, #28]
 800388a:	00d2      	lsls	r2, r2, #3
 800388c:	4920      	ldr	r1, [pc, #128]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003892:	4b1f      	ldr	r3, [pc, #124]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	4a19      	ldr	r2, [pc, #100]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038b0:	e00f      	b.n	80038d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80038b8:	4b15      	ldr	r3, [pc, #84]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038c4:	e005      	b.n	80038d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80038c6:	4b12      	ldr	r3, [pc, #72]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	4a11      	ldr	r2, [pc, #68]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80038d2:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038de:	f7fd fa13 	bl	8000d08 <HAL_GetTick>
 80038e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80038e4:	e008      	b.n	80038f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80038e6:	f7fd fa0f 	bl	8000d08 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e006      	b.n	8003906 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	58024400 	.word	0x58024400
 8003914:	ffff0007 	.word	0xffff0007

08003918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e042      	b.n	80039b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fc ffe7 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2224      	movs	r2, #36	; 0x24
 8003946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f8c2 	bl	8003ae4 <UART_SetConfig>
 8003960:	4603      	mov	r3, r0
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e022      	b.n	80039b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fe1e 	bl	80045b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fea5 	bl	80046f8 <UART_CheckIdleState>
 80039ae:	4603      	mov	r3, r0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	; 0x28
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	f040 8083 	bne.w	8003ada <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_UART_Transmit+0x28>
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e07b      	b.n	8003adc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Transmit+0x3a>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e074      	b.n	8003adc <HAL_UART_Transmit+0x124>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2221      	movs	r2, #33	; 0x21
 8003a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a0a:	f7fd f97d 	bl	8000d08 <HAL_GetTick>
 8003a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	88fa      	ldrh	r2, [r7, #6]
 8003a14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a28:	d108      	bne.n	8003a3c <HAL_UART_Transmit+0x84>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e003      	b.n	8003a44 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003a4c:	e02c      	b.n	8003aa8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2200      	movs	r2, #0
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fe98 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e039      	b.n	8003adc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10b      	bne.n	8003a86 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	3302      	adds	r3, #2
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	e007      	b.n	8003a96 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	781a      	ldrb	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1cc      	bne.n	8003a4e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2200      	movs	r2, #0
 8003abc:	2140      	movs	r1, #64	; 0x40
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fe65 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e006      	b.n	8003adc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae8:	b092      	sub	sp, #72	; 0x48
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4bbe      	ldr	r3, [pc, #760]	; (8003e0c <UART_SetConfig+0x328>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4ab3      	ldr	r2, [pc, #716]	; (8003e10 <UART_SetConfig+0x32c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	4baf      	ldr	r3, [pc, #700]	; (8003e14 <UART_SetConfig+0x330>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	f023 010f 	bic.w	r1, r3, #15
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4aa6      	ldr	r2, [pc, #664]	; (8003e18 <UART_SetConfig+0x334>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d177      	bne.n	8003c74 <UART_SetConfig+0x190>
 8003b84:	4ba5      	ldr	r3, [pc, #660]	; (8003e1c <UART_SetConfig+0x338>)
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b8c:	2b28      	cmp	r3, #40	; 0x28
 8003b8e:	d86d      	bhi.n	8003c6c <UART_SetConfig+0x188>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <UART_SetConfig+0xb4>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003c3d 	.word	0x08003c3d
 8003b9c:	08003c6d 	.word	0x08003c6d
 8003ba0:	08003c6d 	.word	0x08003c6d
 8003ba4:	08003c6d 	.word	0x08003c6d
 8003ba8:	08003c6d 	.word	0x08003c6d
 8003bac:	08003c6d 	.word	0x08003c6d
 8003bb0:	08003c6d 	.word	0x08003c6d
 8003bb4:	08003c6d 	.word	0x08003c6d
 8003bb8:	08003c45 	.word	0x08003c45
 8003bbc:	08003c6d 	.word	0x08003c6d
 8003bc0:	08003c6d 	.word	0x08003c6d
 8003bc4:	08003c6d 	.word	0x08003c6d
 8003bc8:	08003c6d 	.word	0x08003c6d
 8003bcc:	08003c6d 	.word	0x08003c6d
 8003bd0:	08003c6d 	.word	0x08003c6d
 8003bd4:	08003c6d 	.word	0x08003c6d
 8003bd8:	08003c4d 	.word	0x08003c4d
 8003bdc:	08003c6d 	.word	0x08003c6d
 8003be0:	08003c6d 	.word	0x08003c6d
 8003be4:	08003c6d 	.word	0x08003c6d
 8003be8:	08003c6d 	.word	0x08003c6d
 8003bec:	08003c6d 	.word	0x08003c6d
 8003bf0:	08003c6d 	.word	0x08003c6d
 8003bf4:	08003c6d 	.word	0x08003c6d
 8003bf8:	08003c55 	.word	0x08003c55
 8003bfc:	08003c6d 	.word	0x08003c6d
 8003c00:	08003c6d 	.word	0x08003c6d
 8003c04:	08003c6d 	.word	0x08003c6d
 8003c08:	08003c6d 	.word	0x08003c6d
 8003c0c:	08003c6d 	.word	0x08003c6d
 8003c10:	08003c6d 	.word	0x08003c6d
 8003c14:	08003c6d 	.word	0x08003c6d
 8003c18:	08003c5d 	.word	0x08003c5d
 8003c1c:	08003c6d 	.word	0x08003c6d
 8003c20:	08003c6d 	.word	0x08003c6d
 8003c24:	08003c6d 	.word	0x08003c6d
 8003c28:	08003c6d 	.word	0x08003c6d
 8003c2c:	08003c6d 	.word	0x08003c6d
 8003c30:	08003c6d 	.word	0x08003c6d
 8003c34:	08003c6d 	.word	0x08003c6d
 8003c38:	08003c65 	.word	0x08003c65
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c42:	e222      	b.n	800408a <UART_SetConfig+0x5a6>
 8003c44:	2304      	movs	r3, #4
 8003c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c4a:	e21e      	b.n	800408a <UART_SetConfig+0x5a6>
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c52:	e21a      	b.n	800408a <UART_SetConfig+0x5a6>
 8003c54:	2310      	movs	r3, #16
 8003c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c5a:	e216      	b.n	800408a <UART_SetConfig+0x5a6>
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c62:	e212      	b.n	800408a <UART_SetConfig+0x5a6>
 8003c64:	2340      	movs	r3, #64	; 0x40
 8003c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c6a:	e20e      	b.n	800408a <UART_SetConfig+0x5a6>
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c72:	e20a      	b.n	800408a <UART_SetConfig+0x5a6>
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a69      	ldr	r2, [pc, #420]	; (8003e20 <UART_SetConfig+0x33c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d130      	bne.n	8003ce0 <UART_SetConfig+0x1fc>
 8003c7e:	4b67      	ldr	r3, [pc, #412]	; (8003e1c <UART_SetConfig+0x338>)
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	2b05      	cmp	r3, #5
 8003c88:	d826      	bhi.n	8003cd8 <UART_SetConfig+0x1f4>
 8003c8a:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <UART_SetConfig+0x1ac>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003ca9 	.word	0x08003ca9
 8003c94:	08003cb1 	.word	0x08003cb1
 8003c98:	08003cb9 	.word	0x08003cb9
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003cc9 	.word	0x08003cc9
 8003ca4:	08003cd1 	.word	0x08003cd1
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cae:	e1ec      	b.n	800408a <UART_SetConfig+0x5a6>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cb6:	e1e8      	b.n	800408a <UART_SetConfig+0x5a6>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cbe:	e1e4      	b.n	800408a <UART_SetConfig+0x5a6>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cc6:	e1e0      	b.n	800408a <UART_SetConfig+0x5a6>
 8003cc8:	2320      	movs	r3, #32
 8003cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cce:	e1dc      	b.n	800408a <UART_SetConfig+0x5a6>
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cd6:	e1d8      	b.n	800408a <UART_SetConfig+0x5a6>
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cde:	e1d4      	b.n	800408a <UART_SetConfig+0x5a6>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a4f      	ldr	r2, [pc, #316]	; (8003e24 <UART_SetConfig+0x340>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d130      	bne.n	8003d4c <UART_SetConfig+0x268>
 8003cea:	4b4c      	ldr	r3, [pc, #304]	; (8003e1c <UART_SetConfig+0x338>)
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	2b05      	cmp	r3, #5
 8003cf4:	d826      	bhi.n	8003d44 <UART_SetConfig+0x260>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <UART_SetConfig+0x218>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d15 	.word	0x08003d15
 8003d00:	08003d1d 	.word	0x08003d1d
 8003d04:	08003d25 	.word	0x08003d25
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d35 	.word	0x08003d35
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d1a:	e1b6      	b.n	800408a <UART_SetConfig+0x5a6>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d22:	e1b2      	b.n	800408a <UART_SetConfig+0x5a6>
 8003d24:	2308      	movs	r3, #8
 8003d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d2a:	e1ae      	b.n	800408a <UART_SetConfig+0x5a6>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d32:	e1aa      	b.n	800408a <UART_SetConfig+0x5a6>
 8003d34:	2320      	movs	r3, #32
 8003d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d3a:	e1a6      	b.n	800408a <UART_SetConfig+0x5a6>
 8003d3c:	2340      	movs	r3, #64	; 0x40
 8003d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d42:	e1a2      	b.n	800408a <UART_SetConfig+0x5a6>
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d4a:	e19e      	b.n	800408a <UART_SetConfig+0x5a6>
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <UART_SetConfig+0x344>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d130      	bne.n	8003db8 <UART_SetConfig+0x2d4>
 8003d56:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <UART_SetConfig+0x338>)
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d826      	bhi.n	8003db0 <UART_SetConfig+0x2cc>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0x284>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d81 	.word	0x08003d81
 8003d6c:	08003d89 	.word	0x08003d89
 8003d70:	08003d91 	.word	0x08003d91
 8003d74:	08003d99 	.word	0x08003d99
 8003d78:	08003da1 	.word	0x08003da1
 8003d7c:	08003da9 	.word	0x08003da9
 8003d80:	2300      	movs	r3, #0
 8003d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d86:	e180      	b.n	800408a <UART_SetConfig+0x5a6>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d8e:	e17c      	b.n	800408a <UART_SetConfig+0x5a6>
 8003d90:	2308      	movs	r3, #8
 8003d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d96:	e178      	b.n	800408a <UART_SetConfig+0x5a6>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d9e:	e174      	b.n	800408a <UART_SetConfig+0x5a6>
 8003da0:	2320      	movs	r3, #32
 8003da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003da6:	e170      	b.n	800408a <UART_SetConfig+0x5a6>
 8003da8:	2340      	movs	r3, #64	; 0x40
 8003daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dae:	e16c      	b.n	800408a <UART_SetConfig+0x5a6>
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003db6:	e168      	b.n	800408a <UART_SetConfig+0x5a6>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <UART_SetConfig+0x348>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d142      	bne.n	8003e48 <UART_SetConfig+0x364>
 8003dc2:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <UART_SetConfig+0x338>)
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d838      	bhi.n	8003e40 <UART_SetConfig+0x35c>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <UART_SetConfig+0x2f0>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003ded 	.word	0x08003ded
 8003dd8:	08003df5 	.word	0x08003df5
 8003ddc:	08003dfd 	.word	0x08003dfd
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e31 	.word	0x08003e31
 8003de8:	08003e39 	.word	0x08003e39
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003df2:	e14a      	b.n	800408a <UART_SetConfig+0x5a6>
 8003df4:	2304      	movs	r3, #4
 8003df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dfa:	e146      	b.n	800408a <UART_SetConfig+0x5a6>
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e02:	e142      	b.n	800408a <UART_SetConfig+0x5a6>
 8003e04:	2310      	movs	r3, #16
 8003e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e0a:	e13e      	b.n	800408a <UART_SetConfig+0x5a6>
 8003e0c:	cfff69f3 	.word	0xcfff69f3
 8003e10:	58000c00 	.word	0x58000c00
 8003e14:	11fff4ff 	.word	0x11fff4ff
 8003e18:	40011000 	.word	0x40011000
 8003e1c:	58024400 	.word	0x58024400
 8003e20:	40004400 	.word	0x40004400
 8003e24:	40004800 	.word	0x40004800
 8003e28:	40004c00 	.word	0x40004c00
 8003e2c:	40005000 	.word	0x40005000
 8003e30:	2320      	movs	r3, #32
 8003e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e36:	e128      	b.n	800408a <UART_SetConfig+0x5a6>
 8003e38:	2340      	movs	r3, #64	; 0x40
 8003e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e3e:	e124      	b.n	800408a <UART_SetConfig+0x5a6>
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e46:	e120      	b.n	800408a <UART_SetConfig+0x5a6>
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4acb      	ldr	r2, [pc, #812]	; (800417c <UART_SetConfig+0x698>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d176      	bne.n	8003f40 <UART_SetConfig+0x45c>
 8003e52:	4bcb      	ldr	r3, [pc, #812]	; (8004180 <UART_SetConfig+0x69c>)
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e5a:	2b28      	cmp	r3, #40	; 0x28
 8003e5c:	d86c      	bhi.n	8003f38 <UART_SetConfig+0x454>
 8003e5e:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <UART_SetConfig+0x380>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003f09 	.word	0x08003f09
 8003e68:	08003f39 	.word	0x08003f39
 8003e6c:	08003f39 	.word	0x08003f39
 8003e70:	08003f39 	.word	0x08003f39
 8003e74:	08003f39 	.word	0x08003f39
 8003e78:	08003f39 	.word	0x08003f39
 8003e7c:	08003f39 	.word	0x08003f39
 8003e80:	08003f39 	.word	0x08003f39
 8003e84:	08003f11 	.word	0x08003f11
 8003e88:	08003f39 	.word	0x08003f39
 8003e8c:	08003f39 	.word	0x08003f39
 8003e90:	08003f39 	.word	0x08003f39
 8003e94:	08003f39 	.word	0x08003f39
 8003e98:	08003f39 	.word	0x08003f39
 8003e9c:	08003f39 	.word	0x08003f39
 8003ea0:	08003f39 	.word	0x08003f39
 8003ea4:	08003f19 	.word	0x08003f19
 8003ea8:	08003f39 	.word	0x08003f39
 8003eac:	08003f39 	.word	0x08003f39
 8003eb0:	08003f39 	.word	0x08003f39
 8003eb4:	08003f39 	.word	0x08003f39
 8003eb8:	08003f39 	.word	0x08003f39
 8003ebc:	08003f39 	.word	0x08003f39
 8003ec0:	08003f39 	.word	0x08003f39
 8003ec4:	08003f21 	.word	0x08003f21
 8003ec8:	08003f39 	.word	0x08003f39
 8003ecc:	08003f39 	.word	0x08003f39
 8003ed0:	08003f39 	.word	0x08003f39
 8003ed4:	08003f39 	.word	0x08003f39
 8003ed8:	08003f39 	.word	0x08003f39
 8003edc:	08003f39 	.word	0x08003f39
 8003ee0:	08003f39 	.word	0x08003f39
 8003ee4:	08003f29 	.word	0x08003f29
 8003ee8:	08003f39 	.word	0x08003f39
 8003eec:	08003f39 	.word	0x08003f39
 8003ef0:	08003f39 	.word	0x08003f39
 8003ef4:	08003f39 	.word	0x08003f39
 8003ef8:	08003f39 	.word	0x08003f39
 8003efc:	08003f39 	.word	0x08003f39
 8003f00:	08003f39 	.word	0x08003f39
 8003f04:	08003f31 	.word	0x08003f31
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f0e:	e0bc      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f10:	2304      	movs	r3, #4
 8003f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f16:	e0b8      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f18:	2308      	movs	r3, #8
 8003f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f1e:	e0b4      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f20:	2310      	movs	r3, #16
 8003f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f26:	e0b0      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f28:	2320      	movs	r3, #32
 8003f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f2e:	e0ac      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f30:	2340      	movs	r3, #64	; 0x40
 8003f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f36:	e0a8      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f3e:	e0a4      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a8f      	ldr	r2, [pc, #572]	; (8004184 <UART_SetConfig+0x6a0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d130      	bne.n	8003fac <UART_SetConfig+0x4c8>
 8003f4a:	4b8d      	ldr	r3, [pc, #564]	; (8004180 <UART_SetConfig+0x69c>)
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	2b05      	cmp	r3, #5
 8003f54:	d826      	bhi.n	8003fa4 <UART_SetConfig+0x4c0>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <UART_SetConfig+0x478>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f75 	.word	0x08003f75
 8003f60:	08003f7d 	.word	0x08003f7d
 8003f64:	08003f85 	.word	0x08003f85
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f7a:	e086      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f82:	e082      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f84:	2308      	movs	r3, #8
 8003f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f8a:	e07e      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f92:	e07a      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f94:	2320      	movs	r3, #32
 8003f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f9a:	e076      	b.n	800408a <UART_SetConfig+0x5a6>
 8003f9c:	2340      	movs	r3, #64	; 0x40
 8003f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fa2:	e072      	b.n	800408a <UART_SetConfig+0x5a6>
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003faa:	e06e      	b.n	800408a <UART_SetConfig+0x5a6>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a75      	ldr	r2, [pc, #468]	; (8004188 <UART_SetConfig+0x6a4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d130      	bne.n	8004018 <UART_SetConfig+0x534>
 8003fb6:	4b72      	ldr	r3, [pc, #456]	; (8004180 <UART_SetConfig+0x69c>)
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d826      	bhi.n	8004010 <UART_SetConfig+0x52c>
 8003fc2:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <UART_SetConfig+0x4e4>)
 8003fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc8:	08003fe1 	.word	0x08003fe1
 8003fcc:	08003fe9 	.word	0x08003fe9
 8003fd0:	08003ff1 	.word	0x08003ff1
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08004001 	.word	0x08004001
 8003fdc:	08004009 	.word	0x08004009
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fe6:	e050      	b.n	800408a <UART_SetConfig+0x5a6>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fee:	e04c      	b.n	800408a <UART_SetConfig+0x5a6>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ff6:	e048      	b.n	800408a <UART_SetConfig+0x5a6>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ffe:	e044      	b.n	800408a <UART_SetConfig+0x5a6>
 8004000:	2320      	movs	r3, #32
 8004002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004006:	e040      	b.n	800408a <UART_SetConfig+0x5a6>
 8004008:	2340      	movs	r3, #64	; 0x40
 800400a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800400e:	e03c      	b.n	800408a <UART_SetConfig+0x5a6>
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004016:	e038      	b.n	800408a <UART_SetConfig+0x5a6>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a5b      	ldr	r2, [pc, #364]	; (800418c <UART_SetConfig+0x6a8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d130      	bne.n	8004084 <UART_SetConfig+0x5a0>
 8004022:	4b57      	ldr	r3, [pc, #348]	; (8004180 <UART_SetConfig+0x69c>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	2b05      	cmp	r3, #5
 800402c:	d826      	bhi.n	800407c <UART_SetConfig+0x598>
 800402e:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <UART_SetConfig+0x550>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	0800404d 	.word	0x0800404d
 8004038:	08004055 	.word	0x08004055
 800403c:	0800405d 	.word	0x0800405d
 8004040:	08004065 	.word	0x08004065
 8004044:	0800406d 	.word	0x0800406d
 8004048:	08004075 	.word	0x08004075
 800404c:	2302      	movs	r3, #2
 800404e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004052:	e01a      	b.n	800408a <UART_SetConfig+0x5a6>
 8004054:	2304      	movs	r3, #4
 8004056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800405a:	e016      	b.n	800408a <UART_SetConfig+0x5a6>
 800405c:	2308      	movs	r3, #8
 800405e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004062:	e012      	b.n	800408a <UART_SetConfig+0x5a6>
 8004064:	2310      	movs	r3, #16
 8004066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800406a:	e00e      	b.n	800408a <UART_SetConfig+0x5a6>
 800406c:	2320      	movs	r3, #32
 800406e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004072:	e00a      	b.n	800408a <UART_SetConfig+0x5a6>
 8004074:	2340      	movs	r3, #64	; 0x40
 8004076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800407a:	e006      	b.n	800408a <UART_SetConfig+0x5a6>
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004082:	e002      	b.n	800408a <UART_SetConfig+0x5a6>
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a3f      	ldr	r2, [pc, #252]	; (800418c <UART_SetConfig+0x6a8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	f040 80f8 	bne.w	8004286 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004096:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800409a:	2b20      	cmp	r3, #32
 800409c:	dc46      	bgt.n	800412c <UART_SetConfig+0x648>
 800409e:	2b02      	cmp	r3, #2
 80040a0:	f2c0 8082 	blt.w	80041a8 <UART_SetConfig+0x6c4>
 80040a4:	3b02      	subs	r3, #2
 80040a6:	2b1e      	cmp	r3, #30
 80040a8:	d87e      	bhi.n	80041a8 <UART_SetConfig+0x6c4>
 80040aa:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <UART_SetConfig+0x5cc>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	08004133 	.word	0x08004133
 80040b4:	080041a9 	.word	0x080041a9
 80040b8:	0800413b 	.word	0x0800413b
 80040bc:	080041a9 	.word	0x080041a9
 80040c0:	080041a9 	.word	0x080041a9
 80040c4:	080041a9 	.word	0x080041a9
 80040c8:	0800414b 	.word	0x0800414b
 80040cc:	080041a9 	.word	0x080041a9
 80040d0:	080041a9 	.word	0x080041a9
 80040d4:	080041a9 	.word	0x080041a9
 80040d8:	080041a9 	.word	0x080041a9
 80040dc:	080041a9 	.word	0x080041a9
 80040e0:	080041a9 	.word	0x080041a9
 80040e4:	080041a9 	.word	0x080041a9
 80040e8:	0800415b 	.word	0x0800415b
 80040ec:	080041a9 	.word	0x080041a9
 80040f0:	080041a9 	.word	0x080041a9
 80040f4:	080041a9 	.word	0x080041a9
 80040f8:	080041a9 	.word	0x080041a9
 80040fc:	080041a9 	.word	0x080041a9
 8004100:	080041a9 	.word	0x080041a9
 8004104:	080041a9 	.word	0x080041a9
 8004108:	080041a9 	.word	0x080041a9
 800410c:	080041a9 	.word	0x080041a9
 8004110:	080041a9 	.word	0x080041a9
 8004114:	080041a9 	.word	0x080041a9
 8004118:	080041a9 	.word	0x080041a9
 800411c:	080041a9 	.word	0x080041a9
 8004120:	080041a9 	.word	0x080041a9
 8004124:	080041a9 	.word	0x080041a9
 8004128:	0800419b 	.word	0x0800419b
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d037      	beq.n	80041a0 <UART_SetConfig+0x6bc>
 8004130:	e03a      	b.n	80041a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004132:	f7fe ffcf 	bl	80030d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004136:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004138:	e03c      	b.n	80041b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800413a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800413e:	4618      	mov	r0, r3
 8004140:	f7fe ffde 	bl	8003100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004148:	e034      	b.n	80041b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800414a:	f107 0318 	add.w	r3, r7, #24
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff f92a 	bl	80033a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004158:	e02c      	b.n	80041b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <UART_SetConfig+0x69c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d016      	beq.n	8004194 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <UART_SetConfig+0x69c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	08db      	lsrs	r3, r3, #3
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	4a07      	ldr	r2, [pc, #28]	; (8004190 <UART_SetConfig+0x6ac>)
 8004172:	fa22 f303 	lsr.w	r3, r2, r3
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004178:	e01c      	b.n	80041b4 <UART_SetConfig+0x6d0>
 800417a:	bf00      	nop
 800417c:	40011400 	.word	0x40011400
 8004180:	58024400 	.word	0x58024400
 8004184:	40007800 	.word	0x40007800
 8004188:	40007c00 	.word	0x40007c00
 800418c:	58000c00 	.word	0x58000c00
 8004190:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004194:	4b9d      	ldr	r3, [pc, #628]	; (800440c <UART_SetConfig+0x928>)
 8004196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004198:	e00c      	b.n	80041b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800419a:	4b9d      	ldr	r3, [pc, #628]	; (8004410 <UART_SetConfig+0x92c>)
 800419c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800419e:	e009      	b.n	80041b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041a6:	e005      	b.n	80041b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80041b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 81de 	beq.w	8004578 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	4a94      	ldr	r2, [pc, #592]	; (8004414 <UART_SetConfig+0x930>)
 80041c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041c6:	461a      	mov	r2, r3
 80041c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80041ce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041dc:	429a      	cmp	r2, r3
 80041de:	d305      	bcc.n	80041ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d903      	bls.n	80041f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80041f2:	e1c1      	b.n	8004578 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f6:	2200      	movs	r2, #0
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	60fa      	str	r2, [r7, #12]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	4a84      	ldr	r2, [pc, #528]	; (8004414 <UART_SetConfig+0x930>)
 8004202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004206:	b29b      	uxth	r3, r3
 8004208:	2200      	movs	r2, #0
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004212:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004216:	f7fc f8b3 	bl	8000380 <__aeabi_uldivmod>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	020b      	lsls	r3, r1, #8
 800422c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004230:	0202      	lsls	r2, r0, #8
 8004232:	6979      	ldr	r1, [r7, #20]
 8004234:	6849      	ldr	r1, [r1, #4]
 8004236:	0849      	lsrs	r1, r1, #1
 8004238:	2000      	movs	r0, #0
 800423a:	460c      	mov	r4, r1
 800423c:	4605      	mov	r5, r0
 800423e:	eb12 0804 	adds.w	r8, r2, r4
 8004242:	eb43 0905 	adc.w	r9, r3, r5
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	469a      	mov	sl, r3
 800424e:	4693      	mov	fp, r2
 8004250:	4652      	mov	r2, sl
 8004252:	465b      	mov	r3, fp
 8004254:	4640      	mov	r0, r8
 8004256:	4649      	mov	r1, r9
 8004258:	f7fc f892 	bl	8000380 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4613      	mov	r3, r2
 8004262:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426a:	d308      	bcc.n	800427e <UART_SetConfig+0x79a>
 800426c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004272:	d204      	bcs.n	800427e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800427a:	60da      	str	r2, [r3, #12]
 800427c:	e17c      	b.n	8004578 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004284:	e178      	b.n	8004578 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428e:	f040 80c5 	bne.w	800441c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004292:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004296:	2b20      	cmp	r3, #32
 8004298:	dc48      	bgt.n	800432c <UART_SetConfig+0x848>
 800429a:	2b00      	cmp	r3, #0
 800429c:	db7b      	blt.n	8004396 <UART_SetConfig+0x8b2>
 800429e:	2b20      	cmp	r3, #32
 80042a0:	d879      	bhi.n	8004396 <UART_SetConfig+0x8b2>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <UART_SetConfig+0x7c4>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	08004333 	.word	0x08004333
 80042ac:	0800433b 	.word	0x0800433b
 80042b0:	08004397 	.word	0x08004397
 80042b4:	08004397 	.word	0x08004397
 80042b8:	08004343 	.word	0x08004343
 80042bc:	08004397 	.word	0x08004397
 80042c0:	08004397 	.word	0x08004397
 80042c4:	08004397 	.word	0x08004397
 80042c8:	08004353 	.word	0x08004353
 80042cc:	08004397 	.word	0x08004397
 80042d0:	08004397 	.word	0x08004397
 80042d4:	08004397 	.word	0x08004397
 80042d8:	08004397 	.word	0x08004397
 80042dc:	08004397 	.word	0x08004397
 80042e0:	08004397 	.word	0x08004397
 80042e4:	08004397 	.word	0x08004397
 80042e8:	08004363 	.word	0x08004363
 80042ec:	08004397 	.word	0x08004397
 80042f0:	08004397 	.word	0x08004397
 80042f4:	08004397 	.word	0x08004397
 80042f8:	08004397 	.word	0x08004397
 80042fc:	08004397 	.word	0x08004397
 8004300:	08004397 	.word	0x08004397
 8004304:	08004397 	.word	0x08004397
 8004308:	08004397 	.word	0x08004397
 800430c:	08004397 	.word	0x08004397
 8004310:	08004397 	.word	0x08004397
 8004314:	08004397 	.word	0x08004397
 8004318:	08004397 	.word	0x08004397
 800431c:	08004397 	.word	0x08004397
 8004320:	08004397 	.word	0x08004397
 8004324:	08004397 	.word	0x08004397
 8004328:	08004389 	.word	0x08004389
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d02e      	beq.n	800438e <UART_SetConfig+0x8aa>
 8004330:	e031      	b.n	8004396 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004332:	f7fd ff5d 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8004336:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004338:	e033      	b.n	80043a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800433a:	f7fd ff6f 	bl	800221c <HAL_RCC_GetPCLK2Freq>
 800433e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004340:	e02f      	b.n	80043a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe feda 	bl	8003100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004350:	e027      	b.n	80043a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004352:	f107 0318 	add.w	r3, r7, #24
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff f826 	bl	80033a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004360:	e01f      	b.n	80043a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004362:	4b2d      	ldr	r3, [pc, #180]	; (8004418 <UART_SetConfig+0x934>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800436e:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <UART_SetConfig+0x934>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	08db      	lsrs	r3, r3, #3
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	4a24      	ldr	r2, [pc, #144]	; (800440c <UART_SetConfig+0x928>)
 800437a:	fa22 f303 	lsr.w	r3, r2, r3
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004380:	e00f      	b.n	80043a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004382:	4b22      	ldr	r3, [pc, #136]	; (800440c <UART_SetConfig+0x928>)
 8004384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004386:	e00c      	b.n	80043a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004388:	4b21      	ldr	r3, [pc, #132]	; (8004410 <UART_SetConfig+0x92c>)
 800438a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800438c:	e009      	b.n	80043a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004394:	e005      	b.n	80043a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80043a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80e7 	beq.w	8004578 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	4a19      	ldr	r2, [pc, #100]	; (8004414 <UART_SetConfig+0x930>)
 80043b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80043bc:	005a      	lsls	r2, r3, #1
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	441a      	add	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	2b0f      	cmp	r3, #15
 80043d4:	d916      	bls.n	8004404 <UART_SetConfig+0x920>
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043dc:	d212      	bcs.n	8004404 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f023 030f 	bic.w	r3, r3, #15
 80043e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043f6:	4313      	orrs	r3, r2
 80043f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	e0b9      	b.n	8004578 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800440a:	e0b5      	b.n	8004578 <UART_SetConfig+0xa94>
 800440c:	03d09000 	.word	0x03d09000
 8004410:	003d0900 	.word	0x003d0900
 8004414:	08005494 	.word	0x08005494
 8004418:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800441c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004420:	2b20      	cmp	r3, #32
 8004422:	dc49      	bgt.n	80044b8 <UART_SetConfig+0x9d4>
 8004424:	2b00      	cmp	r3, #0
 8004426:	db7c      	blt.n	8004522 <UART_SetConfig+0xa3e>
 8004428:	2b20      	cmp	r3, #32
 800442a:	d87a      	bhi.n	8004522 <UART_SetConfig+0xa3e>
 800442c:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <UART_SetConfig+0x950>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	080044bf 	.word	0x080044bf
 8004438:	080044c7 	.word	0x080044c7
 800443c:	08004523 	.word	0x08004523
 8004440:	08004523 	.word	0x08004523
 8004444:	080044cf 	.word	0x080044cf
 8004448:	08004523 	.word	0x08004523
 800444c:	08004523 	.word	0x08004523
 8004450:	08004523 	.word	0x08004523
 8004454:	080044df 	.word	0x080044df
 8004458:	08004523 	.word	0x08004523
 800445c:	08004523 	.word	0x08004523
 8004460:	08004523 	.word	0x08004523
 8004464:	08004523 	.word	0x08004523
 8004468:	08004523 	.word	0x08004523
 800446c:	08004523 	.word	0x08004523
 8004470:	08004523 	.word	0x08004523
 8004474:	080044ef 	.word	0x080044ef
 8004478:	08004523 	.word	0x08004523
 800447c:	08004523 	.word	0x08004523
 8004480:	08004523 	.word	0x08004523
 8004484:	08004523 	.word	0x08004523
 8004488:	08004523 	.word	0x08004523
 800448c:	08004523 	.word	0x08004523
 8004490:	08004523 	.word	0x08004523
 8004494:	08004523 	.word	0x08004523
 8004498:	08004523 	.word	0x08004523
 800449c:	08004523 	.word	0x08004523
 80044a0:	08004523 	.word	0x08004523
 80044a4:	08004523 	.word	0x08004523
 80044a8:	08004523 	.word	0x08004523
 80044ac:	08004523 	.word	0x08004523
 80044b0:	08004523 	.word	0x08004523
 80044b4:	08004515 	.word	0x08004515
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d02e      	beq.n	800451a <UART_SetConfig+0xa36>
 80044bc:	e031      	b.n	8004522 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044be:	f7fd fe97 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 80044c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044c4:	e033      	b.n	800452e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c6:	f7fd fea9 	bl	800221c <HAL_RCC_GetPCLK2Freq>
 80044ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044cc:	e02f      	b.n	800452e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fe14 	bl	8003100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044dc:	e027      	b.n	800452e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044de:	f107 0318 	add.w	r3, r7, #24
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe ff60 	bl	80033a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044ec:	e01f      	b.n	800452e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044ee:	4b2d      	ldr	r3, [pc, #180]	; (80045a4 <UART_SetConfig+0xac0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80044fa:	4b2a      	ldr	r3, [pc, #168]	; (80045a4 <UART_SetConfig+0xac0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	08db      	lsrs	r3, r3, #3
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	4a28      	ldr	r2, [pc, #160]	; (80045a8 <UART_SetConfig+0xac4>)
 8004506:	fa22 f303 	lsr.w	r3, r2, r3
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800450c:	e00f      	b.n	800452e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800450e:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <UART_SetConfig+0xac4>)
 8004510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004512:	e00c      	b.n	800452e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <UART_SetConfig+0xac8>)
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004518:	e009      	b.n	800452e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800451a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004520:	e005      	b.n	800452e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800452c:	bf00      	nop
    }

    if (pclk != 0U)
 800452e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d021      	beq.n	8004578 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <UART_SetConfig+0xacc>)
 800453a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800453e:	461a      	mov	r2, r3
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	fbb3 f2f2 	udiv	r2, r3, r2
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	441a      	add	r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	fbb2 f3f3 	udiv	r3, r2, r3
 8004556:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	2b0f      	cmp	r3, #15
 800455c:	d909      	bls.n	8004572 <UART_SetConfig+0xa8e>
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004564:	d205      	bcs.n	8004572 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	b29a      	uxth	r2, r3
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60da      	str	r2, [r3, #12]
 8004570:	e002      	b.n	8004578 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2201      	movs	r2, #1
 800457c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2201      	movs	r2, #1
 8004584:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2200      	movs	r2, #0
 800458c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004594:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004598:	4618      	mov	r0, r3
 800459a:	3748      	adds	r7, #72	; 0x48
 800459c:	46bd      	mov	sp, r7
 800459e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045a2:	bf00      	nop
 80045a4:	58024400 	.word	0x58024400
 80045a8:	03d09000 	.word	0x03d09000
 80045ac:	003d0900 	.word	0x003d0900
 80045b0:	08005494 	.word	0x08005494

080045b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01a      	beq.n	80046ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b2:	d10a      	bne.n	80046ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
  }
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004708:	f7fc fafe 	bl	8000d08 <HAL_GetTick>
 800470c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b08      	cmp	r3, #8
 800471a:	d10e      	bne.n	800473a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800471c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f82f 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e025      	b.n	8004786 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b04      	cmp	r3, #4
 8004746:	d10e      	bne.n	8004766 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f819 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e00f      	b.n	8004786 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b09c      	sub	sp, #112	; 0x70
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	4613      	mov	r3, r2
 800479c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479e:	e0a9      	b.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	f000 80a5 	beq.w	80048f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047aa:	f7fc faad 	bl	8000d08 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80047ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d140      	bne.n	8004842 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047d4:	667b      	str	r3, [r7, #100]	; 0x64
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e6      	bne.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3308      	adds	r3, #8
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	663b      	str	r3, [r7, #96]	; 0x60
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3308      	adds	r3, #8
 8004810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004812:	64ba      	str	r2, [r7, #72]	; 0x48
 8004814:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e5      	bne.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e069      	b.n	8004916 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d051      	beq.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485e:	d149      	bne.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004868:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800487e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004888:	637b      	str	r3, [r7, #52]	; 0x34
 800488a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800488e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e6      	bne.n	800486a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3308      	adds	r3, #8
 80048a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	613b      	str	r3, [r7, #16]
   return(result);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3308      	adds	r3, #8
 80048ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048bc:	623a      	str	r2, [r7, #32]
 80048be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	6a3a      	ldr	r2, [r7, #32]
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e5      	bne.n	800489c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e010      	b.n	8004916 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4013      	ands	r3, r2
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	429a      	cmp	r2, r3
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	429a      	cmp	r2, r3
 8004910:	f43f af46 	beq.w	80047a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3770      	adds	r7, #112	; 0x70
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_UARTEx_DisableFifoMode+0x16>
 8004930:	2302      	movs	r3, #2
 8004932:	e027      	b.n	8004984 <HAL_UARTEx_DisableFifoMode+0x66>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2224      	movs	r2, #36	; 0x24
 8004940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004962:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e02d      	b.n	8004a04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2224      	movs	r2, #36	; 0x24
 80049b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f84f 	bl	8004a88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e02d      	b.n	8004a80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2224      	movs	r2, #36	; 0x24
 8004a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f811 	bl	8004a88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d108      	bne.n	8004aaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004aa8:	e031      	b.n	8004b0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004aaa:	2310      	movs	r3, #16
 8004aac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004aae:	2310      	movs	r3, #16
 8004ab0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	0e5b      	lsrs	r3, r3, #25
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	0f5b      	lsrs	r3, r3, #29
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ad2:	7bbb      	ldrb	r3, [r7, #14]
 8004ad4:	7b3a      	ldrb	r2, [r7, #12]
 8004ad6:	4911      	ldr	r1, [pc, #68]	; (8004b1c <UARTEx_SetNbDataToProcess+0x94>)
 8004ad8:	5c8a      	ldrb	r2, [r1, r2]
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ade:	7b3a      	ldrb	r2, [r7, #12]
 8004ae0:	490f      	ldr	r1, [pc, #60]	; (8004b20 <UARTEx_SetNbDataToProcess+0x98>)
 8004ae2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ae4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	7b7a      	ldrb	r2, [r7, #13]
 8004af4:	4909      	ldr	r1, [pc, #36]	; (8004b1c <UARTEx_SetNbDataToProcess+0x94>)
 8004af6:	5c8a      	ldrb	r2, [r1, r2]
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004afc:	7b7a      	ldrb	r2, [r7, #13]
 8004afe:	4908      	ldr	r1, [pc, #32]	; (8004b20 <UARTEx_SetNbDataToProcess+0x98>)
 8004b00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b02:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b0e:	bf00      	nop
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	080054ac 	.word	0x080054ac
 8004b20:	080054b4 	.word	0x080054b4

08004b24 <__errno>:
 8004b24:	4b01      	ldr	r3, [pc, #4]	; (8004b2c <__errno+0x8>)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	24000010 	.word	0x24000010

08004b30 <__libc_init_array>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	4d0d      	ldr	r5, [pc, #52]	; (8004b68 <__libc_init_array+0x38>)
 8004b34:	4c0d      	ldr	r4, [pc, #52]	; (8004b6c <__libc_init_array+0x3c>)
 8004b36:	1b64      	subs	r4, r4, r5
 8004b38:	10a4      	asrs	r4, r4, #2
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	42a6      	cmp	r6, r4
 8004b3e:	d109      	bne.n	8004b54 <__libc_init_array+0x24>
 8004b40:	4d0b      	ldr	r5, [pc, #44]	; (8004b70 <__libc_init_array+0x40>)
 8004b42:	4c0c      	ldr	r4, [pc, #48]	; (8004b74 <__libc_init_array+0x44>)
 8004b44:	f000 fc8e 	bl	8005464 <_init>
 8004b48:	1b64      	subs	r4, r4, r5
 8004b4a:	10a4      	asrs	r4, r4, #2
 8004b4c:	2600      	movs	r6, #0
 8004b4e:	42a6      	cmp	r6, r4
 8004b50:	d105      	bne.n	8004b5e <__libc_init_array+0x2e>
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b58:	4798      	blx	r3
 8004b5a:	3601      	adds	r6, #1
 8004b5c:	e7ee      	b.n	8004b3c <__libc_init_array+0xc>
 8004b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b62:	4798      	blx	r3
 8004b64:	3601      	adds	r6, #1
 8004b66:	e7f2      	b.n	8004b4e <__libc_init_array+0x1e>
 8004b68:	080054f8 	.word	0x080054f8
 8004b6c:	080054f8 	.word	0x080054f8
 8004b70:	080054f8 	.word	0x080054f8
 8004b74:	080054fc 	.word	0x080054fc

08004b78 <memset>:
 8004b78:	4402      	add	r2, r0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d100      	bne.n	8004b82 <memset+0xa>
 8004b80:	4770      	bx	lr
 8004b82:	f803 1b01 	strb.w	r1, [r3], #1
 8004b86:	e7f9      	b.n	8004b7c <memset+0x4>

08004b88 <siprintf>:
 8004b88:	b40e      	push	{r1, r2, r3}
 8004b8a:	b500      	push	{lr}
 8004b8c:	b09c      	sub	sp, #112	; 0x70
 8004b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b90:	9002      	str	r0, [sp, #8]
 8004b92:	9006      	str	r0, [sp, #24]
 8004b94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b98:	4809      	ldr	r0, [pc, #36]	; (8004bc0 <siprintf+0x38>)
 8004b9a:	9107      	str	r1, [sp, #28]
 8004b9c:	9104      	str	r1, [sp, #16]
 8004b9e:	4909      	ldr	r1, [pc, #36]	; (8004bc4 <siprintf+0x3c>)
 8004ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba4:	9105      	str	r1, [sp, #20]
 8004ba6:	6800      	ldr	r0, [r0, #0]
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	a902      	add	r1, sp, #8
 8004bac:	f000 f868 	bl	8004c80 <_svfiprintf_r>
 8004bb0:	9b02      	ldr	r3, [sp, #8]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	b01c      	add	sp, #112	; 0x70
 8004bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bbc:	b003      	add	sp, #12
 8004bbe:	4770      	bx	lr
 8004bc0:	24000010 	.word	0x24000010
 8004bc4:	ffff0208 	.word	0xffff0208

08004bc8 <__ssputs_r>:
 8004bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	688e      	ldr	r6, [r1, #8]
 8004bce:	429e      	cmp	r6, r3
 8004bd0:	4682      	mov	sl, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4690      	mov	r8, r2
 8004bd6:	461f      	mov	r7, r3
 8004bd8:	d838      	bhi.n	8004c4c <__ssputs_r+0x84>
 8004bda:	898a      	ldrh	r2, [r1, #12]
 8004bdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004be0:	d032      	beq.n	8004c48 <__ssputs_r+0x80>
 8004be2:	6825      	ldr	r5, [r4, #0]
 8004be4:	6909      	ldr	r1, [r1, #16]
 8004be6:	eba5 0901 	sub.w	r9, r5, r1
 8004bea:	6965      	ldr	r5, [r4, #20]
 8004bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	444b      	add	r3, r9
 8004bf8:	106d      	asrs	r5, r5, #1
 8004bfa:	429d      	cmp	r5, r3
 8004bfc:	bf38      	it	cc
 8004bfe:	461d      	movcc	r5, r3
 8004c00:	0553      	lsls	r3, r2, #21
 8004c02:	d531      	bpl.n	8004c68 <__ssputs_r+0xa0>
 8004c04:	4629      	mov	r1, r5
 8004c06:	f000 fb63 	bl	80052d0 <_malloc_r>
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	b950      	cbnz	r0, 8004c24 <__ssputs_r+0x5c>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	f8ca 3000 	str.w	r3, [sl]
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	6921      	ldr	r1, [r4, #16]
 8004c26:	464a      	mov	r2, r9
 8004c28:	f000 fabe 	bl	80051a8 <memcpy>
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c36:	81a3      	strh	r3, [r4, #12]
 8004c38:	6126      	str	r6, [r4, #16]
 8004c3a:	6165      	str	r5, [r4, #20]
 8004c3c:	444e      	add	r6, r9
 8004c3e:	eba5 0509 	sub.w	r5, r5, r9
 8004c42:	6026      	str	r6, [r4, #0]
 8004c44:	60a5      	str	r5, [r4, #8]
 8004c46:	463e      	mov	r6, r7
 8004c48:	42be      	cmp	r6, r7
 8004c4a:	d900      	bls.n	8004c4e <__ssputs_r+0x86>
 8004c4c:	463e      	mov	r6, r7
 8004c4e:	6820      	ldr	r0, [r4, #0]
 8004c50:	4632      	mov	r2, r6
 8004c52:	4641      	mov	r1, r8
 8004c54:	f000 fab6 	bl	80051c4 <memmove>
 8004c58:	68a3      	ldr	r3, [r4, #8]
 8004c5a:	1b9b      	subs	r3, r3, r6
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	4433      	add	r3, r6
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	2000      	movs	r0, #0
 8004c66:	e7db      	b.n	8004c20 <__ssputs_r+0x58>
 8004c68:	462a      	mov	r2, r5
 8004c6a:	f000 fba5 	bl	80053b8 <_realloc_r>
 8004c6e:	4606      	mov	r6, r0
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d1e1      	bne.n	8004c38 <__ssputs_r+0x70>
 8004c74:	6921      	ldr	r1, [r4, #16]
 8004c76:	4650      	mov	r0, sl
 8004c78:	f000 fabe 	bl	80051f8 <_free_r>
 8004c7c:	e7c7      	b.n	8004c0e <__ssputs_r+0x46>
	...

08004c80 <_svfiprintf_r>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	4698      	mov	r8, r3
 8004c86:	898b      	ldrh	r3, [r1, #12]
 8004c88:	061b      	lsls	r3, r3, #24
 8004c8a:	b09d      	sub	sp, #116	; 0x74
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	460d      	mov	r5, r1
 8004c90:	4614      	mov	r4, r2
 8004c92:	d50e      	bpl.n	8004cb2 <_svfiprintf_r+0x32>
 8004c94:	690b      	ldr	r3, [r1, #16]
 8004c96:	b963      	cbnz	r3, 8004cb2 <_svfiprintf_r+0x32>
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	f000 fb19 	bl	80052d0 <_malloc_r>
 8004c9e:	6028      	str	r0, [r5, #0]
 8004ca0:	6128      	str	r0, [r5, #16]
 8004ca2:	b920      	cbnz	r0, 8004cae <_svfiprintf_r+0x2e>
 8004ca4:	230c      	movs	r3, #12
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cac:	e0d1      	b.n	8004e52 <_svfiprintf_r+0x1d2>
 8004cae:	2340      	movs	r3, #64	; 0x40
 8004cb0:	616b      	str	r3, [r5, #20]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cc0:	2330      	movs	r3, #48	; 0x30
 8004cc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e6c <_svfiprintf_r+0x1ec>
 8004cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cca:	f04f 0901 	mov.w	r9, #1
 8004cce:	4623      	mov	r3, r4
 8004cd0:	469a      	mov	sl, r3
 8004cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd6:	b10a      	cbz	r2, 8004cdc <_svfiprintf_r+0x5c>
 8004cd8:	2a25      	cmp	r2, #37	; 0x25
 8004cda:	d1f9      	bne.n	8004cd0 <_svfiprintf_r+0x50>
 8004cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ce0:	d00b      	beq.n	8004cfa <_svfiprintf_r+0x7a>
 8004ce2:	465b      	mov	r3, fp
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f7ff ff6d 	bl	8004bc8 <__ssputs_r>
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f000 80aa 	beq.w	8004e48 <_svfiprintf_r+0x1c8>
 8004cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf6:	445a      	add	r2, fp
 8004cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8004cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80a2 	beq.w	8004e48 <_svfiprintf_r+0x1c8>
 8004d04:	2300      	movs	r3, #0
 8004d06:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d0e:	f10a 0a01 	add.w	sl, sl, #1
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	9307      	str	r3, [sp, #28]
 8004d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d1c:	4654      	mov	r4, sl
 8004d1e:	2205      	movs	r2, #5
 8004d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d24:	4851      	ldr	r0, [pc, #324]	; (8004e6c <_svfiprintf_r+0x1ec>)
 8004d26:	f7fb fadb 	bl	80002e0 <memchr>
 8004d2a:	9a04      	ldr	r2, [sp, #16]
 8004d2c:	b9d8      	cbnz	r0, 8004d66 <_svfiprintf_r+0xe6>
 8004d2e:	06d0      	lsls	r0, r2, #27
 8004d30:	bf44      	itt	mi
 8004d32:	2320      	movmi	r3, #32
 8004d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d38:	0711      	lsls	r1, r2, #28
 8004d3a:	bf44      	itt	mi
 8004d3c:	232b      	movmi	r3, #43	; 0x2b
 8004d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d42:	f89a 3000 	ldrb.w	r3, [sl]
 8004d46:	2b2a      	cmp	r3, #42	; 0x2a
 8004d48:	d015      	beq.n	8004d76 <_svfiprintf_r+0xf6>
 8004d4a:	9a07      	ldr	r2, [sp, #28]
 8004d4c:	4654      	mov	r4, sl
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f04f 0c0a 	mov.w	ip, #10
 8004d54:	4621      	mov	r1, r4
 8004d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d5a:	3b30      	subs	r3, #48	; 0x30
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	d94e      	bls.n	8004dfe <_svfiprintf_r+0x17e>
 8004d60:	b1b0      	cbz	r0, 8004d90 <_svfiprintf_r+0x110>
 8004d62:	9207      	str	r2, [sp, #28]
 8004d64:	e014      	b.n	8004d90 <_svfiprintf_r+0x110>
 8004d66:	eba0 0308 	sub.w	r3, r0, r8
 8004d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	9304      	str	r3, [sp, #16]
 8004d72:	46a2      	mov	sl, r4
 8004d74:	e7d2      	b.n	8004d1c <_svfiprintf_r+0x9c>
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	1d19      	adds	r1, r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	9103      	str	r1, [sp, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfbb      	ittet	lt
 8004d82:	425b      	neglt	r3, r3
 8004d84:	f042 0202 	orrlt.w	r2, r2, #2
 8004d88:	9307      	strge	r3, [sp, #28]
 8004d8a:	9307      	strlt	r3, [sp, #28]
 8004d8c:	bfb8      	it	lt
 8004d8e:	9204      	strlt	r2, [sp, #16]
 8004d90:	7823      	ldrb	r3, [r4, #0]
 8004d92:	2b2e      	cmp	r3, #46	; 0x2e
 8004d94:	d10c      	bne.n	8004db0 <_svfiprintf_r+0x130>
 8004d96:	7863      	ldrb	r3, [r4, #1]
 8004d98:	2b2a      	cmp	r3, #42	; 0x2a
 8004d9a:	d135      	bne.n	8004e08 <_svfiprintf_r+0x188>
 8004d9c:	9b03      	ldr	r3, [sp, #12]
 8004d9e:	1d1a      	adds	r2, r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	9203      	str	r2, [sp, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bfb8      	it	lt
 8004da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dac:	3402      	adds	r4, #2
 8004dae:	9305      	str	r3, [sp, #20]
 8004db0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e7c <_svfiprintf_r+0x1fc>
 8004db4:	7821      	ldrb	r1, [r4, #0]
 8004db6:	2203      	movs	r2, #3
 8004db8:	4650      	mov	r0, sl
 8004dba:	f7fb fa91 	bl	80002e0 <memchr>
 8004dbe:	b140      	cbz	r0, 8004dd2 <_svfiprintf_r+0x152>
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	eba0 000a 	sub.w	r0, r0, sl
 8004dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8004dca:	9b04      	ldr	r3, [sp, #16]
 8004dcc:	4303      	orrs	r3, r0
 8004dce:	3401      	adds	r4, #1
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd6:	4826      	ldr	r0, [pc, #152]	; (8004e70 <_svfiprintf_r+0x1f0>)
 8004dd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ddc:	2206      	movs	r2, #6
 8004dde:	f7fb fa7f 	bl	80002e0 <memchr>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d038      	beq.n	8004e58 <_svfiprintf_r+0x1d8>
 8004de6:	4b23      	ldr	r3, [pc, #140]	; (8004e74 <_svfiprintf_r+0x1f4>)
 8004de8:	bb1b      	cbnz	r3, 8004e32 <_svfiprintf_r+0x1b2>
 8004dea:	9b03      	ldr	r3, [sp, #12]
 8004dec:	3307      	adds	r3, #7
 8004dee:	f023 0307 	bic.w	r3, r3, #7
 8004df2:	3308      	adds	r3, #8
 8004df4:	9303      	str	r3, [sp, #12]
 8004df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df8:	4433      	add	r3, r6
 8004dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfc:	e767      	b.n	8004cce <_svfiprintf_r+0x4e>
 8004dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e02:	460c      	mov	r4, r1
 8004e04:	2001      	movs	r0, #1
 8004e06:	e7a5      	b.n	8004d54 <_svfiprintf_r+0xd4>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	3401      	adds	r4, #1
 8004e0c:	9305      	str	r3, [sp, #20]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	f04f 0c0a 	mov.w	ip, #10
 8004e14:	4620      	mov	r0, r4
 8004e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e1a:	3a30      	subs	r2, #48	; 0x30
 8004e1c:	2a09      	cmp	r2, #9
 8004e1e:	d903      	bls.n	8004e28 <_svfiprintf_r+0x1a8>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0c5      	beq.n	8004db0 <_svfiprintf_r+0x130>
 8004e24:	9105      	str	r1, [sp, #20]
 8004e26:	e7c3      	b.n	8004db0 <_svfiprintf_r+0x130>
 8004e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e7f0      	b.n	8004e14 <_svfiprintf_r+0x194>
 8004e32:	ab03      	add	r3, sp, #12
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	462a      	mov	r2, r5
 8004e38:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <_svfiprintf_r+0x1f8>)
 8004e3a:	a904      	add	r1, sp, #16
 8004e3c:	4638      	mov	r0, r7
 8004e3e:	f3af 8000 	nop.w
 8004e42:	1c42      	adds	r2, r0, #1
 8004e44:	4606      	mov	r6, r0
 8004e46:	d1d6      	bne.n	8004df6 <_svfiprintf_r+0x176>
 8004e48:	89ab      	ldrh	r3, [r5, #12]
 8004e4a:	065b      	lsls	r3, r3, #25
 8004e4c:	f53f af2c 	bmi.w	8004ca8 <_svfiprintf_r+0x28>
 8004e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e52:	b01d      	add	sp, #116	; 0x74
 8004e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e58:	ab03      	add	r3, sp, #12
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	462a      	mov	r2, r5
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <_svfiprintf_r+0x1f8>)
 8004e60:	a904      	add	r1, sp, #16
 8004e62:	4638      	mov	r0, r7
 8004e64:	f000 f87a 	bl	8004f5c <_printf_i>
 8004e68:	e7eb      	b.n	8004e42 <_svfiprintf_r+0x1c2>
 8004e6a:	bf00      	nop
 8004e6c:	080054bc 	.word	0x080054bc
 8004e70:	080054c6 	.word	0x080054c6
 8004e74:	00000000 	.word	0x00000000
 8004e78:	08004bc9 	.word	0x08004bc9
 8004e7c:	080054c2 	.word	0x080054c2

08004e80 <_printf_common>:
 8004e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e84:	4616      	mov	r6, r2
 8004e86:	4699      	mov	r9, r3
 8004e88:	688a      	ldr	r2, [r1, #8]
 8004e8a:	690b      	ldr	r3, [r1, #16]
 8004e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e90:	4293      	cmp	r3, r2
 8004e92:	bfb8      	it	lt
 8004e94:	4613      	movlt	r3, r2
 8004e96:	6033      	str	r3, [r6, #0]
 8004e98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	b10a      	cbz	r2, 8004ea6 <_printf_common+0x26>
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	0699      	lsls	r1, r3, #26
 8004eaa:	bf42      	ittt	mi
 8004eac:	6833      	ldrmi	r3, [r6, #0]
 8004eae:	3302      	addmi	r3, #2
 8004eb0:	6033      	strmi	r3, [r6, #0]
 8004eb2:	6825      	ldr	r5, [r4, #0]
 8004eb4:	f015 0506 	ands.w	r5, r5, #6
 8004eb8:	d106      	bne.n	8004ec8 <_printf_common+0x48>
 8004eba:	f104 0a19 	add.w	sl, r4, #25
 8004ebe:	68e3      	ldr	r3, [r4, #12]
 8004ec0:	6832      	ldr	r2, [r6, #0]
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	42ab      	cmp	r3, r5
 8004ec6:	dc26      	bgt.n	8004f16 <_printf_common+0x96>
 8004ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ecc:	1e13      	subs	r3, r2, #0
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	bf18      	it	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	0692      	lsls	r2, r2, #26
 8004ed6:	d42b      	bmi.n	8004f30 <_printf_common+0xb0>
 8004ed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004edc:	4649      	mov	r1, r9
 8004ede:	4638      	mov	r0, r7
 8004ee0:	47c0      	blx	r8
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d01e      	beq.n	8004f24 <_printf_common+0xa4>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	68e5      	ldr	r5, [r4, #12]
 8004eea:	6832      	ldr	r2, [r6, #0]
 8004eec:	f003 0306 	and.w	r3, r3, #6
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	bf08      	it	eq
 8004ef4:	1aad      	subeq	r5, r5, r2
 8004ef6:	68a3      	ldr	r3, [r4, #8]
 8004ef8:	6922      	ldr	r2, [r4, #16]
 8004efa:	bf0c      	ite	eq
 8004efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f00:	2500      	movne	r5, #0
 8004f02:	4293      	cmp	r3, r2
 8004f04:	bfc4      	itt	gt
 8004f06:	1a9b      	subgt	r3, r3, r2
 8004f08:	18ed      	addgt	r5, r5, r3
 8004f0a:	2600      	movs	r6, #0
 8004f0c:	341a      	adds	r4, #26
 8004f0e:	42b5      	cmp	r5, r6
 8004f10:	d11a      	bne.n	8004f48 <_printf_common+0xc8>
 8004f12:	2000      	movs	r0, #0
 8004f14:	e008      	b.n	8004f28 <_printf_common+0xa8>
 8004f16:	2301      	movs	r3, #1
 8004f18:	4652      	mov	r2, sl
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	47c0      	blx	r8
 8004f20:	3001      	adds	r0, #1
 8004f22:	d103      	bne.n	8004f2c <_printf_common+0xac>
 8004f24:	f04f 30ff 	mov.w	r0, #4294967295
 8004f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2c:	3501      	adds	r5, #1
 8004f2e:	e7c6      	b.n	8004ebe <_printf_common+0x3e>
 8004f30:	18e1      	adds	r1, r4, r3
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	2030      	movs	r0, #48	; 0x30
 8004f36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f3a:	4422      	add	r2, r4
 8004f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f44:	3302      	adds	r3, #2
 8004f46:	e7c7      	b.n	8004ed8 <_printf_common+0x58>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	4638      	mov	r0, r7
 8004f50:	47c0      	blx	r8
 8004f52:	3001      	adds	r0, #1
 8004f54:	d0e6      	beq.n	8004f24 <_printf_common+0xa4>
 8004f56:	3601      	adds	r6, #1
 8004f58:	e7d9      	b.n	8004f0e <_printf_common+0x8e>
	...

08004f5c <_printf_i>:
 8004f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	7e0f      	ldrb	r7, [r1, #24]
 8004f62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f64:	2f78      	cmp	r7, #120	; 0x78
 8004f66:	4691      	mov	r9, r2
 8004f68:	4680      	mov	r8, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	469a      	mov	sl, r3
 8004f6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f72:	d807      	bhi.n	8004f84 <_printf_i+0x28>
 8004f74:	2f62      	cmp	r7, #98	; 0x62
 8004f76:	d80a      	bhi.n	8004f8e <_printf_i+0x32>
 8004f78:	2f00      	cmp	r7, #0
 8004f7a:	f000 80d8 	beq.w	800512e <_printf_i+0x1d2>
 8004f7e:	2f58      	cmp	r7, #88	; 0x58
 8004f80:	f000 80a3 	beq.w	80050ca <_printf_i+0x16e>
 8004f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f8c:	e03a      	b.n	8005004 <_printf_i+0xa8>
 8004f8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f92:	2b15      	cmp	r3, #21
 8004f94:	d8f6      	bhi.n	8004f84 <_printf_i+0x28>
 8004f96:	a101      	add	r1, pc, #4	; (adr r1, 8004f9c <_printf_i+0x40>)
 8004f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f9c:	08004ff5 	.word	0x08004ff5
 8004fa0:	08005009 	.word	0x08005009
 8004fa4:	08004f85 	.word	0x08004f85
 8004fa8:	08004f85 	.word	0x08004f85
 8004fac:	08004f85 	.word	0x08004f85
 8004fb0:	08004f85 	.word	0x08004f85
 8004fb4:	08005009 	.word	0x08005009
 8004fb8:	08004f85 	.word	0x08004f85
 8004fbc:	08004f85 	.word	0x08004f85
 8004fc0:	08004f85 	.word	0x08004f85
 8004fc4:	08004f85 	.word	0x08004f85
 8004fc8:	08005115 	.word	0x08005115
 8004fcc:	08005039 	.word	0x08005039
 8004fd0:	080050f7 	.word	0x080050f7
 8004fd4:	08004f85 	.word	0x08004f85
 8004fd8:	08004f85 	.word	0x08004f85
 8004fdc:	08005137 	.word	0x08005137
 8004fe0:	08004f85 	.word	0x08004f85
 8004fe4:	08005039 	.word	0x08005039
 8004fe8:	08004f85 	.word	0x08004f85
 8004fec:	08004f85 	.word	0x08004f85
 8004ff0:	080050ff 	.word	0x080050ff
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	1d1a      	adds	r2, r3, #4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	602a      	str	r2, [r5, #0]
 8004ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005004:	2301      	movs	r3, #1
 8005006:	e0a3      	b.n	8005150 <_printf_i+0x1f4>
 8005008:	6820      	ldr	r0, [r4, #0]
 800500a:	6829      	ldr	r1, [r5, #0]
 800500c:	0606      	lsls	r6, r0, #24
 800500e:	f101 0304 	add.w	r3, r1, #4
 8005012:	d50a      	bpl.n	800502a <_printf_i+0xce>
 8005014:	680e      	ldr	r6, [r1, #0]
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	2e00      	cmp	r6, #0
 800501a:	da03      	bge.n	8005024 <_printf_i+0xc8>
 800501c:	232d      	movs	r3, #45	; 0x2d
 800501e:	4276      	negs	r6, r6
 8005020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005024:	485e      	ldr	r0, [pc, #376]	; (80051a0 <_printf_i+0x244>)
 8005026:	230a      	movs	r3, #10
 8005028:	e019      	b.n	800505e <_printf_i+0x102>
 800502a:	680e      	ldr	r6, [r1, #0]
 800502c:	602b      	str	r3, [r5, #0]
 800502e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005032:	bf18      	it	ne
 8005034:	b236      	sxthne	r6, r6
 8005036:	e7ef      	b.n	8005018 <_printf_i+0xbc>
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	6820      	ldr	r0, [r4, #0]
 800503c:	1d19      	adds	r1, r3, #4
 800503e:	6029      	str	r1, [r5, #0]
 8005040:	0601      	lsls	r1, r0, #24
 8005042:	d501      	bpl.n	8005048 <_printf_i+0xec>
 8005044:	681e      	ldr	r6, [r3, #0]
 8005046:	e002      	b.n	800504e <_printf_i+0xf2>
 8005048:	0646      	lsls	r6, r0, #25
 800504a:	d5fb      	bpl.n	8005044 <_printf_i+0xe8>
 800504c:	881e      	ldrh	r6, [r3, #0]
 800504e:	4854      	ldr	r0, [pc, #336]	; (80051a0 <_printf_i+0x244>)
 8005050:	2f6f      	cmp	r7, #111	; 0x6f
 8005052:	bf0c      	ite	eq
 8005054:	2308      	moveq	r3, #8
 8005056:	230a      	movne	r3, #10
 8005058:	2100      	movs	r1, #0
 800505a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800505e:	6865      	ldr	r5, [r4, #4]
 8005060:	60a5      	str	r5, [r4, #8]
 8005062:	2d00      	cmp	r5, #0
 8005064:	bfa2      	ittt	ge
 8005066:	6821      	ldrge	r1, [r4, #0]
 8005068:	f021 0104 	bicge.w	r1, r1, #4
 800506c:	6021      	strge	r1, [r4, #0]
 800506e:	b90e      	cbnz	r6, 8005074 <_printf_i+0x118>
 8005070:	2d00      	cmp	r5, #0
 8005072:	d04d      	beq.n	8005110 <_printf_i+0x1b4>
 8005074:	4615      	mov	r5, r2
 8005076:	fbb6 f1f3 	udiv	r1, r6, r3
 800507a:	fb03 6711 	mls	r7, r3, r1, r6
 800507e:	5dc7      	ldrb	r7, [r0, r7]
 8005080:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005084:	4637      	mov	r7, r6
 8005086:	42bb      	cmp	r3, r7
 8005088:	460e      	mov	r6, r1
 800508a:	d9f4      	bls.n	8005076 <_printf_i+0x11a>
 800508c:	2b08      	cmp	r3, #8
 800508e:	d10b      	bne.n	80050a8 <_printf_i+0x14c>
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	07de      	lsls	r6, r3, #31
 8005094:	d508      	bpl.n	80050a8 <_printf_i+0x14c>
 8005096:	6923      	ldr	r3, [r4, #16]
 8005098:	6861      	ldr	r1, [r4, #4]
 800509a:	4299      	cmp	r1, r3
 800509c:	bfde      	ittt	le
 800509e:	2330      	movle	r3, #48	; 0x30
 80050a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050a8:	1b52      	subs	r2, r2, r5
 80050aa:	6122      	str	r2, [r4, #16]
 80050ac:	f8cd a000 	str.w	sl, [sp]
 80050b0:	464b      	mov	r3, r9
 80050b2:	aa03      	add	r2, sp, #12
 80050b4:	4621      	mov	r1, r4
 80050b6:	4640      	mov	r0, r8
 80050b8:	f7ff fee2 	bl	8004e80 <_printf_common>
 80050bc:	3001      	adds	r0, #1
 80050be:	d14c      	bne.n	800515a <_printf_i+0x1fe>
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	b004      	add	sp, #16
 80050c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ca:	4835      	ldr	r0, [pc, #212]	; (80051a0 <_printf_i+0x244>)
 80050cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050d0:	6829      	ldr	r1, [r5, #0]
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80050d8:	6029      	str	r1, [r5, #0]
 80050da:	061d      	lsls	r5, r3, #24
 80050dc:	d514      	bpl.n	8005108 <_printf_i+0x1ac>
 80050de:	07df      	lsls	r7, r3, #31
 80050e0:	bf44      	itt	mi
 80050e2:	f043 0320 	orrmi.w	r3, r3, #32
 80050e6:	6023      	strmi	r3, [r4, #0]
 80050e8:	b91e      	cbnz	r6, 80050f2 <_printf_i+0x196>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	f023 0320 	bic.w	r3, r3, #32
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	2310      	movs	r3, #16
 80050f4:	e7b0      	b.n	8005058 <_printf_i+0xfc>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	f043 0320 	orr.w	r3, r3, #32
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	2378      	movs	r3, #120	; 0x78
 8005100:	4828      	ldr	r0, [pc, #160]	; (80051a4 <_printf_i+0x248>)
 8005102:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005106:	e7e3      	b.n	80050d0 <_printf_i+0x174>
 8005108:	0659      	lsls	r1, r3, #25
 800510a:	bf48      	it	mi
 800510c:	b2b6      	uxthmi	r6, r6
 800510e:	e7e6      	b.n	80050de <_printf_i+0x182>
 8005110:	4615      	mov	r5, r2
 8005112:	e7bb      	b.n	800508c <_printf_i+0x130>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	6826      	ldr	r6, [r4, #0]
 8005118:	6961      	ldr	r1, [r4, #20]
 800511a:	1d18      	adds	r0, r3, #4
 800511c:	6028      	str	r0, [r5, #0]
 800511e:	0635      	lsls	r5, r6, #24
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	d501      	bpl.n	8005128 <_printf_i+0x1cc>
 8005124:	6019      	str	r1, [r3, #0]
 8005126:	e002      	b.n	800512e <_printf_i+0x1d2>
 8005128:	0670      	lsls	r0, r6, #25
 800512a:	d5fb      	bpl.n	8005124 <_printf_i+0x1c8>
 800512c:	8019      	strh	r1, [r3, #0]
 800512e:	2300      	movs	r3, #0
 8005130:	6123      	str	r3, [r4, #16]
 8005132:	4615      	mov	r5, r2
 8005134:	e7ba      	b.n	80050ac <_printf_i+0x150>
 8005136:	682b      	ldr	r3, [r5, #0]
 8005138:	1d1a      	adds	r2, r3, #4
 800513a:	602a      	str	r2, [r5, #0]
 800513c:	681d      	ldr	r5, [r3, #0]
 800513e:	6862      	ldr	r2, [r4, #4]
 8005140:	2100      	movs	r1, #0
 8005142:	4628      	mov	r0, r5
 8005144:	f7fb f8cc 	bl	80002e0 <memchr>
 8005148:	b108      	cbz	r0, 800514e <_printf_i+0x1f2>
 800514a:	1b40      	subs	r0, r0, r5
 800514c:	6060      	str	r0, [r4, #4]
 800514e:	6863      	ldr	r3, [r4, #4]
 8005150:	6123      	str	r3, [r4, #16]
 8005152:	2300      	movs	r3, #0
 8005154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005158:	e7a8      	b.n	80050ac <_printf_i+0x150>
 800515a:	6923      	ldr	r3, [r4, #16]
 800515c:	462a      	mov	r2, r5
 800515e:	4649      	mov	r1, r9
 8005160:	4640      	mov	r0, r8
 8005162:	47d0      	blx	sl
 8005164:	3001      	adds	r0, #1
 8005166:	d0ab      	beq.n	80050c0 <_printf_i+0x164>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	079b      	lsls	r3, r3, #30
 800516c:	d413      	bmi.n	8005196 <_printf_i+0x23a>
 800516e:	68e0      	ldr	r0, [r4, #12]
 8005170:	9b03      	ldr	r3, [sp, #12]
 8005172:	4298      	cmp	r0, r3
 8005174:	bfb8      	it	lt
 8005176:	4618      	movlt	r0, r3
 8005178:	e7a4      	b.n	80050c4 <_printf_i+0x168>
 800517a:	2301      	movs	r3, #1
 800517c:	4632      	mov	r2, r6
 800517e:	4649      	mov	r1, r9
 8005180:	4640      	mov	r0, r8
 8005182:	47d0      	blx	sl
 8005184:	3001      	adds	r0, #1
 8005186:	d09b      	beq.n	80050c0 <_printf_i+0x164>
 8005188:	3501      	adds	r5, #1
 800518a:	68e3      	ldr	r3, [r4, #12]
 800518c:	9903      	ldr	r1, [sp, #12]
 800518e:	1a5b      	subs	r3, r3, r1
 8005190:	42ab      	cmp	r3, r5
 8005192:	dcf2      	bgt.n	800517a <_printf_i+0x21e>
 8005194:	e7eb      	b.n	800516e <_printf_i+0x212>
 8005196:	2500      	movs	r5, #0
 8005198:	f104 0619 	add.w	r6, r4, #25
 800519c:	e7f5      	b.n	800518a <_printf_i+0x22e>
 800519e:	bf00      	nop
 80051a0:	080054cd 	.word	0x080054cd
 80051a4:	080054de 	.word	0x080054de

080051a8 <memcpy>:
 80051a8:	440a      	add	r2, r1
 80051aa:	4291      	cmp	r1, r2
 80051ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80051b0:	d100      	bne.n	80051b4 <memcpy+0xc>
 80051b2:	4770      	bx	lr
 80051b4:	b510      	push	{r4, lr}
 80051b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051be:	4291      	cmp	r1, r2
 80051c0:	d1f9      	bne.n	80051b6 <memcpy+0xe>
 80051c2:	bd10      	pop	{r4, pc}

080051c4 <memmove>:
 80051c4:	4288      	cmp	r0, r1
 80051c6:	b510      	push	{r4, lr}
 80051c8:	eb01 0402 	add.w	r4, r1, r2
 80051cc:	d902      	bls.n	80051d4 <memmove+0x10>
 80051ce:	4284      	cmp	r4, r0
 80051d0:	4623      	mov	r3, r4
 80051d2:	d807      	bhi.n	80051e4 <memmove+0x20>
 80051d4:	1e43      	subs	r3, r0, #1
 80051d6:	42a1      	cmp	r1, r4
 80051d8:	d008      	beq.n	80051ec <memmove+0x28>
 80051da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051e2:	e7f8      	b.n	80051d6 <memmove+0x12>
 80051e4:	4402      	add	r2, r0
 80051e6:	4601      	mov	r1, r0
 80051e8:	428a      	cmp	r2, r1
 80051ea:	d100      	bne.n	80051ee <memmove+0x2a>
 80051ec:	bd10      	pop	{r4, pc}
 80051ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051f6:	e7f7      	b.n	80051e8 <memmove+0x24>

080051f8 <_free_r>:
 80051f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051fa:	2900      	cmp	r1, #0
 80051fc:	d044      	beq.n	8005288 <_free_r+0x90>
 80051fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005202:	9001      	str	r0, [sp, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f1a1 0404 	sub.w	r4, r1, #4
 800520a:	bfb8      	it	lt
 800520c:	18e4      	addlt	r4, r4, r3
 800520e:	f000 f913 	bl	8005438 <__malloc_lock>
 8005212:	4a1e      	ldr	r2, [pc, #120]	; (800528c <_free_r+0x94>)
 8005214:	9801      	ldr	r0, [sp, #4]
 8005216:	6813      	ldr	r3, [r2, #0]
 8005218:	b933      	cbnz	r3, 8005228 <_free_r+0x30>
 800521a:	6063      	str	r3, [r4, #4]
 800521c:	6014      	str	r4, [r2, #0]
 800521e:	b003      	add	sp, #12
 8005220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005224:	f000 b90e 	b.w	8005444 <__malloc_unlock>
 8005228:	42a3      	cmp	r3, r4
 800522a:	d908      	bls.n	800523e <_free_r+0x46>
 800522c:	6825      	ldr	r5, [r4, #0]
 800522e:	1961      	adds	r1, r4, r5
 8005230:	428b      	cmp	r3, r1
 8005232:	bf01      	itttt	eq
 8005234:	6819      	ldreq	r1, [r3, #0]
 8005236:	685b      	ldreq	r3, [r3, #4]
 8005238:	1949      	addeq	r1, r1, r5
 800523a:	6021      	streq	r1, [r4, #0]
 800523c:	e7ed      	b.n	800521a <_free_r+0x22>
 800523e:	461a      	mov	r2, r3
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	b10b      	cbz	r3, 8005248 <_free_r+0x50>
 8005244:	42a3      	cmp	r3, r4
 8005246:	d9fa      	bls.n	800523e <_free_r+0x46>
 8005248:	6811      	ldr	r1, [r2, #0]
 800524a:	1855      	adds	r5, r2, r1
 800524c:	42a5      	cmp	r5, r4
 800524e:	d10b      	bne.n	8005268 <_free_r+0x70>
 8005250:	6824      	ldr	r4, [r4, #0]
 8005252:	4421      	add	r1, r4
 8005254:	1854      	adds	r4, r2, r1
 8005256:	42a3      	cmp	r3, r4
 8005258:	6011      	str	r1, [r2, #0]
 800525a:	d1e0      	bne.n	800521e <_free_r+0x26>
 800525c:	681c      	ldr	r4, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	6053      	str	r3, [r2, #4]
 8005262:	4421      	add	r1, r4
 8005264:	6011      	str	r1, [r2, #0]
 8005266:	e7da      	b.n	800521e <_free_r+0x26>
 8005268:	d902      	bls.n	8005270 <_free_r+0x78>
 800526a:	230c      	movs	r3, #12
 800526c:	6003      	str	r3, [r0, #0]
 800526e:	e7d6      	b.n	800521e <_free_r+0x26>
 8005270:	6825      	ldr	r5, [r4, #0]
 8005272:	1961      	adds	r1, r4, r5
 8005274:	428b      	cmp	r3, r1
 8005276:	bf04      	itt	eq
 8005278:	6819      	ldreq	r1, [r3, #0]
 800527a:	685b      	ldreq	r3, [r3, #4]
 800527c:	6063      	str	r3, [r4, #4]
 800527e:	bf04      	itt	eq
 8005280:	1949      	addeq	r1, r1, r5
 8005282:	6021      	streq	r1, [r4, #0]
 8005284:	6054      	str	r4, [r2, #4]
 8005286:	e7ca      	b.n	800521e <_free_r+0x26>
 8005288:	b003      	add	sp, #12
 800528a:	bd30      	pop	{r4, r5, pc}
 800528c:	2400016c 	.word	0x2400016c

08005290 <sbrk_aligned>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	4e0e      	ldr	r6, [pc, #56]	; (80052cc <sbrk_aligned+0x3c>)
 8005294:	460c      	mov	r4, r1
 8005296:	6831      	ldr	r1, [r6, #0]
 8005298:	4605      	mov	r5, r0
 800529a:	b911      	cbnz	r1, 80052a2 <sbrk_aligned+0x12>
 800529c:	f000 f8bc 	bl	8005418 <_sbrk_r>
 80052a0:	6030      	str	r0, [r6, #0]
 80052a2:	4621      	mov	r1, r4
 80052a4:	4628      	mov	r0, r5
 80052a6:	f000 f8b7 	bl	8005418 <_sbrk_r>
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	d00a      	beq.n	80052c4 <sbrk_aligned+0x34>
 80052ae:	1cc4      	adds	r4, r0, #3
 80052b0:	f024 0403 	bic.w	r4, r4, #3
 80052b4:	42a0      	cmp	r0, r4
 80052b6:	d007      	beq.n	80052c8 <sbrk_aligned+0x38>
 80052b8:	1a21      	subs	r1, r4, r0
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 f8ac 	bl	8005418 <_sbrk_r>
 80052c0:	3001      	adds	r0, #1
 80052c2:	d101      	bne.n	80052c8 <sbrk_aligned+0x38>
 80052c4:	f04f 34ff 	mov.w	r4, #4294967295
 80052c8:	4620      	mov	r0, r4
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	24000170 	.word	0x24000170

080052d0 <_malloc_r>:
 80052d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d4:	1ccd      	adds	r5, r1, #3
 80052d6:	f025 0503 	bic.w	r5, r5, #3
 80052da:	3508      	adds	r5, #8
 80052dc:	2d0c      	cmp	r5, #12
 80052de:	bf38      	it	cc
 80052e0:	250c      	movcc	r5, #12
 80052e2:	2d00      	cmp	r5, #0
 80052e4:	4607      	mov	r7, r0
 80052e6:	db01      	blt.n	80052ec <_malloc_r+0x1c>
 80052e8:	42a9      	cmp	r1, r5
 80052ea:	d905      	bls.n	80052f8 <_malloc_r+0x28>
 80052ec:	230c      	movs	r3, #12
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	2600      	movs	r6, #0
 80052f2:	4630      	mov	r0, r6
 80052f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f8:	4e2e      	ldr	r6, [pc, #184]	; (80053b4 <_malloc_r+0xe4>)
 80052fa:	f000 f89d 	bl	8005438 <__malloc_lock>
 80052fe:	6833      	ldr	r3, [r6, #0]
 8005300:	461c      	mov	r4, r3
 8005302:	bb34      	cbnz	r4, 8005352 <_malloc_r+0x82>
 8005304:	4629      	mov	r1, r5
 8005306:	4638      	mov	r0, r7
 8005308:	f7ff ffc2 	bl	8005290 <sbrk_aligned>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	4604      	mov	r4, r0
 8005310:	d14d      	bne.n	80053ae <_malloc_r+0xde>
 8005312:	6834      	ldr	r4, [r6, #0]
 8005314:	4626      	mov	r6, r4
 8005316:	2e00      	cmp	r6, #0
 8005318:	d140      	bne.n	800539c <_malloc_r+0xcc>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	4631      	mov	r1, r6
 800531e:	4638      	mov	r0, r7
 8005320:	eb04 0803 	add.w	r8, r4, r3
 8005324:	f000 f878 	bl	8005418 <_sbrk_r>
 8005328:	4580      	cmp	r8, r0
 800532a:	d13a      	bne.n	80053a2 <_malloc_r+0xd2>
 800532c:	6821      	ldr	r1, [r4, #0]
 800532e:	3503      	adds	r5, #3
 8005330:	1a6d      	subs	r5, r5, r1
 8005332:	f025 0503 	bic.w	r5, r5, #3
 8005336:	3508      	adds	r5, #8
 8005338:	2d0c      	cmp	r5, #12
 800533a:	bf38      	it	cc
 800533c:	250c      	movcc	r5, #12
 800533e:	4629      	mov	r1, r5
 8005340:	4638      	mov	r0, r7
 8005342:	f7ff ffa5 	bl	8005290 <sbrk_aligned>
 8005346:	3001      	adds	r0, #1
 8005348:	d02b      	beq.n	80053a2 <_malloc_r+0xd2>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	442b      	add	r3, r5
 800534e:	6023      	str	r3, [r4, #0]
 8005350:	e00e      	b.n	8005370 <_malloc_r+0xa0>
 8005352:	6822      	ldr	r2, [r4, #0]
 8005354:	1b52      	subs	r2, r2, r5
 8005356:	d41e      	bmi.n	8005396 <_malloc_r+0xc6>
 8005358:	2a0b      	cmp	r2, #11
 800535a:	d916      	bls.n	800538a <_malloc_r+0xba>
 800535c:	1961      	adds	r1, r4, r5
 800535e:	42a3      	cmp	r3, r4
 8005360:	6025      	str	r5, [r4, #0]
 8005362:	bf18      	it	ne
 8005364:	6059      	strne	r1, [r3, #4]
 8005366:	6863      	ldr	r3, [r4, #4]
 8005368:	bf08      	it	eq
 800536a:	6031      	streq	r1, [r6, #0]
 800536c:	5162      	str	r2, [r4, r5]
 800536e:	604b      	str	r3, [r1, #4]
 8005370:	4638      	mov	r0, r7
 8005372:	f104 060b 	add.w	r6, r4, #11
 8005376:	f000 f865 	bl	8005444 <__malloc_unlock>
 800537a:	f026 0607 	bic.w	r6, r6, #7
 800537e:	1d23      	adds	r3, r4, #4
 8005380:	1af2      	subs	r2, r6, r3
 8005382:	d0b6      	beq.n	80052f2 <_malloc_r+0x22>
 8005384:	1b9b      	subs	r3, r3, r6
 8005386:	50a3      	str	r3, [r4, r2]
 8005388:	e7b3      	b.n	80052f2 <_malloc_r+0x22>
 800538a:	6862      	ldr	r2, [r4, #4]
 800538c:	42a3      	cmp	r3, r4
 800538e:	bf0c      	ite	eq
 8005390:	6032      	streq	r2, [r6, #0]
 8005392:	605a      	strne	r2, [r3, #4]
 8005394:	e7ec      	b.n	8005370 <_malloc_r+0xa0>
 8005396:	4623      	mov	r3, r4
 8005398:	6864      	ldr	r4, [r4, #4]
 800539a:	e7b2      	b.n	8005302 <_malloc_r+0x32>
 800539c:	4634      	mov	r4, r6
 800539e:	6876      	ldr	r6, [r6, #4]
 80053a0:	e7b9      	b.n	8005316 <_malloc_r+0x46>
 80053a2:	230c      	movs	r3, #12
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	4638      	mov	r0, r7
 80053a8:	f000 f84c 	bl	8005444 <__malloc_unlock>
 80053ac:	e7a1      	b.n	80052f2 <_malloc_r+0x22>
 80053ae:	6025      	str	r5, [r4, #0]
 80053b0:	e7de      	b.n	8005370 <_malloc_r+0xa0>
 80053b2:	bf00      	nop
 80053b4:	2400016c 	.word	0x2400016c

080053b8 <_realloc_r>:
 80053b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053bc:	4680      	mov	r8, r0
 80053be:	4614      	mov	r4, r2
 80053c0:	460e      	mov	r6, r1
 80053c2:	b921      	cbnz	r1, 80053ce <_realloc_r+0x16>
 80053c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053c8:	4611      	mov	r1, r2
 80053ca:	f7ff bf81 	b.w	80052d0 <_malloc_r>
 80053ce:	b92a      	cbnz	r2, 80053dc <_realloc_r+0x24>
 80053d0:	f7ff ff12 	bl	80051f8 <_free_r>
 80053d4:	4625      	mov	r5, r4
 80053d6:	4628      	mov	r0, r5
 80053d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053dc:	f000 f838 	bl	8005450 <_malloc_usable_size_r>
 80053e0:	4284      	cmp	r4, r0
 80053e2:	4607      	mov	r7, r0
 80053e4:	d802      	bhi.n	80053ec <_realloc_r+0x34>
 80053e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053ea:	d812      	bhi.n	8005412 <_realloc_r+0x5a>
 80053ec:	4621      	mov	r1, r4
 80053ee:	4640      	mov	r0, r8
 80053f0:	f7ff ff6e 	bl	80052d0 <_malloc_r>
 80053f4:	4605      	mov	r5, r0
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d0ed      	beq.n	80053d6 <_realloc_r+0x1e>
 80053fa:	42bc      	cmp	r4, r7
 80053fc:	4622      	mov	r2, r4
 80053fe:	4631      	mov	r1, r6
 8005400:	bf28      	it	cs
 8005402:	463a      	movcs	r2, r7
 8005404:	f7ff fed0 	bl	80051a8 <memcpy>
 8005408:	4631      	mov	r1, r6
 800540a:	4640      	mov	r0, r8
 800540c:	f7ff fef4 	bl	80051f8 <_free_r>
 8005410:	e7e1      	b.n	80053d6 <_realloc_r+0x1e>
 8005412:	4635      	mov	r5, r6
 8005414:	e7df      	b.n	80053d6 <_realloc_r+0x1e>
	...

08005418 <_sbrk_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4d06      	ldr	r5, [pc, #24]	; (8005434 <_sbrk_r+0x1c>)
 800541c:	2300      	movs	r3, #0
 800541e:	4604      	mov	r4, r0
 8005420:	4608      	mov	r0, r1
 8005422:	602b      	str	r3, [r5, #0]
 8005424:	f7fb fb02 	bl	8000a2c <_sbrk>
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d102      	bne.n	8005432 <_sbrk_r+0x1a>
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	b103      	cbz	r3, 8005432 <_sbrk_r+0x1a>
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	bd38      	pop	{r3, r4, r5, pc}
 8005434:	24000174 	.word	0x24000174

08005438 <__malloc_lock>:
 8005438:	4801      	ldr	r0, [pc, #4]	; (8005440 <__malloc_lock+0x8>)
 800543a:	f000 b811 	b.w	8005460 <__retarget_lock_acquire_recursive>
 800543e:	bf00      	nop
 8005440:	24000178 	.word	0x24000178

08005444 <__malloc_unlock>:
 8005444:	4801      	ldr	r0, [pc, #4]	; (800544c <__malloc_unlock+0x8>)
 8005446:	f000 b80c 	b.w	8005462 <__retarget_lock_release_recursive>
 800544a:	bf00      	nop
 800544c:	24000178 	.word	0x24000178

08005450 <_malloc_usable_size_r>:
 8005450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005454:	1f18      	subs	r0, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	bfbc      	itt	lt
 800545a:	580b      	ldrlt	r3, [r1, r0]
 800545c:	18c0      	addlt	r0, r0, r3
 800545e:	4770      	bx	lr

08005460 <__retarget_lock_acquire_recursive>:
 8005460:	4770      	bx	lr

08005462 <__retarget_lock_release_recursive>:
 8005462:	4770      	bx	lr

08005464 <_init>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	bf00      	nop
 8005468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546a:	bc08      	pop	{r3}
 800546c:	469e      	mov	lr, r3
 800546e:	4770      	bx	lr

08005470 <_fini>:
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005472:	bf00      	nop
 8005474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005476:	bc08      	pop	{r3}
 8005478:	469e      	mov	lr, r3
 800547a:	4770      	bx	lr
